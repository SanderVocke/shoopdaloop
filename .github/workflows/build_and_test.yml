name: Build and test

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  BUILD_TYPE: Debug
  PIP_BREAK_SYSTEM_PACKAGES: 1

permissions:
  contents: read
  checks: write

jobs:
  
  # build_release_linux:
  #   runs-on: ubuntu-latest
  #   container:
  #     image: sandervocke/shoopdaloop_build_base_manylinux_2_28:latest
  #     options: --user root --workdir /
  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v3
  #     with:
  #       submodules: recursive
  #   - name: Install Qt
  #     uses: ./.github/actions/install_qt
  #   - name: Prepare manylinux environment
  #     uses: ./.github/actions/prepare_manylinux_2_28
  #   - name: Build and upload
  #     uses: ./.github/actions/build_wheel
  #     with:
  #       variant_name: release
  #       wheel_artifact_name: release_wheel
  #       python: python3.8
  #       prepend_build_cmd: CMAKE_PREFIX_PATH=/usr/local/Qt-6.5.3
    
  build_release_windows:
    runs-on: windows-2022
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: recursive
    - name: Install Qt
      uses: jurplel/install-qt-action@v2
      with:
        version: "6.5.3"
        host: windows
        target: desktop
        arch: win64_msvc2019_64
        dir: ${{ runner.temp }}
        modules: qtquick qtqml
        setup-python: true
    - name: Install boost
      id: install_boost
      uses: ./.github/actions/install_boost_headers
      with:
        dir: ${{ github.workspace }}/includes
    - name: Install dependencies
      run: |
        python -m pip install build virtualenv pytest meson
        choco install --yes --no-progress --allow-empty-checksums pkgconfiglite
    - name: Prepare py-build-cmake settings
      run: echo "cmake.args = [\"--log-level=verbose\", \"-DCMAKE_INCLUDE_PATH=${{ github.workspace }}/includes\"]" > py-build-cmake.local.toml
    - name: Build and upload
      uses: ./.github/actions/build_wheel
      with:
        variant_name: release_win64
        wheel_artifact_name: release_wheel_win64
        python: python
        prepend_build_cmd: CMAKE_INCLUDE_PATH="$PWD/includes"
        pip_install_extra_args: --no-build-isolation --no-clean
        pypa_build_extra_args: -C--local=pyproject.toml.nojack_overrides
        whl_suffix: win_x64
        install: false
    - name: Setup tmate session
      if: ${{ failure() }}
      uses: mxschmitt/action-tmate@v3

  # build_debug:
  #   runs-on: ubuntu-latest
  #   container:
  #     image: sandervocke/shoopdaloop_build_base_manylinux_2_28:latest
  #     options: --user root --workdir /
  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v3
  #     with:
  #       submodules: recursive
  #   - name: Install Qt
  #     uses: ./.github/actions/install_qt
  #   - name: Prepare manylinux environment
  #     uses: ./.github/actions/prepare_manylinux_2_28
  #   - name: Build and upload
  #     uses: ./.github/actions/build_wheel
  #     with:
  #       variant_name: debug
  #       wheel_artifact_name: debug_wheel
  #       pypa_build_extra_args: -C--local=pyproject.toml.debug_overrides
  #       whl_suffix: debug
  #       install: false
  #       python: python3.8
  #       prepend_build_cmd: CMAKE_PREFIX_PATH=/usr/local/Qt-6.5.3
  
  # test_release_whl:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os:
  #         - name: debian_stable
  #           python: python3
  #           pip: python3 -m pip
  #         - name: ubuntu_latest
  #           python: python3
  #           pip: python3 -m pip
  #         - name: arch
  #           python: python
  #           pip: python -m pip
  #   needs: build_release
  #   container:
  #     image: sandervocke/shoopdaloop_run_base_${{ matrix.os.name }}:latest
  #     options: --user root --workdir /
  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v3
  #   - name: Retrieve wheel
  #     uses: actions/download-artifact@v3
  #     with:
  #       name: release_wheel
  #       path: ~/wheel
  #   - name: Install wheel
  #     id: install
  #     run: |
  #       ${{ matrix.os.pip }} install --force-reinstall ~/wheel/*.whl
  #       echo "install_dir=$(shoopdaloop --info | grep "Installed" | sed -r 's/Installed @ //g')" | tee -a $GITHUB_OUTPUT
  #   - name: Find Qt
  #     shell: bash
  #     id: findqt
  #     run: |
  #       export PKGDIR=$(${{ matrix.os.pip }} show pyside6-essentials | grep Location | sed -r 's/Location:[ ]*//g')
  #       echo "qtlibpath=$(dirname $(find $PKGDIR -name libQt6Core.so.6))" | tee -a $GITHUB_ENV
  #   - name: Test back-end
  #     if: ${{ success() || failure() }}
  #     uses: ./.github/actions/test_backend
  #     with:
  #       variant_name: release
  #       # note: build step generates run_cmd_prefix output
  #       # for usage with shared ASAN library.
  #       run_cmd_prefix: ${{ steps.build.outputs.run_cmd_prefix }}
  #       test_runner_dir: ${{ steps.install.outputs.install_dir }}
  #   - name: Test Python
  #     if: ${{ success() || failure() }}
  #     uses: ./.github/actions/test_python
  #     with:
  #       variant_name: release
  #       run_cmd_prefix: ${{ steps.build.outputs.run_cmd_prefix }} LD_LIBRARY_PATH=${{ env.qtlibpath }}
  #       root_path: ${{ steps.install.outputs.install_dir }}
  #       pytest_command: ${{ matrix.os.python }} -m pytest
  #   - name: Test QML
  #     if: ${{ success() || failure() }}
  #     uses: ./.github/actions/test_qml
  #     with:
  #       variant_name: release
  #       run_cmd_prefix: ${{ steps.build.outputs.run_cmd_prefix }} LD_LIBRARY_PATH=${{ env.qtlibpath }}
  #       root_path: ${{ steps.install.outputs.install_dir }}
  #       python_command: ${{ matrix.os.python }}
  #   - name: Screenshots
  #     if: ${{ success() || failure() }}
  #     uses: ./.github/actions/test_screenshots
  #     with:
  #       root_path: ${{ steps.install.outputs.install_dir }}
  #       screenshots_path: /tmp/screenshots
  #       artifact_name: screenshots_${{ matrix.os.name }}
  #   - name: Test App
  #     if: ${{ success() || failure() }}
  #     uses: ./.github/actions/test_run_app
  #     with:
  #       variant_name: release
  #       run_cmd_prefix: ${{ steps.build.outputs.run_cmd_prefix }} LD_LIBRARY_PATH=${{ env.qtlibpath }}
  #       root_path: ${{ steps.install.outputs.install_dir }}
  #       python: ${{ matrix.os.python }}
        
  # asan:
  #   runs-on: ubuntu-latest
  #   container:
  #     image: sandervocke/shoopdaloop_build_base_manylinux_2_28:latest
  #     options: --user root --workdir /
  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v3
  #     with:
  #       submodules: recursive
  #   - name: Prepare manylinux environment
  #     uses: ./.github/actions/prepare_manylinux_2_28
  #   - name: Install Qt
  #     uses: ./.github/actions/install_qt
  #   - name: Build, install and upload
  #     id: build
  #     uses: ./.github/actions/build_wheel
  #     with:
  #       variant_name: asan
  #       wheel_artifact_name: asan_wheel
  #       pypa_build_extra_args: -C--local=pyproject.toml.debug_asan_overrides
  #       pip_install_extra_args: --break-system-packages
  #       whl_suffix: asan
  #       install: true
  #       prepend_build_cmd: CMAKE_PREFIX_PATH=/usr/local/Qt-6.5.3
  #   - name: Find Qt
  #     shell: bash
  #     id: findqt
  #     run: |
  #       PKGDIR=$(python3 -m pip show pyside6-essentials | grep Location | sed -r 's/Location:[ ]*//g')
  #       echo "qtlibpath=$(dirname $(find $PKGDIR -name libQt6Core.so.6))" | tee -a $GITHUB_ENV
  #   - name: Test back-end
  #     uses: ./.github/actions/test_backend
  #     with:
  #       variant_name: asan
  #       # note: build step generates run_cmd_prefix output
  #       # for usage with shared ASAN library.
  #       run_cmd_prefix: ${{ steps.build.outputs.run_cmd_prefix }}
  #       test_runner_dir: ${{ steps.build.outputs.install_dir }}
  #   - name: Test Python
  #     uses: ./.github/actions/test_python
  #     with:
  #       variant_name: asan
  #       run_cmd_prefix: ${{ steps.build.outputs.run_cmd_prefix }} LD_LIBRARY_PATH=${{ env.qtlibpath }}
  #       root_path: ${{ steps.build.outputs.install_dir }}
  #   - name: Test QML
  #     uses: ./.github/actions/test_qml
  #     with:
  #       variant_name: asan
  #       run_cmd_prefix: ${{ steps.build.outputs.run_cmd_prefix }} LD_LIBRARY_PATH="${{ env.qtlibpath }};/usr/local/lib"
  #       root_path: ${{ steps.build.outputs.install_dir }}
  
  # coverage:
  #   runs-on: ubuntu-latest
  #   container:
  #     image: sandervocke/shoopdaloop_build_base_manylinux_2_28:latest
  #     options: --user root --workdir /
  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v3
  #     with:
  #       submodules: recursive
  #   - name: Prepare manylinux environment
  #     uses: ./.github/actions/prepare_manylinux_2_28
  #   - name: Install Qt
  #     uses: ./.github/actions/install_qt
  #   - name: Build, install and upload
  #     id: build
  #     uses: ./.github/actions/build_wheel
  #     with:
  #       variant_name: coverage
  #       wheel_artifact_name: coverage_wheel
  #       pypa_build_extra_args: --skip-dependency-check -C--local=pyproject.toml.coverage_overrides
  #       pip_install_extra_args: --break-system-packages
  #       whl_suffix: coverage
  #       install: true
  #       prepend_build_cmd: CMAKE_PREFIX_PATH=/usr/local/Qt-6.5.3
  #   - name: Install Qoverage
  #     uses: ./.github/actions/install_qoverage
  #   - name: Qoverage - Instrument QML files
  #     uses: ./.github/actions/qoverage_instrument
  #     with:
  #       package_path: ${{ steps.build.outputs.install_dir }}
  #   - name: Find Qt
  #     shell: bash
  #     id: findqt
  #     run: |
  #       PKGDIR=$(python3 -m pip show pyside6-essentials | grep Location | sed -r 's/Location:[ ]*//g')
  #       echo "qtlibpath=$(dirname $(find $PKGDIR -name libQt6Core.so.6))" | tee -a $GITHUB_ENV
  #   - name: Back-end tests with coverage
  #     uses: ./.github/actions/test_backend
  #     with:
  #       variant_name: coverage
  #       test_runner_dir: ${{ steps.build.outputs.install_dir }}
  #       run_cmd_prefix: >-
  #         PYTHONPATH="$PYTHONPATH:$(pwd)/${{ steps.build.outputs.install_dir}}/.."
  #         BASEDIR=${{ steps.build.outputs.source_dir }}
  #         EXCLUDE=third_party,qt6,boost,c++
  #         REPORTDIR=coverage_reports
  #         REPORTNAME=test_runner
  #         BUILDDIR=${{ steps.build.outputs.build_dir }}
  #         DO_GENHTML=0
  #         ${{ steps.build.outputs.install_dir}}/scripts/run_and_generate_coverage.sh
  #   - name: Test Python with coverage
  #     uses: ./.github/actions/test_python
  #     with:
  #       variant_name: coverage
  #       root_path: ${{ steps.build.outputs.install_dir }}
  #       pytest_command: python3 -m coverage run --source=shoopdaloop -m pytest
  #       run_cmd_prefix: >-
  #         PYTHONPATH="$PYTHONPATH:$(pwd)/${{ steps.build.outputs.install_dir}}/.."
  #         BASEDIR=${{ steps.build.outputs.source_dir }}
  #         EXCLUDE=third_party,qt6,boost,c++
  #         REPORTDIR=coverage_reports
  #         REPORTNAME=pytest
  #         BUILDDIR=${{ steps.build.outputs.build_dir }}
  #         DO_GENHTML=0
  #         LD_LIBRARY_PATH=${{ env.qtlibpath }}
  #         ${{ steps.build.outputs.install_dir}}/scripts/run_and_generate_coverage.sh
  #   - name: Generate Pytest coverage report
  #     run: |
  #       python3 -m coverage xml -i -o coverage_reports/pytest.xml
  #       sed -i 's/pip\/shoopdaloop/src\/shoopdaloop/g' coverage_reports/pytest.xml
  #   - name: Test QML with coverage
  #     uses: ./.github/actions/test_qml
  #     with:
  #       variant_name: coverage
  #       root_path: ${{ steps.build.outputs.install_dir }}
  #       tee_all_output_to: qoverage-console-output.log
  #       python_command: python3 -m coverage run --source=shoopdaloop
  #       run_cmd_prefix: >-
  #         PYTHONPATH="$PYTHONPATH:$(pwd)/${{ steps.build.outputs.install_dir}}/.."
  #         BASEDIR=${{ steps.build.outputs.source_dir }}
  #         EXCLUDE=third_party,qt6,boost,c++
  #         REPORTDIR=coverage_reports
  #         REPORTNAME=qmltest
  #         BUILDDIR=${{ steps.build.outputs.build_dir }}
  #         DO_GENHTML=0
  #         LD_LIBRARY_PATH="${{ env.qtlibpath }};/usr/local/lib"
  #         ${{ steps.build.outputs.install_dir }}/scripts/run_and_generate_coverage.sh
  #   - name: Generate QML Python coverage report
  #     run: |
  #       python3 -m coverage xml -i -o coverage_reports/qml.xml
  #       sed -i 's/pip\/shoopdaloop/src\/shoopdaloop/g' coverage_reports/qml.xml

  #   - name: Qoverage - Generate report
  #     uses: ./.github/actions/qoverage_generate_report
  #     with:
  #       strip: ".*/pip/shoopdaloop"
  #       package_path: ${{ steps.build.outputs.install_dir }}
  #   - name: Upload back-end coverage to CodeCov
  #     if: ${{ !env.ACT }}
  #     uses: codecov/codecov-action@v3
  #     with:
  #       token: ${{ secrets.CODECOV_TOKEN }}
  #       flags: back-end
  #       files: coverage_reports/test_runner.info
  #       verbose: true
  #   - name: Upload Pytest coverage to CodeCov
  #     if: ${{ !env.ACT }}
  #     uses: codecov/codecov-action@v3
  #     with:
  #       token: ${{ secrets.CODECOV_TOKEN }}
  #       flags: pytest
  #       files: coverage_reports/pytest.info,coverage_reports/pytest.xml
  #       verbose: true
  #   - name: Upload QML test coverage to CodeCov
  #     if: ${{ !env.ACT }}
  #     uses: codecov/codecov-action@v3
  #     with:
  #       token: ${{ secrets.CODECOV_TOKEN }}
  #       flags: qml
  #       files: coverage_reports/qmltest.info,coverage_reports/qml.xml
  #       verbose: true
  #   - name: Upload QML coverage to CodeCov
  #     if: ${{ !env.ACT }}
  #     uses: codecov/codecov-action@v3
  #     with:
  #       token: ${{ secrets.CODECOV_TOKEN }}
  #       flags: qml
  #       files: qoverage-report.xml
  #       verbose: true
