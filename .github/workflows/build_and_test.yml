name: Build and test

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

env:
  BUILD_TYPE: Release
  PIP_BREAK_SYSTEM_PACKAGES: 1

permissions:
  contents: read
  checks: write

jobs:

  build:
    strategy:
      fail-fast: false
      matrix:
        kind:
          - name: linux_release
            os: ubuntu-latest
            python: python3.8 # Manylinux-provided
            pyinstaller_python: /usr/bin/python3.8 # pyinstaller uses the official AlmaLinux Python because it has shared libs
            pip: python3.8 -m pip
            container_image: sandervocke/shoopdaloop_base_manylinux_2_28:latest
            prepare: 'manylinux_2_28'
            build_type: 'Release'
            pyinstaller: true
            package_kind: linuxes
            rename_wheel_sed: "'s/([^\\.]+)[\\.]+whl/\\1.whl/g'" # remove double dot
          # - name: linux_debug
          #   os: ubuntu-latest
          #   python: python3.8
          #   pip: python3.8 -m pip
          #   container_image: sandervocke/shoopdaloop_base_manylinux_2_28:latest
          #   prepare: 'manylinux_2_28'
          #   build_type: 'Debug'
          #   rename_wheel_sed: "'s/([^\\.]+)[\\.]+whl/\\1.whl/g'" # remove double dot
          # - name: linux_barebones
          #   os: ubuntu-latest
          #   python: python3.8
          #   pip: python3.8 -m pip
          #   container_image: sandervocke/shoopdaloop_base_manylinux_2_28:latest
          #   prepare: 'manylinux_2_28'
          #   build_type: 'Release'
          #   cmake_opts: '"BACKEND_JACK" = "Off", "HAVE_LV2" = "Off"'
          #   rename_wheel_sed: "'s/([^\\.]+)[\\.]+whl/\\1.whl/g'" # remove double dot
          # - name: linux_asan
          #   # Note: ASAN build does not have a test because it is not trivial to deploy
          #   # an asan-built program on another system. The build is here to ensure the
          #   # build process still works. To use ASAN, compile like this natively.
          #   os: ubuntu-latest
          #   python: python3.8
          #   pip: python3.8 -m pip
          #   container_image: sandervocke/shoopdaloop_base_manylinux_2_28:latest
          #   prepare: 'manylinux_2_28'
          #   build_type: 'Debug'
          #   cmake_opts: '"ENABLE_ASAN" = "On"'
          #   rename_wheel_sed: "'s/([^\\.]+)[\\.]+whl/\\1.whl/g'" # remove double dot
          # - name: linux_coverage
          #   os: ubuntu-latest
          #   python: python3.8
          #   pip: python3.8 -m pip
          #   container_image: sandervocke/shoopdaloop_base_manylinux_2_28:latest
          #   prepare: 'manylinux_2_28'
          #   build_type: 'Debug'
          #   cmake_opts: '"ENABLE_COVERAGE" = "On"'
          #   rename_wheel_sed: "'s/([^\\.]+)[\\.]+whl/\\1.whl/g'" # remove double dot
          #   coverage: true
          - name: windows_release
            os: windows-2022
            python: python.exe
            pip: python.exe -m pip
            container_image: null
            prepare: 'windows'
            build_type: 'Release'
            pyinstaller: true
            package_kind: innosetup
            rename_wheel_sed: "'s/([^\\.]+)[\\.]+whl/\\1.whl/g'" # remove double dot
          # - name: windows_barebones
          #   os: windows-2022
          #   python: python.exe
          #   pip: python.exe -m pip
          #   container_image: null
          #   prepare: 'windows'
          #   build_type: 'Release'
          #   cmake_opts: '"BACKEND_JACK" = "Off", "HAVE_LV2" = "Off"'
          #   rename_wheel_sed: "'s/([^\\.]+)[\\.]+whl/\\1.whl/g'" # remove double dot
          # - name: windows_debug
          #   os: windows-2022
          #   python: python.exe
          #   pip: python.exe -m pip
          #   container_image: null
          #   prepare: 'windows'
          #   build_type: 'Debug'
          #   rename_wheel_sed: "'s/([^\\.]+)[\\.]+whl/\\1.whl/g'" # remove double dot
          # - name: macos_release
          #   os: macos-11
          #   python: python3.8
          #   pip: python3.8 -m pip
          #   container_image: null
          #   prepare: 'macos'
          #   build_type: 'Release'
          #   pyinstaller: true
          #   # Note: for some reason, an incorrect MacOS identifier is generated (macos_11 instead of macos_11_0).
          #   # Also remove the double dot if any.
          #   rename_wheel_sed: "'s/(.*-macosx_[1-9]+_)(x86_64|arm64|universal2)[\\.]*whl/\\10_\\2.whl/g'"
          # - name: macos_debug
          #   os: macos-11
          #   python: python3.8
          #   pip: python3.8 -m pip
          #   container_image: null
          #   prepare: 'macos'
          #   build_type: 'Debug'
          #   # Note: for some reason, an incorrect MacOS identifier is generated (macos_11 instead of macos_11_0).
          #   # Also remove the double dot if any.
          #   rename_wheel_sed: "'s/(.*-macosx_[1-9]+_)(x86_64|arm64|universal2)[\\.]*whl/\\10_\\2.whl/g'"
          # - name: macos_barebones
          #   os: macos-11
          #   python: python3.8
          #   pip: python3.8 -m pip
          #   container_image: null
          #   prepare: 'macos'
          #   build_type: 'Debug'
          #   cmake_opts: '"BACKEND_JACK" = "Off", "HAVE_LV2" = "Off"'
          #   # Note: for some reason, an incorrect MacOS identifier is generated (macos_11 instead of macos_11_0).
          #   # Also remove the double dot if any.
          #   rename_wheel_sed: "'s/(.*-macosx_[1-9]+_)(x86_64|arm64|universal2)[\\.]*whl/\\10_\\2.whl/g'"
    runs-on: ${{ matrix.kind.os}}
    container:
      image: ${{ matrix.kind.container_image }}
      options: --user root --workdir /
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: recursive
    - name: Prepare
      id: prepare
      uses: ./.github/actions/prepare_build
      with:
        variant: ${{ matrix.kind.prepare }}
    - name: Set overrides
      shell: bash
      run: |
        echo 'cmake.build_type = "${{ matrix.kind.build_type }}"' > py-build-cmake.local.toml
        echo 'cmake.options = { ${{ matrix.kind.cmake_opts }} }' >> py-build-cmake.local.toml
    - name: Build wheel
      id: buildwheel
      uses: ./.github/actions/build_wheel
      with:
        variant_name: ${{ matrix.kind.name }}
        python: ${{ matrix.kind.python}}
        prepend_build_cmd: ${{ steps.prepare.outputs.prepend_build_cmd }}
        windows: ${{ matrix.kind.prepare == 'windows' && 'true' || 'false' }}
        rename_wheel_sed: ${{ matrix.kind.rename_wheel_sed }}
    - name: Post-build steps
      id: postbuild
      uses: ./.github/actions/post_build
      with:
        variant: ${{ matrix.kind.prepare }}
        wheel: ${{ steps.buildwheel.outputs.wheel_filename }}
        build_dir: ${{ steps.buildwheel.outputs.build_dir }}
    - name: Find wheel
      shell: bash
      id: find
      run: |
        echo "name=$(ls final_wheel/*.whl)" | tee -a $GITHUB_OUTPUT
    - name: PyInstaller
      id: pyinstaller
      if: ${{ matrix.kind.pyinstaller }}
      uses: ./.github/actions/build_pyinstaller
      with:
        python: ${{ matrix.kind.pyinstaller_python && matrix.kind.pyinstaller_python || matrix.kind.python }}
        wheel: ${{ steps.find.outputs.name }}
    - name: Build package
      id: package
      if: ${{ matrix.kind.package_kind }}
      uses: ./.github/actions/build_package
      with:
        pyinstaller_folder: distribution/pyinstaller/dist/shoopdaloop
        package_kind: ${{ matrix.kind.package_kind }}
    - name: Upload wheel (${{ inputs.variant_name }})
      if: ${{ !env.ACT }}
      uses: actions/upload-artifact@v4
      with:
        name: wheel_${{ matrix.kind.name }}
        path: ${{ steps.find.outputs.name }}
    - name: Upload debug info (${{ inputs.variant_name }})
      if: ${{ !env.ACT }}
      uses: actions/upload-artifact@v4
      with:
        name: debuginfo_${{ matrix.kind.name }}
        path: debuginfo
    - name: Upload PyInstaller (${{ inputs.variant_name }})
      if: ${{ matrix.kind.pyinstaller }}
      uses: actions/upload-artifact@v4
      with:
        name: pyinstaller_${{ matrix.kind.name }}
        path: ${{ steps.pyinstaller.outputs.distribution }}
    - name: Upload package (${{ inputs.variant_name }})
      if: ${{ matrix.kind.package_kind }}
      uses: actions/upload-artifact@v4
      with:
        name: package_${{ matrix.kind.name }}
        path: ${{ steps.package.outputs.output }}
    - name: Save build infor for coverage analyis
      if: ${{ matrix.kind.coverage }}
      run: |
        echo "$(realpath build/cp*/)" | tee ori_build_dir.txt
    - name: Upload info context for coverage analysis
      if: ${{ matrix.kind.coverage }}
      uses: actions/upload-artifact@v4
      with:
        name: coverage_context
        path: |
          ./**/*.gcno
          ori_build_dir.txt
    # - name: TMate failure session
    #   if: ${{ failure() }}
    #   uses: SanderVocke/action-tmate@master
  
  test:
    strategy:
      fail-fast: false
      matrix:
        kind:
          - name: release_debian_stable
            python: python3
            pip: python3 -m pip
            pytest: python3 -m pytest
            container: sandervocke/shoopdaloop_run_base_debian_stable:latest
            os: ubuntu-latest
            package: wheel_linux_release
            qpa_platform: vnc
          # - name: barebones_debian_stable
          #   python: python3
          #   pip: python3 -m pip
          #   pytest: python3 -m pytest
          #   container: sandervocke/shoopdaloop_run_base_debian_stable:latest
          #   os: ubuntu-latest
          #   package: wheel_linux_barebones
          #   qpa_platform: vnc
          # - name: release_ubuntu_latest
          #   python: python3
          #   pip: python3 -m pip
          #   pytest: python3 -m pytest
          #   container: sandervocke/shoopdaloop_run_base_ubuntu_latest:latest
          #   os: ubuntu-latest
          #   package: wheel_linux_release
          #   qpa_platform: vnc
          - name: release_ubuntu_latest_pyinstaller
            python: python3
            pip: python3 -m pip
            pytest: python3 -m pytest
            container: sandervocke/shoopdaloop_run_base_ubuntu_latest:latest
            os: ubuntu-latest
            package: pyinstaller_linux_release
            qpa_platform: vnc
          # - name: release_arch
          #   python: python
          #   pip: python -m pip
          #   pytest: python3 -m pytest
          #   container: sandervocke/shoopdaloop_run_base_arch:latest
          #   os: ubuntu-latest
          #   package: wheel_linux_release
          #   qpa_platform: vnc
          # - name: coverage_manylinux_2_28
          #   python: python3.8 -m coverage run --source=shoopdaloop
          #   pip: python3.8 -m pip
          #   pytest: python3.8 -m coverage run --source=shoopdaloop -m pytest
          #   container: sandervocke/shoopdaloop_base_manylinux_2_28:latest
          #   os: ubuntu-latest
          #   package: wheel_linux_coverage
          #   qpa_platform: vnc
          #   coverage: true
          #   run_cmd_prefix: >-
          #     BASEDIR=$(pwd)
          #     EXCLUDE='/*/third_party/* /*/catch2/*'
          #     REPORTDIR=coverage_reports
          #     BUILDDIR=$(realpath build/cp*/)
          #     ORI_BUILD_DIR=$(cat ori_build_dir.txt)
          #     DO_GENHTML=0
          #     SHOOP_LOG=QoverageCollectorFactory=debug
          #     QML_IMPORT_PATH=$(~/.local/bin/qoverage --importpath)
          #     scripts/run_and_generate_coverage.sh
          # - name: release_macos11
          #   python: python3
          #   pip: python3 -m pip
          #   pytest: python3 -m pytest
          #   container: null
          #   os: macos-11
          #   package: wheel_macos_release
          #   qpa_platform: offscreen
          # - name: release_macos12
          #   python: python3
          #   pip: python3 -m pip
          #   pytest: python3 -m pytest
          #   container: null
          #   os: macos-12
          #   package: wheel_macos_release
          #   qpa_platform: offscreen
          # - name: release_macos13
          #   python: python3
          #   pip: python3 -m pip
          #   pytest: python3 -m pytest
          #   container: null
          #   os: macos-13
          #   package: wheel_macos_release
          #   qpa_platform: offscreen
          # - name: release_macos13_pyinstaller
          #   python: python3
          #   pip: python3 -m pip
          #   pytest: python3 -m pytest
          #   container: null
          #   os: macos-13
          #   pyinstaller: pyinstaller_macos_release
          #   qpa_platform: offscreen
          # - name: debug_macos13
          #   python: python3
          #   pip: python3 -m pip
          #   pytest: python3 -m pytest
          #   container: null
          #   os: macos-13
          #   package: wheel_macos_debug
          #   qpa_platform: offscreen
          - name: release_windows
            python: python.exe
            pip: python.exe -m pip
            pytest: python.exe -m pytest
            container: null
            os: windows-2022
            package: wheel_windows_release
            qpa_platform: offscreen
            pathconvert: "| cygpath -u -f -"
          - name: release_windows_innosetup
            python: python.exe
            pip: python.exe -m pip
            pytest: python.exe -m pytest
            container: null
            os: windows-2022
            package: package_windows_release
            qpa_platform: offscreen
            pathconvert: "| cygpath -u -f -"
          # - name: debug_windows
          #   python: python.exe
          #   pip: python.exe -m pip
          #   pytest: python.exe -m pytest
          #   container: null
          #   os: windows-2022
          #   package: wheel_windows_debug
          #   qpa_platform: offscreen
          #   pathconvert: "| cygpath -u -f -"
    runs-on: ${{ matrix.kind.os }}
    needs: build
    if: ${{ always() }}
    container:
      image: ${{ matrix.kind.container }}
      options: --user root --workdir / # Note: this gets disregarded if container is null
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: recursive
    - name: Retrieve package
      if: ${{ matrix.kind.package }}
      uses: actions/download-artifact@v4
      with:
        name: ${{ matrix.kind.package }}
        path: ./package
    - name: Find package
      if: ${{ matrix.kind.package }}
      id: find_package
      shell: bash
      run: |
        echo "package=$(find package -type f)" | tee -a $GITHUB_OUTPUT
    - name: Install package (${{ matrix.kind.package }})
      if: ${{ matrix.kind.package }}
      id: install_package
      uses: ./.github/actions/install_package
      with:
        package: ${{ steps.find_package.outputs.package }}
    - name: Retrieve info context for coverage analysis
      if: ${{ matrix.kind.coverage }}
      uses: actions/download-artifact@v4
      with:
        name: coverage_context
    - name: Pre-install ASAN shared lib
      if: ${{ matrix.kind.asan }}
      shell: bash
      run: |
        ${{ matrix.kind.pip }} install wheel
        mkdir unzip_whl
        ${{ matrix.kind.python }} -m wheel unpack ~/wheel/*.whl -d unzip_whl
        cp $(find unzip_whl -name "libasan.so*") /usr/lib/x86_64-linux-gnu/libasan_shoop.so
    - name: Create crashdumps folder
      shell: bash
      run: |
        mkdir -p crashdumps
    - name: Install Python modules
      shell: bash
      run: |
        ${{ matrix.kind.pip }} install pytest coverage pipx
    - name: Install Qoverage
      if: ${{ matrix.kind.coverage }}
      uses: ./.github/actions/install_qoverage
      with:
        python: ${{ matrix.kind.python }}
    - name: Qoverage - Instrument QML files
      if: ${{ matrix.kind.coverage }}
      uses: ./.github/actions/qoverage_instrument
      with:
        package_path: ${{ steps.install_package.outputs.install_dir }}
    - name: Test back-end
      if: ${{ (success() || failure()) && steps.install_package.outputs.test_runner }}
      uses: ./.github/actions/test_backend
      timeout-minutes: 5
      with:
        variant_name: ${{ matrix.kind.name }}
        # note: build step generates run_cmd_prefix output
        # for usage with shared ASAN library.
        run_cmd_prefix: SHOOP_CRASH_DUMP_DIR=crashdumps REPORTNAME=backend_lcov ${{ matrix.kind.run_cmd_prefix }}
        test_runner: ${{ steps.install_package.outputs.test_runner }}
    - name: Test Python
      if: ${{ (success() || failure()) && steps.install_package.outputs.pytest_dir }}
      uses: ./.github/actions/test_python
      timeout-minutes: 5
      with:
        variant_name: release
        run_cmd_prefix: SHOOP_CRASH_DUMP_DIR=crashdumps REPORTNAME=pytest_lcov ${{ matrix.kind.run_cmd_prefix }}
        root_path: ${{ steps.install_package.outputs.pytest_dir }}
        pytest_command: ${{ matrix.kind.pytest }}
        python_coverage: ${{ matrix.kind.coverage }}
    - name: Generate Pytest Python coverage report
      if: ${{ (success() || failure()) && matrix.kind.coverage }}
      run: |
        ${{ matrix.kind.python }} -m coverage xml -i -o coverage_reports/pytest_pycoverage.xml
        sed -i 's/pip\/shoopdaloop/src\/shoopdaloop/g' coverage_reports/pytest_pycoverage.xml
    - name: Test QML
      if: ${{ success() || failure() }}
      uses: ./.github/actions/test_qml
      timeout-minutes: 20
      with:
        variant_name: release
        run_cmd_prefix: SHOOP_CRASH_DUMP_DIR=crashdumps REPORTNAME=qml_lcov ${{ matrix.kind.run_cmd_prefix }}
        shoopdaloop_command: ${{ steps.install_package.outputs.shoopdaloop }}
        python_command: ${{ matrix.kind.python }}
        qt_qpa_platform: ${{ matrix.kind.qpa_platform }}
        macos_rpath_patch: ${{ contains(matrix.kind.name, 'macos') }}
        tee_all_output_to: test-qml-console-output.log
    - name: Generate QML Python coverage report
      if: ${{ (success() || failure()) && matrix.kind.coverage }}
      run: |
        ${{ matrix.kind.python }} -m coverage xml -i -o coverage_reports/qml_pycoverage.xml
        sed -i 's/pip\/shoopdaloop/src\/shoopdaloop/g' coverage_reports/qml_pycoverage.xml
    - name: Qoverage - Generate report
      if: ${{ (success() || failure()) && matrix.kind.coverage }}
      uses: ./.github/actions/qoverage_generate_report
      with:
        strip: ".*/pip/shoopdaloop"
        package_path: ${{ steps.install_package.outputs.install_dir }}
        console_output_file: test-qml-console-output.log
        report_file: coverage_reports/qml_qoverage.xml
    - name: Screenshots
      if: ${{ success() || failure() }}
      uses: ./.github/actions/test_screenshots
      timeout-minutes: 5
      with:
        root_path: ${{ steps.install_package.outputs.install_dir }}
        screenshots_path: _grabbed_screenshots
        artifact_name: screenshots_${{ matrix.kind.name }}
        qt_qpa_platform: ${{ matrix.kind.qpa_platform }}
        python: ${{ matrix.kind.python }}
        shoopdaloop_command: ${{ steps.install_package.outputs.shoopdaloop }}
    - name: Test Run App
      if: ${{ success() || failure() }}
      uses: ./.github/actions/test_run_app
      timeout-minutes: 15
      with:
        variant_name: release
        run_cmd_prefix: SHOOP_CRASH_DUMP_DIR=crashdumps ${{ matrix.kind.run_cmd_prefix }}
        root_path: ${{ steps.install_package.outputs.install_dir }}
        python: ${{ matrix.kind.python }}
        qt_qpa_platform: ${{ matrix.kind.qpa_platform }}
        shoopdaloop_command: ${{ steps.install_package.outputs.shoopdaloop }}
    - name: Process Crash Dumps
      if: ${{ success() || failure() }}
      uses: ./.github/actions/process_crashdumps
      with:
        dumps_dir: crashdumps
        python: ${{ matrix.kind.python }}
        variant: ${{ matrix.kind.name }}
    - name: Upload back-end coverage to CodeCov
      if: ${{ (success() || failure()) && matrix.kind.coverage && !(matrix.kind.pyinstaller) }}
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        flags: back-end
        files: coverage_reports/backend_lcov.info
        verbose: true
    - name: Upload Pytest coverage to CodeCov
      if: ${{ (success() || failure()) && matrix.kind.coverage && !(matrix.kind.pyinstaller) }}
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        flags: pytest
        files: coverage_reports/pytest_lcov.info,coverage_reports/pytest_pycoverage.xml
        verbose: true
    - name: Upload QML test coverage to CodeCov
      if: ${{ (success() || failure()) && matrix.kind.coverage }}
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        flags: qml
        files: coverage_reports/qml_lcov.info,coverage_reports/qml_pycoverage.xml,coverage_reports/qml_qoverage.xml
        verbose: true
    - name: Upload raw coverage reports
      if: ${{ (success() || failure()) && matrix.kind.coverage }}
      uses: actions/upload-artifact@v4
      with:
        name: coverage_reports
        path: coverage_reports
    # - name: TMate failure session
    #   if: ${{ failure() && matrix.kind.asan }}
    #   uses: SanderVocke/action-tmate@master

  collect_crashes:
    runs-on: ubuntu-latest
    needs:
      - build
      - test
    if: ${{ always() }}
    container:
      image: archlinux:latest
      options: --user root --workdir /
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: crashdumps_*
        path: crashdumps
    - name: Count crash dumps
      id: count
      shell: bash
      run: |
        mkdir -p crashdumps
        echo "crashdumps=$(ls crashdumps/crashdumps_* | wc -l)" | tee -a $GITHUB_OUTPUT
        pacman --noconfirm -Syy
        pacman --noconfirm -S --needed tree git
    - name: Download debug information
      uses: actions/download-artifact@v4
      if: ${{ steps.count.outputs.crashdumps != 0 }}
      with:
        path: debuginfo
        pattern: debuginfo_*
        merge-multiple: true
    - name: Cache minidump-stackwalk
      id: cache-minidump
      uses: actions/cache@v4
      with:
        path: minidump-stackwalk
        key: minidump-stackwalk-1
    - name: Get minidump package sources
      if: ${{ steps.count.outputs.crashdumps != 0 && steps.cache-minidump.outputs.cache-hit != 'true' }}
      shell: bash
      run: |
        pacman --noconfirm -Syy
        pacman --noconfirm -S --needed git base-devel && git clone https://aur.archlinux.org/minidump-stackwalk.git
    - name: Makepkg Build
      id: makepkg
      if: ${{ steps.count.outputs.crashdumps != 0 && steps.cache-minidump.outputs.cache-hit != 'true' }}
      uses: edlanglois/pkgbuild-action@v1
      with:
        pkgdir: minidump-stackwalk
    - name: Install minidump package
      if: ${{ steps.count.outputs.crashdumps != 0 }}
      shell: bash
      run: |
        pacman --noconfirm -U minidump-stackwalk/minidump-stackwalk*.pkg*
    - name: Process dumps
      if: ${{ steps.count.outputs.crashdumps != 0 }}
      shell: bash
      run: |
        tree crashdumps
        cp -r debuginfo crashdumps/debuginfo
        for dump in $(find crashdumps -name "*.dmp"); do
          echo ""
          echo "================================================="
          echo "Processing $dump..."
          echo "================================================="
          minidump-stackwalk $dump debuginfo/breakpad_symbols | tee $dump.stackwalk
        done
    - name: Upload crash dumps to Bugsplat
      if: ${{ (success() || failure()) && steps.count.outputs.crashdumps != 0 }}
      shell: bash
      run: |
        for dump in $(find crashdumps -name "*.dmp"); do
          echo ""
          echo "================================================="
          echo "Uploading $dump..."
          echo "================================================="
          bash ./scripts/upload_crash_info.sh $dump git-${{ github.sha }} "sandervocke@gmail.com" "Found on GitHub Actions run: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }} ${dump}.moreinfo"
        done
    - uses: actions/setup-node@v4
      with:
        node-version: 19
    - name: Upload BugSplat debug symbols
      if: ${{ (success() || failure()) && steps.count.outputs.crashdumps != 0 }}
      uses: SanderVocke/symbol-upload@test_action
      with:
        clientId: "${{ secrets.BUGSPLAT_CLIENT_ID }}"
        clientSecret: "${{ secrets.BUGSPLAT_CLIENT_SECRET }}"
        database: shoopdaloop
        application: shoopdaloop
        version: git-${{ github.sha }}
        files: "**/*.sym"
        directory: crashdumps/debuginfo
    - name: Upload crash dumps as artifact
      if: ${{ (success() || failure()) && steps.count.outputs.crashdumps != 0 }}
      uses: actions/upload-artifact@v4
      with:
        name: crashdumps_summary
        path: crashdumps
