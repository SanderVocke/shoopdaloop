name: Build and test

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  BUILD_TYPE: Debug

permissions:
  contents: read
  checks: write

jobs:
  
  build_debug_whl:
    uses: ./.github/workflows/build_wheel.yml
    with:
      variant_name: debug
      pypa_build_extra_args: -C--local=pyproject.toml.debug_overrides
      whl_suffix: dbg
      artifact_name: debug_wheel
  
  build_asan_whl:
    uses: ./.github/workflows/build_wheel.yml
    with:
      variant_name: asan
      pypa_build_extra_args: -C--local=pyproject.toml.debug_asan_overrides
      whl_suffix: asan
      artifact_name: asan_wheel
  
  build_release_whl:
    uses: ./.github/workflows/build_wheel.yml
    with:
      variant_name: release
      artifact_name: release_wheel
  
  build_coverage_whl:
    uses: ./.github/workflows/build_wheel.yml
    with:
      variant_name: coverage
      pypa_build_extra_args: -C--local=pyproject.toml.coverage_overrides
      artifact_name: coverage_wheel
      whl_suffix: coverage
  
  test_asan_wheel_ubuntu_pypi:
    # note: this runs on the build container because that will provide
    # the same shared libasan.so used during build
    uses: ./.github/workflows/test_wheel.yml
    needs: build_asan_whl
    with:
      variant_name: asan
      container: sandervocke/shoopdaloop_ubuntu_kinetic_build_base:latest
      artifact_name: asan_wheel
      run_cmd_prefix: ${{ needs.build_asan_whl.outputs.run_cmd_prefix }}
      test_backend: true
      test_python: true
      test_qml: true
      test_runapp: false # ASAN checks take too long

  
  test_release_wheel_ubuntu_pypi:
    uses: ./.github/workflows/test_wheel.yml
    needs: build_release_whl
    with:
      variant_name: release
      artifact_name: release_wheel
      run_cmd_prefix: ${{ needs.build_release_whl.outputs.run_cmd_prefix }}
      test_backend: true
      test_python: true
      test_qml: true
      test_runapp: true
  
  test_coverage:
    uses: ./.github/workflows/test_wheel.yml
    needs: build_coverage_whl
    with:
      variant_name: coverage
      container: sandervocke/shoopdaloop_ubuntu_kinetic_build_base:latest
      artifact_name: coverage_wheel
      run_cmd_prefix: ${{ needs.build_coverage_whl.outputs.run_cmd_prefix }}
      test_backend: true
      test_python: true
      test_qml: true
      test_runapp: false
      upload_coverage: true

  
  # # Test the built wheel in an Arch environment with dependencies pre-installed.
  # test_wheel_arch_systempackages:
  #   needs: build_whl
  #   runs-on: ubuntu-latest
  #   container:
  #     image: sandervocke/shoopdaloop_run_arch:latest
  #     options: --user root --workdir /
    
  #   steps:
  #   - name: Retrieve wheel
  #     uses: actions/download-artifact@v3
  #     with:
  #       name: wheel
  #       path: ~/wheel

  #   - name: Install wheel
  #     run: |
  #       echo "::warning title=PACKAGING_ISSUE::Temporarily removed --no-deps on Arch because of broken python-numba"
  #       python3 -m pip install ~/wheel/*.whl --break-system-packages
  #       echo "PKG_DIR=$(python3 -m pip show shiboken6 | grep "Location:" | sed -r 's/Location: //g')" >> $GITHUB_ENV
    
  #   - name: Back-end tests
  #     if: success() || failure() # always run even if the previous step fails
  #     run: |
  #       mkdir -p reports
  #       ${{ env.PKG_DIR }}/shoopdaloop/test_runner --reporter junit --out reports/backend_junit_results.xml
  #       echo "Back-end test results file: $(ls -la reports/backend_junit_results.xml)"
    
  #   - name: Python tests
  #     if: success() || failure() # always run even if the previous step fails
  #     run: |
  #       mkdir -p reports
  #       pytest ${{ env.PKG_DIR }}/shoopdaloop --junit-xml=reports/python_junit_results.xml
  #       echo "Python test results file: $(ls -la reports/python_junit_results.xml)"
    
  #   - name: QML tests
  #     if: success() || failure() # always run even if the previous step fails
  #     run: |
  #       mkdir -p reports
  #       QT_QPA_PLATFORM=vnc ${{ env.PKG_DIR }}/shoopdaloop/run_qml_tests.py -o reports/qml_junit_results.xml,junitxml
  #       echo "QML test results file: $(ls -la reports/qml_junit_results.xml)"
    
  #   - name: App runs and closes gracefully
  #     if: success() || failure() # always run even if the previous step fails
  #     run: |
  #       QT_QPA_PLATFORM=vnc EXPECT_STAY_OPEN=1 WAIT_MS_BEFORE_CLOSE=5000 N_ITERATIONS=10 WAIT_MS_BEFORE_KILL=10000 ${{ env.PKG_DIR }}/shoopdaloop/scripts/test_run_app.sh shoopdaloop

  #   - name: Publish Backend Test Report
  #     uses: mikepenz/action-junit-report@v3
  #     if: success() || failure() # always run even if the previous step fails
  #     with:
  #       report_paths: 'reports/backend_junit_results.xml'
  #       detailed_summary: true
  #       include_passed: true
  #       check_name: 'backend test (arch system)'
    
  #   - name: Publish Python Test Report
  #     uses: mikepenz/action-junit-report@v3
  #     if: success() || failure() # always run even if the previous step fails
  #     with:
  #       report_paths: 'reports/python_junit_results.xml'
  #       detailed_summary: true
  #       include_passed: true
  #       check_name: 'python test (arch system)'
    
  #   - name: Publish QML Test Report
  #     uses: mikepenz/action-junit-report@v3
  #     if: success() || failure() # always run even if the previous step fails
  #     with:
  #       report_paths: 'reports/qml_junit_results.xml'
  #       detailed_summary: true
  #       include_passed: true
  #       check_name: 'qml test (arch system)'

  # # Test the built wheel in an Ubuntu environment with dependencies pre-installed.
  # test_wheel_ubuntu_systempackages:
  #   needs: build_whl
  #   runs-on: ubuntu-latest
  #   container:
  #     image: sandervocke/shoopdaloop_run_ubuntu:latest
  #     options: --user root --workdir /
    
  #   steps:
  #   - name: Retrieve wheel
  #     uses: actions/download-artifact@v3
  #     with:
  #       name: wheel
  #       path: ~/wheel

  #   - name: Install wheel
  #     run: |
  #       python3 -m pip install --no-deps --break-system-packages ~/wheel/*.whl
  #       echo "PKG_DIR=$(python3 -m pip show shiboken6 | grep "Location:" | sed -r 's/Location: //g')" >> $GITHUB_ENV
    
  #   - name: Back-end tests
  #     if: success() || failure() # always run even if the previous step fails
  #     run: |
  #       mkdir -p reports
  #       ${{ env.PKG_DIR }}/shoopdaloop/test_runner --reporter junit --out reports/backend_junit_results.xml
  #       echo "Back-end test results file: $(ls -la reports/backend_junit_results.xml)"
    
  #   - name: Python tests
  #     if: success() || failure() # always run even if the previous step fails
  #     run: |
  #       mkdir -p reports
  #       pytest ${{ env.PKG_DIR }}/shoopdaloop --junit-xml=reports/python_junit_results.xml
  #       echo "Python test results file: $(ls -la reports/python_junit_results.xml)"
    
  #   - name: QML tests
  #     if: success() || failure() # always run even if the previous step fails
  #     run: |
  #       mkdir -p reports
  #       QT_QPA_PLATFORM=vnc ${{ env.PKG_DIR }}/shoopdaloop/run_qml_tests.py -o reports/qml_junit_results.xml,junitxml
  #       echo "QML test results file: $(ls -la reports/qml_junit_results.xml)"
    
  #   - name: App runs and closes gracefully
  #     if: success() || failure() # always run even if the previous step fails
  #     run: |
  #       QT_QPA_PLATFORM=vnc EXPECT_STAY_OPEN=1 WAIT_MS_BEFORE_CLOSE=5000 N_ITERATIONS=10 WAIT_MS_BEFORE_KILL=10000 ${{ env.PKG_DIR }}/shoopdaloop/scripts/test_run_app.sh shoopdaloop

  #   - name: Publish Backend Test Report
  #     uses: mikepenz/action-junit-report@v3
  #     if: success() || failure() # always run even if the previous step fails
  #     with:
  #       report_paths: 'reports/backend_junit_results.xml'
  #       detailed_summary: true
  #       include_passed: true
  #       check_name: 'backend test (ubuntu system)'
    
  #   - name: Publish Python Test Report
  #     uses: mikepenz/action-junit-report@v3
  #     if: success() || failure() # always run even if the previous step fails
  #     with:
  #       report_paths: 'reports/python_junit_results.xml'
  #       detailed_summary: true
  #       include_passed: true
  #       check_name: 'python test (ubuntu system)'
    
  #   - name: Publish QML Test Report
  #     uses: mikepenz/action-junit-report@v3
  #     if: success() || failure() # always run even if the previous step fails
  #     with:
  #       report_paths: 'reports/qml_junit_results.xml'
  #       detailed_summary: true
  #       include_passed: true
  #       check_name: 'qml test (ubuntu system)'

  