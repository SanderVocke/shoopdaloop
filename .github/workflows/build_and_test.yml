name: Build and test

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  BUILD_TYPE: Debug
  XORG_CONFIG: |
    Section "Monitor"
            Identifier "dummy_monitor"
            HorizSync 28.0-80.0
            VertRefresh 48.0-75.0
            Modeline "1920x1080" 172.80 1920 2040 2248 2576 1080 1081 1084 1118
    EndSection

    Section "Device"
            Identifier "dummy_card"
            VideoRam 256000
            Driver "dummy"
    EndSection

    Section "Screen"
            Identifier "dummy_screen"
            Device "dummy_card"
            Monitor "dummy_monitor"
            SubSection "Display"
            EndSubSection
    EndSection

permissions:
  contents: read
  checks: write

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: sandervocke/shoopdaloop_build_arch:latest
      options: --user root --workdir /
    
    steps:      
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Configure CMake
      run: |
        cmake -G Ninja -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: FIXME symbolic back-end link to build folder
      run: |
        ln -s ${{github.workspace}}/build build

    - name: Build using CMake
      run: |
        cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
    
    - name: Back-end tests
      if: success() || failure() # always run even if the previous step fails
      run: |
        mkdir -p reports
        ${{github.workspace}}/build/backend/test/test_runner --reporter junit --out reports/backend_junit_results.xml
        echo "Back-end test results file: $(ls -la reports/backend_junit_results.xml)"
    
    - name: Python tests
      if: success() || failure() # always run even if the previous step fails
      run: |
        mkdir -p reports
        pytest --junit-xml=reports/python_junit_results.xml
        echo "Python test results file: $(ls -la reports/python_junit_results.xml)"
    
    - name: QML tests
      if: success() || failure() # always run even if the previous step fails
      run: |
        mkdir -p reports
        X -config /etc/dummy_monitor.conf &
        sleep 0.5
        DISPLAY=:0 ./test/run_qml_tests.py --junit reports/qml_junit_results.xml
        echo "QML test results file: $(ls -la reports/qml_junit_results.xml)"

    - name: Publish Backend Test Report
      uses: mikepenz/action-junit-report@v3
      if: success() || failure() # always run even if the previous step fails
      with:
        report_paths: 'reports/backend_junit_results.xml'
        detailed_summary: true
        include_passed: true
        check_name: 'Backend Test Report'
    
    - name: Publish Python Test Report
      uses: mikepenz/action-junit-report@v3
      if: success() || failure() # always run even if the previous step fails
      with:
        report_paths: 'reports/python_junit_results.xml'
        detailed_summary: true
        include_passed: true
        check_name: 'Python Test Report'
    
    - name: Publish QML Test Report
      uses: mikepenz/action-junit-report@v3
      if: success() || failure() # always run even if the previous step fails
      with:
        report_paths: 'reports/qml_junit_results.xml'
        detailed_summary: true
        include_passed: true
        check_name: 'QML Test Report'
