name: Build and test

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  BUILD_TYPE: Debug

permissions:
  contents: read
  checks: write

jobs:
  
  build_release_whl:
    runs-on: ubuntu-latest
    container:
      image: sandervocke/shoopdaloop_build_base:latest
      options: --user root --workdir /
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: recursive
    - name: Build and upload
      uses: ./.github/actions/build_wheel
      with:
        variant_name: release
        artifact_name: release_wheel
        install: false
  
  test_release_whl:
    runs-on: ubuntu-latest
    needs: build_release_whl
    container:
      image: sandervocke/shoopdaloop_run_base:latest
      options: --user root --workdir /
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Retrieve wheel
      uses: actions/download-artifact@v3
      with:
        name: release_wheel
        path: ~/wheel
    - name: Install wheel
      id: install
      run: |
        python3 -m pip install --force-reinstall --break-system-packages ~/wheel/*.whl
        echo "install_dir=$(shoopdaloop --info | grep "Installed" | sed -r 's/Installed @ //g')" | tee -a $GITHUB_OUTPUT
    - name: Find Qt
      shell: bash
      id: findqt
      run: |
        echo "qtlibpath=$(dirname $(find ${{ steps.install.outputs.install_dir }}/.. -name libQt6Core.so.6))" | tee -a $GITHUB_ENV
    - name: Test back-end
      uses: ./.github/actions/backend_test
      with:
        variant_name: release
        # note: build step generates run_cmd_prefix output
        # for usage with shared ASAN library.
        run_cmd_prefix: ${{ steps.build.outputs.run_cmd_prefix }}
        test_runner_dir: ${{ steps.install.outputs.install_dir }}
    - name: Test Python
      uses: ./.github/actions/python_test
      with:
        variant_name: release
        run_cmd_prefix: ${{ steps.build.outputs.run_cmd_prefix }} LD_LIBRARY_PATH=${{ env.qtlibpath }}
        root_path: ${{ steps.install.outputs.install_dir }}
    - name: Test QML
      uses: ./.github/actions/qml_test
      with:
        variant_name: release
        run_cmd_prefix: ${{ steps.build.outputs.run_cmd_prefix }} LD_LIBRARY_PATH=${{ env.qtlibpath }}
        root_path: ${{ steps.install.outputs.install_dir }}
    - name: Test App
      uses: ./.github/actions/app_run_test
      with:
        variant_name: release
        run_cmd_prefix: ${{ steps.build.outputs.run_cmd_prefix }} LD_LIBRARY_PATH=${{ env.qtlibpath }}
        root_path: ${{ steps.install.outputs.install_dir }}
        
  asan:
    runs-on: ubuntu-latest
    container:
      image: sandervocke/shoopdaloop_build_base:latest
      options: --user root --workdir /
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: recursive
    - name: Build, install and upload
      id: build
      uses: ./.github/actions/build_wheel
      with:
        variant_name: asan
        artifact_name: asan_wheel
        pypa_build_extra_args: -C--local=pyproject.toml.debug_asan_overrides
        pip_install_extra_args: --break-system-packages
        whl_suffix: asan
        install: true
    - name: Find Qt
      shell: bash
      id: findqt
      run: |
        echo "qtlibpath=$(dirname $(find ${{ steps.build.outputs.install_dir }}/.. -name libQt6Core.so.6))" | tee -a $GITHUB_ENV
    - name: Test back-end
      uses: ./.github/actions/backend_test
      with:
        variant_name: asan
        # note: build step generates run_cmd_prefix output
        # for usage with shared ASAN library.
        run_cmd_prefix: ${{ steps.build.outputs.run_cmd_prefix }}
        test_runner_dir: ${{ steps.build.outputs.install_dir }}
    - name: Test Python
      uses: ./.github/actions/python_test
      with:
        variant_name: asan
        run_cmd_prefix: ${{ steps.build.outputs.run_cmd_prefix }} LD_LIBRARY_PATH=${{ env.qtlibpath }}
        root_path: ${{ steps.build.outputs.install_dir }}
    - name: Test QML
      uses: ./.github/actions/qml_test
      with:
        variant_name: asan
        run_cmd_prefix: ${{ steps.build.outputs.run_cmd_prefix }} LD_LIBRARY_PATH=${{ env.qtlibpath }}
        root_path: ${{ steps.build.outputs.install_dir }}
  
  build_debug_whl:
    runs-on: ubuntu-latest
    container:
      image: sandervocke/shoopdaloop_build_base:latest
      options: --user root --workdir /
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: recursive
    - name: Build and upload
      uses: ./.github/actions/build_wheel
      with:
        variant_name: debug
        artifact_name: debug_wheel
        pypa_build_extra_args: -C--local=pyproject.toml.debug_overrides
        whl_suffix: debug
        install: false
  
  coverage:
    runs-on: ubuntu-latest
    container:
      image: sandervocke/shoopdaloop_build_base:latest
      options: --user root --workdir /
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: recursive
    - name: Build, install and upload
      id: build
      uses: ./.github/actions/build_wheel
      with:
        variant_name: coverage
        artifact_name: coverage_wheel
        pypa_build_extra_args: --skip-dependency-check -C--local=pyproject.toml.coverage_overrides
        pip_install_extra_args: --break-system-packages
        whl_suffix: coverage
        install: true
    - name: Find Qt
      shell: bash
      id: findqt
      run: |
        echo "qtlibpath=$(dirname $(find ${{ steps.build.outputs.install_dir }}/.. -name libQt6Core.so.6))" | tee -a $GITHUB_ENV
    - name: Back-end tests with coverage
      uses: ./.github/actions/backend_test
      with:
        variant_name: coverage
        test_runner_dir: ${{ steps.build.outputs.install_dir }}
        run_cmd_prefix: >-
          BASEDIR=${{ steps.build.outputs.source_dir }}
          EXCLUDE=third_party,qt6,boost,c++
          REPORTDIR=coverage_reports
          REPORTNAME=test_runner
          BUILDDIR=${{ steps.build.outputs.build_dir }}
          DO_GENHTML=0
          ${{ steps.build.outputs.install_dir}}/scripts/run_and_generate_coverage.sh
    - name: Test Python with coverage
      uses: ./.github/actions/python_test
      with:
        variant_name: coverage
        root_path: ${{ steps.build.outputs.install_dir }}
        pytest_command: python3 -m coverage run -m pytest
        run_cmd_prefix: >-
          BASEDIR=${{ steps.build.outputs.source_dir }}
          EXCLUDE=third_party,qt6,boost,c++
          REPORTDIR=coverage_reports
          REPORTNAME=pytest
          BUILDDIR=${{ steps.build.outputs.build_dir }}
          DO_GENHTML=0
          LD_LIBRARY_PATH=${{ env.qtlibpath }}
          ${{ steps.build.outputs.install_dir}}/scripts/run_and_generate_coverage.sh
    - name: Generate Pytest coverage report
      run: |
        python3 -m coverage xml --include=${{ steps.build.outputs.install_dir}}/**/* -i -o coverage_reports/pytest.xml
    - name: Test QML with coverage
      uses: ./.github/actions/qml_test
      with:
        variant_name: coverage
        root_path: ${{ steps.build.outputs.install_dir }}
        python_command: python3 -m coverage run
        run_cmd_prefix: >-
          BASEDIR=${{ steps.build.outputs.source_dir }}
          EXCLUDE=third_party,qt6,boost,c++
          REPORTDIR=coverage_reports
          REPORTNAME=qmltest
          BUILDDIR=${{ steps.build.outputs.build_dir }}
          DO_GENHTML=0
          LD_LIBRARY_PATH=${{ env.qtlibpath }}
          ${{ steps.build.outputs.install_dir}}/scripts/run_and_generate_coverage.sh
    - name: Generate Pytest coverage report
      run: |
        python3 -m coverage xml --include=${{ steps.build.outputs.install_dir}}/**/* -i -o coverage_reports/qml.xml
    - name: Upload back-end coverage to CodeCov
      if: ${{ !env.ACT }}
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        flags: back-end
        files: coverage_reports/test_runner.info
        verbose: true
    - name: Upload Pytest coverage to CodeCov
      if: ${{ !env.ACT }}
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        flags: pytest
        files: coverage_reports/pytest.info,coverage_reports/pytest.xml
        verbose: true
    - name: Upload QML test coverage to CodeCov
      if: ${{ !env.ACT }}
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        flags: qml
        files: coverage_reports/qmltest.info,coverage_reports/qml.xml
        verbose: true
