name: Build Qt

on: workflow_dispatch

permissions:
  contents: read
  checks: write

jobs:
  build_qt:
    strategy:
      fail-fast: false
      matrix:
        os:
          - name: manylinux_2_28
            base_os: ubuntu-latest
            container_image: quay.io/pypa/manylinux_2_28_x86_64
          - name: windows
            base_os: windows-2022
            container_image: null
          - name: macos
            base_os: macos-12
            container_image: null
    runs-on: ${{ matrix.os.base_os }}
    container:
      image: ${{ matrix.os.container_image }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Set variables
      shell: bash
      run: |
        echo "source_url=https://download.qt.io/archive/qt/6.5/6.5.3/single/qt-everywhere-src-6.5.3.tar.xz" | tee -a $GITHUB_ENV
        echo "source_filename=qt-everywhere-src-6.5.3.tar.xz" | tee -a $GITHUB_ENV
        echo "extracted_folder=qt-everywhere-src-6.5.3" | tee -a $GITHUB_ENV
        echo "cache_key=https://download.qt.io/archive/qt/6.5/6.5.3/single/qt-everywhere-src-6.5.3.tar.xz-1" | tee -a $GITHUB_ENV

    - name: Prepare Windows
      if: ${{ matrix.os.name == 'windows' }}
      shell: bash
      run: |
        curl -L https://github.com/ninja-build/ninja/releases/download/v1.11.1/ninja-win.zip --output ninja-win.zip
        unzip ninja-win.zip
        cp ninja.exe /usr/bin
        echo "C:\\mingw64\\usr\\bin" | tee -a $GITHUB_PATH
        rm -rf --no-preserve-root "/c/Program Files/Git"
    
    - name: Prepare Windows 2
      if: ${{ matrix.os.name == 'windows' }}
      shell: bash
      run: |
        echo $PATH
    
    - name: Prepare manylinux
      if: ${{ matrix.os.name == 'manylinux_2_28' }}
      shell: bash
      run: |
        dnf -y install ninja-build
    
    - name: Prepare MacOS
      if: ${{ matrix.os.name == 'macos' }}
      shell: bash
      run: |
        brew install ninja
    
    - name: Cache Qt sources
      id: cache-qt-src
      uses: actions/cache@v3
      with:
        path: qt
        key: ${{ env.cache_key }}

    - name: Download Qt sources
      if: ${{ steps.cache-qt-src.outputs.cache-hit != 'true' }}
      shell: bash
      run: |
        curl -L ${{ env.source_url }} --output ${{ env.source_filename }}
        tar -xf ${{ env.source_filename }}
        mv ${{ env.extracted_folder }} qt
    
    - uses: actions/cache/save@v3
      with:
        path: qt
        key: ${{ env.cache_key }}

    - name: Configure Qt
      shell: bash
      run: |
        mkdir qt-build
        cd qt-build
        ../qt/configure -release -submodules qtdeclarative,qtshadertools -cmake-generator Ninja

    - name: Build Qt
      shell: bash
      run: |
        cmake --build qt-build --parallel 4
        DESTDIR=qt-installed cmake --install qt-build

    - name: Compress Qt for caching
      shell: bash
      run: |
         cd qt-installed
         tar czvf ../qt.tar.gz *
    
    - name: Upload Qt
      uses: actions/upload-artifact@v3
      with:
        name: qt-${{ matrix.os.name }}
        path: qt.tar.gz
    
    - name: Setup tmate session
      if: ${{ failure() && matrix.os.name == 'windows' }}
      uses: mxschmitt/action-tmate@v3
