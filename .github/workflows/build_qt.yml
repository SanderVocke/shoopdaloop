name: Package Qt For CI

on: workflow_dispatch

permissions:
  contents: read
  checks: write

jobs:
  get_and_patch_qt_windows:
    runs-on: windows-2022
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Install Qt from AQT
      uses: jurplel/install-qt-action@v3
      with:
        version: "6.5.3"
        host: windows
        target: desktop
        arch: win64_msvc2019_64
        dir: qt
        archives: icu qtbase qtdeclarative qtsvg qtimageformats qtquickcontrols qtquickcontrols2 qtsvg
    - name: Env settings
      shell: bash
      run: |
        echo "qt_version=6.5.3" | tee -a $GITHUB_ENV
        echo "qt_major_version=6" | tee -a $GITHUB_ENV
        echo "qt_minor_patch_versions=5.3" | tee -a $GITHUB_ENV
    - name: Install PySide6 from PyPi
      shell: bash
      run: |
        python -m pip install --no-deps --target=pyside6 pyside6-essentials==${{ env.qt_version }}
        echo "pyside_qt=$(pwd)/pyside6/PySide6" | tee -a $GITHUB_ENV
        echo "full_qt=$(pwd)/qt/Qt/6.5.3/msvc2019_64" | tee -a $GITHUB_ENV
    - name: Merge Qt installations
      shell: bash
      run: |
        cd ${{ env.full_qt }}
        for f in ${{ env.pyside_qt }}/Qt6*.dll; do
          if [ -f ./bin/$(basename $f) ]; then
            # overwrite the dll by the PySide-built one if PySide has it.
            echo "Replacing $(basename $f) by PySide version and copying to $(basename $f .dll)d.dll."
            cp $f ./bin/$(basename $f)
            cp $f ./bin/$(basename $f .dll)d.dll
          fi
        done
        for f in ${{ env.full_qt }}/bin/Qt6*.dll; do
          if [ -f ${{ env.pyside_qt }}/$(basename $f) -o -f ${{ env.pyside_qt }}/$(basename $f d.dll).dll ]; then
            echo "$(basename $f) was patched."
          else
            # remove from our installation if PySide doesn't have it
            echo "Removing $(basename $f .dll) because not present in PySide."
            rm $f
            rm ./lib/$(basename $f .dll).lib || true
            rm -r ./lib/cmake/$(basename $f .dll) || true
          fi
        done
    - name: Sanity check that Qt CMake helpers can be found
      shell: bash
      run: |
        mkdir qt_test
        cd qt_test
        cmake -DQt6_DIR=${{ env.full_qt }}/lib/cmake/Qt6 ../src/qt_test_project
        echo "Qt with PySide DLLs was found by CMake at: $(cat CMakeCache.txt | grep Qt6_DIR)"
        echo "Total installation size: $(du -sh ${{ env.full_qt }})"
    - name: Compress
      shell: bash
      run: tar -czf qt.tar.gz qt
    - name: Upload Qt
      uses: actions/upload-artifact@v3
      with:
        name: qt-windows
        path: qt.tar.gz

  build_and_patch_qt_unixlike:
    strategy:
      fail-fast: false
      matrix:
        os:
          - name: manylinux_2_28
            base_os: ubuntu-latest
            container_image: quay.io/pypa/manylinux_2_28_x86_64
            build_shell: bash
            pip: python -m pip
          - name: macos
            base_os: macos-12
            container_image: null
            build_shell: bash
            pip: python3 -m pip
    runs-on: ${{ matrix.os.base_os }}
    container:
      image: ${{ matrix.os.container_image }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Set variables
      shell: bash
      run: |
        echo "source_url=https://download.qt.io/archive/qt/6.5/6.5.3/single/qt-everywhere-src-6.5.3.tar.xz" | tee -a $GITHUB_ENV
        echo "source_filename=qt-everywhere-src-6.5.3.tar.xz" | tee -a $GITHUB_ENV
        echo "extracted_folder=qt-everywhere-src-6.5.3" | tee -a $GITHUB_ENV
        echo "cache_key=https://download.qt.io/archive/qt/6.5/6.5.3/single/qt-everywhere-src-6.5.3.tar.xz-1" | tee -a $GITHUB_ENV
        echo "qt_version=6.5.3" | tee -a $GITHUB_ENV
        echo "qt_major_version=6" | tee -a $GITHUB_ENV
        echo "qt_minor_patch_versions=5.3" | tee -a $GITHUB_ENV
    
    - name: Prepare manylinux
      if: ${{ matrix.os.name == 'manylinux_2_28' }}
      shell: bash
      run: |
        dnf -y install ninja-build
    
    - name: Prepare MacOS
      if: ${{ matrix.os.name == 'macos' }}
      shell: bash
      run: |
        brew install ninja
    
    - name: Cache Qt sources
      id: cache-qt-src
      uses: actions/cache@v3
      with:
        path: qt
        key: ${{ env.cache_key }}

    - name: Download Qt sources
      if: ${{ steps.cache-qt-src.outputs.cache-hit != 'true' }}
      shell: bash
      run: |
        curl -L ${{ env.source_url }} --output ${{ env.source_filename }}
        tar -xf ${{ env.source_filename }}
        mv ${{ env.extracted_folder }} qt
    
    - uses: actions/cache/save@v3
      if: ${{ steps.cache-qt-src.outputs.cache-hit != 'true' }}
      with:
        path: qt
        key: ${{ env.cache_key }}

    - name: Configure Qt
      shell: bash
      run: |
        mkdir qt-build
        cd qt-build
        ../qt/configure -release -submodules qtdeclarative,qtshadertools -cmake-generator Ninja -nomake tools -nomake tests -nomake examples -no-pch

    - name: Build Qt
      shell: bash
      run: |
        cmake --build qt-build --parallel 4
        DESTDIR=qt-installed cmake --install qt-build
    
    - name: Install PySide6
      shell: bash
      run: |
        ${{ matrix.os.pip }} install --no-deps --target=pyside6 pyside6-essentials==${{ env.qt_version }}
        echo "pyside_qt=pyside6/PySide6/Qt" | tee -a $GITHUB_ENV

    - name: Copy files from built Qt into PySide6 Qt
      shell: bash
      run: |
        cp -r qt-installed/usr/local/Qt-${{ env.qt_version }}/include ${{ env.pyside_qt }}/include
        cp -r qt-installed/usr/local/Qt-${{ env.qt_version }}/lib/cmake ${{ env.pyside_qt }}/lib/cmake
        cp -r qt-installed/usr/local/Qt-${{ env.qt_version }}/lib/pkgconfig ${{ env.pyside_qt }}/lib/pkgconfig
        cp -r qt-installed/usr/local/Qt-${{ env.qt_version }}/mkspecs ${{ env.pyside_qt }}/mkspecs
        cp -r qt-installed/usr/local/Qt-${{ env.qt_version }}/metatypes/* ${{ env.pyside_qt }}/metatypes/
        cp -r qt-installed/usr/local/Qt-${{ env.qt_version }}/libexec/* ${{ env.pyside_qt }}/libexec/
        cp -r qt-installed/usr/local/Qt-${{ env.qt_version }}/bin ${{ env.pyside_qt }}/bin

        # PySide comes with libQt6*.so.6 only, make them into full libQt6*.so.6.5.3
        for f in ${{ env.pyside_qt }}/lib/*.so.${{ env.qt_major_version }}; do
          mv $f $f.${{ env.qt_minor_patch_versions }}
          ln -s $f.${{ env.qt_minor_patch_versions }} $f
        done
    
    - name: Sanity check that Qt CMake helpers can be found
      shell: bash
      run: |
        mkdir qt_test
        cd qt_test
        cmake -DQt6_DIR=${{ env.pyside_qt }}/lib/cmake/Qt6 ../src/qt_test_project
        echo "Patched PySide Qt was found by CMake at: $(cat CMakeCache.txt | grep Qt6_DIR)"

    - name: Compress Qt for caching
      shell: bash
      run: |
         cd ${{ env.pyside_qt }}
         tar czvf ../qt.tar.gz *
    
    - name: Upload Qt
      uses: actions/upload-artifact@v3
      with:
        name: qt-${{ matrix.os.name }}
        path: qt.tar.gz
