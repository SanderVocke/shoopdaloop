name: Test wheel

on:
  workflow_call:
    inputs:
      variant_name:
        required: true
        type: string
      container:
        required: false
        type: string
        default: 'sandervocke/shoopdaloop_ubuntu_kinetic_run_base:latest'
      artifact_name:
        required: true
        type: string
      run_cmd_prefix:
        required: false
        type: string
      test_backend:
        required: true
        type: boolean
      test_python:
        required: true
        type: boolean
      test_qml:
        required: true
        type: boolean
      test_runapp:
        required: true
        type: boolean
      upload_coverage:
        required: false
        type: boolean
        default: false

jobs:

  test_whl:
    runs-on: ubuntu-latest
    container:
      image: ${{ inputs.container }}
      options: --user root --workdir /
    
    steps:
    - name: Retrieve wheel
      uses: actions/download-artifact@v3
      with:
        name: ${{ inputs.artifact_name }}
        path: ~/wheel
    
    - name: Install wheel
      run: |
        ${{ inputs.run_cmd_prefix }} ASAN_OPTIONS=detect_leaks=0 python3 -m pip install ~/wheel/*.whl
        echo "PKG_DIR=$(${{ inputs.run_cmd_prefix }} ASAN_OPTIONS=detect_leaks=0 shoopdaloop --info | grep "Installed" | sed -r 's/Installed @ //g')" >> $GITHUB_ENV
    
    - name: Install Python coverage
      if: ${{ inputs.upload_coverage }}
      run: |
        python3 -m pip install coverage
    
    - name: Report package install dir
      run: |
        echo "Package dir: $PKG_DIR"
    
    - name: Prepare coverage back-end command prefix
      if: ${{ inputs.upload_coverage }}
      run: |
        echo "COVERAGE_PREFIX=BASEDIR=$(pwd) EXCLUDE=third_party,nlohmann,qt6,lv2,boost,c++ REPORTDIR=${{ github.workspace }}/coverage_reports BUILDDIR=$(pwd) ORI_BUILD_DIR=$(cat ${{ env.PKG_DIR }}/cmake_build_dir.txt) TARGET_BUILD_DIR=$(realpath ${{ env.PKG_DIR }}/coverage/build/cp*) ${{ env.PKG_DIR }}/scripts/run_and_generate_coverage.sh" >> $GITHUB_ENV
    
    - name: Prepare coverage python command prefix
      if: ${{ inputs.upload_coverage }}
      run: |
        echo "PYTHON_EXTRA_ARGS=-m coverage run" >> $GITHUB_ENV
    
    - name: Back-end tests
      if: ${{ inputs.test_backend }} && !${{ inputs.upload_coverage }} (success() || failure())
      run: |
        mkdir -p reports
        REPORTNAME=test_runner ${{ env.COVERAGE_PREFIX }} ${{ inputs.run_cmd_prefix }} ${{ env.PKG_DIR }}/test_runner --reporter junit --out reports/backend_junit_results.xml
        echo "Back-end test results file: $(ls -la reports/backend_junit_results.xml)"

    - name: Publish Back-end Test Report
      uses: mikepenz/action-junit-report@v3
      if: ${{ inputs.test_backend }} && (success() || failure())
      with:
        report_paths: 'reports/backend_junit_results.xml'
        detailed_summary: true
        include_passed: true
        check_name: 'backend test (${{ inputs.variant_name }})'

    - name: Python tests
      if: ${{ inputs.test_python }} && (success() || failure())
      run: |
        mkdir -p reports
        REPORTNAME=pytest ${{ env.COVERAGE_PREFIX }} ${{ inputs.run_cmd_prefix }} ASAN_OPTIONS=detect_leaks=0 python3 ${{ env.PYTHON_EXTRA_ARGS }} -m pytest ${{ env.PKG_DIR }} --junit-xml=reports/python_junit_results.xml
        echo "Python test results file: $(ls -la reports/python_junit_results.xml)"
    
    - name: Python tests coverage
      if: ${{ inputs.upload_coverage }}
      run: |
        python3 -m coverage xml --source=${{ env.PKG_DIR }} -i -o coverage_reports/python_pytest_coverage.xml
    
    - name: Publish Python Test Report
      uses: mikepenz/action-junit-report@v3
      if: ${{ inputs.test_python }} && (success() || failure())
      with:
        report_paths: 'reports/python_junit_results.xml'
        detailed_summary: true
        include_passed: true
        check_name: 'python test (${{ inputs.variant_name }})'

    - name: QML tests
      if: false
      #${{ inputs.test_qml }} && (success() || failure())
      run: |
        mkdir -p reports
        REPORTNAME=qml_tests ${{ env.COVERAGE_PREFIX }} ${{ inputs.run_cmd_prefix }} ASAN_OPTIONS=detect_leaks=0,new_delete_type_mismatch=0 QT_QPA_PLATFORM=vnc LD_LIBRARY_PATH=$(dirname $(find ${{ env.PKG_DIR }}/.. -name libQt6Core.so.6)) python3 ${{ env.PYTHON_EXTRA_ARGS_TODO }} ${{ env.PKG_DIR }}/run_qml_tests.py -o reports/qml_junit_results.xml,junitxml
        echo "QML test results file: $(ls -la reports/qml_junit_results.xml)"
    
    - name: Python QML tests coverage
      if: false
      #${{ inputs.upload_coverage }}
      run: |
        python3 -m coverage xml -i -o coverage_reports/python_qmltests_coverage.xml
    
    - name: Publish QML Test Report
      uses: mikepenz/action-junit-report@v3
      if: false
      #${{ inputs.test_qml }} && (success() || failure())
      with:
        report_paths: 'reports/qml_junit_results.xml'
        detailed_summary: true
        include_passed: true
        check_name: 'qml test (${{ inputs.variant_name}})'

    - name: App runs and closes gracefully
      if: ${{ inputs.test_runapp }}
      run: |
        ${{ inputs.run_cmd_prefix }} QT_QPA_PLATFORM=vnc EXPECT_STAY_OPEN=1 WAIT_MS_BEFORE_CLOSE=5000 N_ITERATIONS=10 WAIT_MS_BEFORE_KILL=10000 ${{ env.PKG_DIR }}/scripts/test_run_app.sh shoopdaloop -b dummy

    - name: Upload coverage reports to Codecov
      if: ${{ inputs.upload_coverage }} && (success() || failure())
      uses: codecov/codecov-action@v3
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
    