# Create a package/installer using fpm or InnoSetup

inputs:
  name:
    description: "Name for the build"
  release_build:
    description: "if true, does a release build. Otherwise, a debug build."
    default: 'false'
  cmake_opts:
    description: "CMake options"
  prepare_kind:
    description: "Which prepare function to call (see prepare action)"
  python:
    description: "Python command to use"
  platform:
    description: "platform descriptor"
  package_kind:
    description: "Kind of package to build"
  second_package_kind:
    description: "Kind of package to build (additional)"
    default: null
  coverage:
    description: "Whether to run coverage"
  upload_artifacts:
    description: "Whether to upload artifacts"
    default: 'true'
  upload_release_assets:
    default: 'false'
    description: "Whether to attempt uploading assets to a tag release."

runs:
  using: "composite"
  steps:
  - name: Store cwd
    if: always()
    shell: wrap-shell {0}
    id: cwd
    run: |
        echo "cwd=$(pwd)" | tee -a $GITHUB_OUTPUT
  - shell: wrap-shell {0}
    if: always()
    run: |
      printf "\n\n\n\n\n\n"
      echo "=========================================="
      echo "Preparing environment"
      echo "=========================================="
      printf "\n\n\n\n\n\n"
  - name: Download upload URL for release assets
    if: always() && inputs.upload_release_assets == 'true'
    uses: actions/download-artifact@v4
    with:
      name: release_upload_assets_url
      path: release_upload_assets_url
  - name: Set upload URL for release assets
    if: always() && inputs.upload_release_assets == 'true'
    shell: bash
    run: echo "release_upload_assets_url=$(cat release_upload_assets_url/release_upload_assets_url.txt)" | tee -a $GITHUB_ENV
  - name: Set Cargo build flags (release)
    if: always() && inputs.release_build == 'true'
    shell: wrap-shell {0}
    run: |
      echo "CARGO_BUILD_FLAGS=--release" | tee -a $GITHUB_ENV
      echo "CARGO_ARTIFACTS_DIR=target/release" | tee -a $GITHUB_ENV
  - name: Set Cargo build flags (debug)
    if: always() && inputs.release_build != 'true'
    shell: wrap-shell {0}
    run: |
      echo "CARGO_BUILD_FLAGS=" | tee -a $GITHUB_ENV
      echo "CARGO_ARTIFACTS_DIR=target/debug" | tee -a $GITHUB_ENV
  - name: More env settings
    shell: wrap-shell {0}
    if: always()
    run: |
      echo "PYTHON=${{ inputs.python }}" | tee -a $GITHUB_ENV
      echo "PIP=${{ inputs.python }} -m pip" | tee -a $GITHUB_ENV
      echo "PYTEST=${{ inputs.python }} -m pytest" | tee -a $GITHUB_ENV
      echo "PLATFORM=${{ inputs.platform }}" | tee -a $GITHUB_ENV
  - uses: ./.github/actions/checkpoint
    if: always()
  - name: Install Qoverage
    if: always() && inputs.coverage
    uses: ./.github/actions/install_qoverage
  - name: Prepare
    if: always()
    id: prepare
    uses: ./.github/actions/prepare_build
    with:
      variant: ${{ inputs.prepare_kind }}
  - uses: ./.github/actions/checkpoint
    if: always()
  - shell: wrap-shell {0}
    if: always()
    run: |
      printf "\n\n\n\n\n\n"
      echo "=========================================="
      echo "Building"
      echo "=========================================="
      printf "\n\n\n\n\n\n"
  - name: Build with Cargo
    if: always()
    id: build_base
    uses: ./.github/actions/build_base
  - name: Qoverage - Instrument QML files
    if: always() && inputs.coverage
    uses: ./.github/actions/qoverage_instrument
    with:
      package_path: .
  - uses: ./.github/actions/checkpoint
    if: always()
  - shell: wrap-shell {0}
    if: always() && inputs.package_kind
    run: |
      printf "\n\n\n\n\n\n"
      echo "=========================================="
      echo "Build package: ${{ inputs.package_kind }}"
      echo "=========================================="
      printf "\n\n\n\n\n\n"
  - name: Build package
    id: package
    if: always() && inputs.package_kind
    uses: ./.github/actions/build_package
    with:
      package_kind: ${{ inputs.package_kind }}
      upload_release_assets: ${{ inputs.upload_release_assets }}
      release_upload_assets_url: ${{ env.release_upload_assets_url }}
  - uses: ./.github/actions/checkpoint
    if: always()
  - shell: wrap-shell {0}
    if: always() && inputs.second_package_kind
    run: |
      printf "\n\n\n\n\n\n"
      echo "=========================================="
      echo "Build package: ${{ inputs.second_package_kind }}"
      echo "=========================================="
      printf "\n\n\n\n\n\n"
  - name: Build second package
    id: package
    if: always() && inputs.second_package_kind
    uses: ./.github/actions/build_package
    with:
      package_kind: ${{ inputs.second_package_kind }}
      upload_release_assets: ${{ inputs.upload_release_assets }}
      release_upload_assets_url: ${{ env.release_upload_assets_url }}
  - uses: ./.github/actions/checkpoint
    if: always()
  - shell: wrap-shell {0}
    if: always()
    run: |
      printf "\n\n\n\n\n\n"
      echo "=========================================="
      echo "Upload artifacts"
      echo "=========================================="
      printf "\n\n\n\n\n\n"
  - name: Upload debug info
    if: always() && inputs.upload_artifacts == 'true'
    uses: actions/upload-artifact@v4
    with:
      name: breakpad_debuginfo_${{ inputs.name }}
      path: debuginfo
  - name: Save build info for coverage analyis
    shell: wrap-shell {0}
    if: always() && inputs.coverage
    run: |
      echo "$(realpath build/cp*/)" | tee ori_build_dir.txt
  - name: Upload info context for coverage analysis
    if: always() && inputs.coverage && inputs.upload_artifacts == 'true'
    uses: actions/upload-artifact@v4
    with:
      name: coverage_context
      path: |
        ./**/*.gcno
        ori_build_dir.txt
  - name: Upload .PDB files
    if: always() && inputs.prepare_kind == 'windows' && inputs.upload_artifacts == 'true'
    uses: actions/upload-artifact@v4
    with:
      name: pdb_${{ inputs.name }}
      path: |
        ./**/*.pdb
        ./**/*.PDB
  - uses: ./.github/actions/checkpoint
    if: always()
  - shell: wrap-shell {0}
    if: always()
    run: |
      printf "\n\n\n\n\n\n"
      echo "=========================================="
      echo "Upload release assets"
      echo "=========================================="
      printf "\n\n\n\n\n\n"
  - name: Compress debug info
    if: always() && env.release_upload_assets_url
    id: compress_debug_info
    shell: bash
    run: |
      tar -czf ${{ inputs.name }}_breakpad_debug_info.tar.gz debuginfo
      echo "path=${{ inputs.name }}_breakpad_debug_info.tar.gz" | tee -a $GITHUB_OUTPUT
  - name: Upload Breakpad debug info
    if: always() && env.release_upload_assets_url
    uses: shogo82148/actions-upload-release-asset@v1
    with:
      upload_url: ${{ env.release_upload_assets_url }}
      asset_path: ${{ steps.compress_debug_info.outputs.path }}
  # - name: Compress portable folder
  #   if: always() && env.release_upload_assets_url && (inputs.pyinstaller || inputs.appbundle)
  #   id: compress_portable_folder
  #   shell: bash
  #   run: |
  #     tar -czf portable_folder_${{ inputs.name }}.tar.gz ${{ steps.pyinstaller.outputs.distribution }}
  #     echo "path=portable_folder_${{ inputs.name }}.tar.gz" | tee -a $GITHUB_OUTPUT
  # - name: Upload portable folder
  #   if: always() && env.release_upload_assets_url && (inputs.pyinstaller || inputs.appbundle)
  #   uses: shogo82148/actions-upload-release-asset@v1
  #   with:
  #     upload_url: ${{ env.release_upload_assets_url }}
  #     asset_path: ${{ steps.compress_portable_folder.outputs.path }}
  - name: Compress PDB files
    if: always() && env.release_upload_assets_url && inputs.prepare_kind == 'windows'
    id: compress_pdb
    shell: bash
    run: |
      find . -name "*.pdb" -o -name "*.PDB" | tar -czf ${{ inputs.name }}_pdb_files.tar.gz -T -
      echo "path=${{ inputs.name }}_pdb_files.tar.gz" | tee -a $GITHUB_OUTPUT
  - name: Upload PDB files
    if: always() && env.release_upload_assets_url && inputs.prepare_kind == 'windows'
    uses: shogo82148/actions-upload-release-asset@v1
    with:
      upload_url: ${{ env.release_upload_assets_url }}
      asset_path: ${{ steps.compress_pdb.outputs.path }}