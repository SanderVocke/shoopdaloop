# Create a package/installer using fpm or InnoSetup

inputs:
  cargo_build_path:
    description: "path where cargo built its executables"
  package_kind:
    description: "innosetup / linuxes / pyinstaller"
  upload_name:
    description: "if set, will upload the package(s) with the given name (prefix)"
  upload_release_assets:
    description: "Whether to upload release assets"
    default: 'false'
  release_upload_assets_url:
    description: "Where to upload release assets"
    default: ''

outputs:
  output:
    description: "Built artifact(s)"
    value: ${{ steps.find_output.outputs.output }}
  

runs:
  using: "composite"
  steps:

  # Versions
  - name: Determine version
    shell: wrap-shell {0}
    run: |
      set -x
      # TODO
      VERSION=0.0.0
      # VERSION=$(cat $(find ${{ inputs.input_path }} -name version.txt -print -quit) | tr -d ' ')
      FULLGITVERSION=${{ github.sha }}
      GITVERSION=$(echo ${FULLGITVERSION:0:8} | tr -d ' ')

      echo "version=$VERSION" | tee -a $GITHUB_ENV
      echo "gitversion=$GITVERSION" | tee -a $GITHUB_ENV

  # AppImage (Linux)
  - name: Build AppImage
    if: ${{ inputs.package_kind == 'appimage' }}
    id: build_appimage
    shell: wrap-shell {0}
    run: |
      ${{ inputs.cargo_build_path }}/build_appdir ${{ inputs.cargo_build_path }}/shoopdaloop appdir
      wget https://github.com/AppImage/appimagetool/releases/download/continuous/appimagetool-x86_64.AppImage
      chmod +x appimagetool-x86_64.AppImage
      APPIMAGE_NAME=shoopdaloop-${{ env.version }}.${{ env.gitversion }}.$(uname -m).AppImage
      ./appimagetool-x86_64.AppImage appdir $APPIMAGE_NAME
      echo "pkg=$APPIMAGE_NAME" | tee -a $GITHUB_ENV
  - uses: actions/upload-artifact@v4
    with:
      name: ${{ inputs.upload_name }}
      path: ${{ env.pkg }}

  # Linux packages
  - name: Build .deb + pacman + .rpm
    if: ${{ inputs.package_kind == 'linuxes' }}
    shell: wrap-shell {0}
    run: |
      mkdir -p linux_packages
      WORKDIR=$(pwd)
      ROOTSRC=$WORKDIR/distribution/linux/root
      cd linux_packages

      # Debian
      fpm \
        -s dir \
        -t deb \
        --name shoopdaloop \
        --version ${{ env.version }}+${{ env.gitversion }} \
        --license gpl3 \
        --url "https://sandervocke.github.io/shoopdaloop/" \
        --maintainer "Sander Vocke <sandervocke@gmail.com>" \
        ${{ inputs.input_path }}=/opt \
        $ROOTSRC/usr=/
      echo "deb_package=linux_packages/$(ls shoopdaloop*.deb)" | tee -a $GITHUB_ENV

      # RPM
      fpm \
        -s dir \
        -t rpm \
        --name shoopdaloop \
        --version ${{ env.version }}^${{ env.gitversion }} \
        --rpm-rpmbuild-define  "_build_id_links none" \
        --license gpl3 \
        --url "https://sandervocke.github.io/shoopdaloop/" \
        --maintainer "Sander Vocke <sandervocke@gmail.com>" \
        ${{ inputs.input_path }}=/opt \
        $ROOTSRC/usr=/
      echo "rpm_package=linux_packages/$(ls shoopdaloop*.rpm)" | tee -a $GITHUB_ENV

      # Pacman
      fpm \
        -s dir \
        -t pacman \
        --pacman-compression gz \
        --name shoopdaloop \
        --version ${{ env.version }}.r0.${{ env.gitversion }} \
        --depends libxcrypt-compat \
        --license gpl3 \
        --url "https://sandervocke.github.io/shoopdaloop/" \
        --maintainer "Sander Vocke <sandervocke@gmail.com>" \
        ${{ inputs.input_path }}=/opt \
        $ROOTSRC/usr=/
      echo "pacman_package=linux_packages/$(ls shoopdaloop*.pkg*.tar*)" | tee -a $GITHUB_ENV

      echo "pkg=linux_packages" | tee -a $GITHUB_ENV
  - name: Upload RPM package
    if: ${{ inputs.package_kind == 'linuxes' && inputs.upload_name }}
    uses: actions/upload-artifact@v4
    with:
      name: ${{ inputs.upload_name }}_rpm
      path: ${{ env.rpm_package }}
  - name: Upload deb package
    if: ${{ inputs.package_kind == 'linuxes' && inputs.upload_name }}
    uses: actions/upload-artifact@v4
    with:
      name: ${{ inputs.upload_name }}_deb
      path: ${{ env.deb_package }}
  - name: Upload pacman package
    if: ${{ inputs.package_kind == 'linuxes' && inputs.upload_name }}
    uses: actions/upload-artifact@v4
    with:
      name: ${{ inputs.upload_name }}_pacman
      path: ${{ env.pacman_package }}
  - name: Upload RPM package (release)
    if: ${{ inputs.package_kind == 'linuxes' && inputs.upload_release_assets == 'true' }}
    uses: shogo82148/actions-upload-release-asset@v1
    with:
      upload_url: ${{ inputs.release_upload_assets_url }}
      asset_path: ${{ env.rpm_package }}
  - name: Upload deb package (release)
    if: ${{ inputs.package_kind == 'linuxes' && inputs.upload_release_assets == 'true' }}
    uses: shogo82148/actions-upload-release-asset@v1
    with:
      upload_url: ${{ inputs.release_upload_assets_url }}
      asset_path: ${{ env.deb_package }}
  - name: Upload pacman package (release)
    if: ${{ inputs.package_kind == 'linuxes' && inputs.upload_release_assets == 'true' }}
    uses: shogo82148/actions-upload-release-asset@v1
    with:
      upload_url: ${{ inputs.release_upload_assets_url }}
      asset_path: ${{ env.pacman_package }}

  # Windows installer (InnoSetup)
  - name: Compile .ISS to .EXE Installer
    uses: Minionguyjpro/Inno-Setup-Action@v1.2.2
    if: ${{ inputs.package_kind == 'innosetup' }}  
    with:
      path: distribution/innosetup/shoopdaloop.iss
      options: /O+ /DMyAppVersion="${{ env.version }}.${{ env.gitversion }}"
  - name: Move .EXE installer
    if: ${{ inputs.package_kind == 'innosetup' }}   
    shell: wrap-shell {0}
    run: |
      ls distribution/innosetup
      INSTALLER=$(find distribution/innosetup -name "ShoopDaLoop-*.exe")
      echo "pkg=$INSTALLER" | tee -a $GITHUB_ENV
  - name: Upload .exe installer
    if: ${{ inputs.package_kind == 'innosetup' && inputs.upload_name }}
    uses: actions/upload-artifact@v4
    with:
      name: ${{ inputs.upload_name }}
      path: ${{ env.pkg }}
  - name: Upload .exe installer (release)
    if: ${{ inputs.package_kind == 'innosetup' && inputs.upload_release_assets == 'true' }}
    uses: shogo82148/actions-upload-release-asset@v1
    with:
      upload_url: ${{ inputs.release_upload_assets_url }}
      asset_path: ${{ env.pkg }}

  # MacOS .dmg
  - name: Build MacOSX .dmg
    if: ${{ inputs.package_kind == 'dmg' }}
    shell: wrap-shell {0}
    run: |
      DMGFILE=shoopdaloop-${{ env.version }}.${{ env.gitversion }}.$(uname -m).dmg
      create-dmg \
        --volname "ShoopDaLoop" \
        --volicon "src/shoopdaloop/resources/iconset/icon.icns" \
        --window-pos 200 120 \
        --window-size 800 400 \
        --icon-size 100 \
        --icon "shoopdaloop.app" 200 190 \
        --hide-extension "shoopdaloop.app" \
        --app-drop-link 600 185 \
        $DMGFILE \
        ${{ inputs.input_path }}

      echo "pkg=$DMGFILE" | tee -a $GITHUB_ENV
  - name: Upload .dmg package
    if: ${{ inputs.package_kind == 'dmg' && inputs.upload_name }}
    uses: actions/upload-artifact@v4
    with:
      name: ${{ inputs.upload_name }}
      path: ${{ env.pkg }}
  - name: Upload .dmg package (release)
    if: ${{ inputs.package_kind == 'dmg' && inputs.upload_release_assets == 'true' }}
    uses: shogo82148/actions-upload-release-asset@v1
    with:
      upload_url: ${{ inputs.release_upload_assets_url }}
      asset_path: ${{ env.pkg }}

  - name: Find output
    id: find_output
    shell: wrap-shell {0}
    run: |
      echo "output=${{ env.pkg }}" | tee -a $GITHUB_OUTPUT
      