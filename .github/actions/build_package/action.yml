# Create a package/installer using fpm or InnoSetup

inputs:
  package_kind:
    description: "kind of package to build"
  upload_release_assets:
    description: "Whether to upload release assets"
    default: 'false'
  release_upload_assets_url:
    description: "Where to upload release assets"
    default: ''

outputs:
  output:
    description: "Built artifact(s)"
    value: ${{ steps.find_output.outputs.output }}


runs:
  using: "composite"
  steps:

  # Versions
  - name: Determine version, env settings
    if: always()
    shell: wrap-shell {0}
    run: |
      set -x
      # TODO
      VERSION=0.0.0
      VERSION=$(cargo pkgid -p shoopdaloop | sed -r 's/.*#//g')
      FULLGITVERSION=${{ github.sha }}
      GITVERSION=$(echo ${FULLGITVERSION:0:8} | tr -d ' ')

      echo "SHOOP_VERSION=$VERSION" | tee -a $GITHUB_ENV
      echo "SHOOP_GIT_REV=$GITVERSION" | tee -a $GITHUB_ENV
      echo "BUILT_PACKAGE=" | tee -a $GITHUB_ENV
      echo "BUILT_RELEASE_ARTIFACT=" | tee -a $GITHUB_ENV

  # Portable folder
  - name: Build portable folder
    if: always() && inputs.package_kind == 'portable_folder'
    id: build_portable_folder
    shell: wrap-shell {0}
    run: |
      export QT_QPA_PLATFORM=offscreen
      PORTABLE_DIR=$(pwd)/shoopdaloop.${{ env.SHOOP_GIT_REV }}.${{ env.ARTIFACT_VARIANT }}.portable
      RELEASE_PORTABLE_DIR=$(pwd)/shoopdaloop-${{ env.SHOOP_VERSION }}.${{ env.ARTIFACT_VARIANT }}.portable
      echo "PORTABLE_DIR=$PORTABLE_DIR" | tee -a $GITHUB_ENV
      ${CARGO_ARTIFACTS_DIR}/package build-portable-folder -o $PORTABLE_DIR --include-tests ${CARGO_BUILD_FLAGS}
      cp -r $PORTABLE_DIR $RELEASE_PORTABLE_DIR
      COMPRESSED_PORTABLE_DIR=$(${{ env.COMPRESS_PORTABLE_FOLDER }} ${PORTABLE_DIR})
      COMPRESSED_RELEASE_PORTABLE_DIR=$(${{ env.COMPRESS_PORTABLE_FOLDER }} ${RELEASE_PORTABLE_DIR})
      echo "BUILT_PACKAGE=$COMPRESSED_PORTABLE_DIR" | tee -a $GITHUB_ENV
      echo "BUILT_PACKAGE_NAME=$(basename $COMPRESSED_PORTABLE_DIR)" | tee -a $GITHUB_ENV
      echo "BUILT_RELEASE_ARTIFACT=$COMPRESSED_RELEASE_PORTABLE_DIR" | tee -a $GITHUB_ENV
  - uses: actions/upload-artifact@v4
    if: always() && inputs.package_kind == 'portable_folder'
    with:
      name: ${{ env.BUILT_PACKAGE_NAME }}
      path: ${{ env.BUILT_PACKAGE }}
  - name: Upload AppDir (release)
    if: always() && inputs.package_kind == 'portable_folder' && inputs.upload_release_assets == 'true'
    uses: shogo82148/actions-upload-release-asset@v1
    with:
      upload_url: ${{ inputs.release_upload_assets_url }}
      asset_path: ${{ env.BUILT_RELEASE_ARTIFACT }}

  # AppImage (Linux) (Requires AppDir to already be built)
  - name: Build AppImage
    if: always() && inputs.package_kind == 'appimage'
    id: build_appimage
    shell: wrap-shell {0}
    run: |
      export QT_QPA_PLATFORM=offscreen
      wget https://github.com/AppImage/appimagetool/releases/download/continuous/appimagetool-x86_64.AppImage
      chmod +x appimagetool-x86_64.AppImage
      printf "#!/bin/sh\n\n./appimagetool-x86_64.AppImage --appimage-extract-and-run \$@\n" > appimagetool.sh
      chmod a+x appimagetool.sh
      APPIMAGE_NAME=shoopdaloop.${{ env.SHOOP_GIT_REV }}.$(uname -m).AppImage
      RELEASE_APPIMAGE_NAME=shoopdaloop-${{ env.SHOOP_VERSION }}.$(uname -m).AppImage
      ${CARGO_ARTIFACTS_DIR}/package build-app-image --appimagetool $(pwd)/appimagetool.sh -o $APPIMAGE_NAME --appdir ${{ env.PORTABLE_DIR }} --strip
      cp $APPIMAGE_NAME $RELEASE_APPIMAGE_NAME
      echo "BUILT_PACKAGE=$APPIMAGE_NAME" | tee -a $GITHUB_ENV
      echo "BUILT_RELEASE_ARTIFACT=$RELEASE_APPIMAGE_NAME" | tee -a $GITHUB_ENV
  - uses: actions/upload-artifact@v4
    if: always() && inputs.package_kind == 'appimage'
    with:
      name: ${{ env.BUILT_PACKAGE }}
      path: ${{ env.BUILT_PACKAGE }}
  - name: Upload AppImage (release)
    if: always() && inputs.package_kind == 'appimage' && inputs.upload_release_assets == 'true'
    uses: shogo82148/actions-upload-release-asset@v1
    with:
      upload_url: ${{ inputs.release_upload_assets_url }}
      asset_path: ${{ env.BUILT_RELEASE_ARTIFACT }}

  # Windows installer (InnoSetup)
  - name: Compile .ISS to .EXE Installer
    uses: Minionguyjpro/Inno-Setup-Action@v1.2.2
    if: always() && inputs.package_kind == 'innosetup'
    with:
      path: distribution/innosetup/shoopdaloop.iss
      options: /O+ /DMyAppVersion="${{ env.SHOOP_VERSION }}"
  - name: Move .EXE installer
    if: always() && inputs.package_kind == 'innosetup'
    shell: wrap-shell {0}
    run: |
      ls distribution/innosetup
      RELEASE_INSTALLER=$(find distribution/innosetup -name "ShoopDaLoop-*.exe")
      GIT_REV_INSTALLER=ShoopDaLoop-$SHOOP_GIT_REV.exe
      cp $RELEASE_INSTALLER $GIT_REV_INSTALLER
      echo "BUILT_PACKAGE=$GIT_REV_INSTALLER" | tee -a $GITHUB_ENV
      echo "BUILT_RELEASE_ARTIFACT=$RELEASE_INSTALLER" | tee -a $GITHUB_ENV
  - name: Upload .exe installer
    if: always() && inputs.package_kind == 'innosetup' && inputs.upload_name
    uses: actions/upload-artifact@v4
    with:
      name: ${{ env.BUILT_PACKAGE }}
      path: ${{ env.BUILT_PACKAGE }}
  - name: Upload .exe installer (release)
    if: always() && inputs.package_kind == 'innosetup' && inputs.upload_release_assets == 'true'
    uses: shogo82148/actions-upload-release-asset@v1
    with:
      upload_url: ${{ inputs.release_upload_assets_url }}
      asset_path: ${{ env.BUILT_RELEASE_ARTIFACT }}

  # MacOS .dmg
  - name: Build MacOSX .dmg
    if: always() && inputs.package_kind == 'dmg'
    shell: wrap-shell {0}
    run: |
      DMGFILE=shoopdaloop-${{ env.SHOOP_GIT_REV }}.$(uname -m).dmg
      RELEASE_DMGFILE=shoopdaloop-${{ env.SHOOP_VERSION }}.$(uname -m).dmg
      create-dmg \
        --volname "ShoopDaLoop" \
        --volicon "src/shoopdaloop/resources/iconset/icon.icns" \
        --window-pos 200 120 \
        --window-size 800 400 \
        --icon-size 100 \
        --icon "shoopdaloop.app" 200 190 \
        --hide-extension "shoopdaloop.app" \
        --app-drop-link 600 185 \
        $DMGFILE \
        ${{ env.PORTABLE_DIR }}
      cp $DMGFILE $RELEASE_DMGFILE

      echo "BUILT_PACKAGE=$DMGFILE" | tee -a $GITHUB_ENV
      echo "BUILT_RELEASE_ARTIFACT=$RELEASE_DMGFILE" | tee -a $GITHUB_ENV
  - name: Upload .dmg package
    if: always() && inputs.package_kind == 'dmg' && inputs.upload_name
    uses: actions/upload-artifact@v4
    with:
      name: ${{ env.BUILT_PACKAGE }}
      path: ${{ env.BUILT_PACKAGE }}
  - name: Upload .dmg package (release)
    if: always() && inputs.package_kind == 'dmg' && inputs.upload_release_assets == 'true'
    uses: shogo82148/actions-upload-release-asset@v1
    with:
      upload_url: ${{ inputs.release_upload_assets_url }}
      asset_path: ${{ env.BUILT_RELEASE_ARTIFACT }}
