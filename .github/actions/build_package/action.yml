# Create a distributable package.

inputs:
  package_kind:
    description: "kind of package to build"
  upload_release_assets:
    description: "Whether to upload release assets"
    default: 'false'
  release_upload_assets_url:
    description: "Where to upload release assets"
    default: ''

outputs:
  output:
    description: "Built artifact(s)"
    value: ${{ steps.find_output.outputs.output }}


runs:
  using: "composite"
  steps:

  - name: Determine version, env settings
    if: always()
    shell: wrap-shell {0}
    run: |
      set -x
      # TODO
      VERSION=0.0.0
      VERSION=$(cargo pkgid -p shoopdaloop | sed -r 's/.*#//g')
      FULLGITVERSION=${{ github.sha }}
      GITVERSION=$(echo ${FULLGITVERSION:0:8} | tr -d ' ')

      echo "SHOOP_VERSION=$VERSION" | tee -a $GITHUB_ENV
      echo "SHOOP_GIT_REV=$GITVERSION" | tee -a $GITHUB_ENV
      echo "BUILT_PACKAGE=" | tee -a $GITHUB_ENV
      echo "BUILT_RELEASE_ARTIFACT=" | tee -a $GITHUB_ENV

  # Portable folder
  - name: Build portable folder
    if: always() && inputs.package_kind == 'portable_folder'
    id: build_portable_folder
    shell: wrap-shell {0}
    env:
      SHOOP_LOG: "packaging=debug"
    run: |
      . ${BUILD_ENV_FILE}
      PORTABLE_DIR=$(pwd)/shoopdaloop.${{ env.SHOOP_GIT_REV }}.${{ env.ARTIFACT_VARIANT }}.portable
      RELEASE_PORTABLE_DIR=$(pwd)/shoopdaloop-${{ env.SHOOP_VERSION }}.${{ env.ARTIFACT_VARIANT }}.portable
      echo "PORTABLE_DIR=$PORTABLE_DIR" | tee -a $GITHUB_ENV
      echo "RELEASE_PORTABLE_DIR=$RELEASE_PORTABLE_DIR" | tee -a $GITHUB_ENV
      ${CARGO_ARTIFACTS_DIR}/package build-portable-folder -o $PORTABLE_DIR ${CARGO_BUILD_FLAGS}
  # - name: Make relocatable (MacOS)
  #   if: always() && runner.os == 'macOS' && inputs.package_kind == 'portable_folder'
  #   uses: ./.github/actions/macos_make_relocatable
  #   with:
  #     path: ${{ env.PORTABLE_DIR }}
  #     find_cmd: "find ./lib -name \"*.dylib\";echo \"shoopdaloop\""
  #     match: "libpython3"
  - name: Symlink Qt libs (MacOS)
    if: always() && runner.os == 'macOS' && inputs.package_kind == 'portable_folder'
    shell: wrap-shell {0}
    run: |
      cd ${{ env.PORTABLE_DIR }}/lib
      lib_dir=$(find .. -wholename "*PySide6/Qt/lib" -type d)
      for lib in $(ls "$lib_dir" | sed 's/.framework//'); do
        from=$lib
        to=$lib_dir/$lib.framework/Versions/A/$lib
        echo "Symlink $from -> $to"
        ln -s $to $from
      done
  - if: always() && inputs.package_kind == 'portable_folder'
    shell: wrap-shell {0}
    run: |
      cp -r $PORTABLE_DIR $RELEASE_PORTABLE_DIR
      COMPRESSED_PORTABLE_DIR=$(${{ env.COMPRESS_FOLDER_FN }} ${PORTABLE_DIR})
      COMPRESSED_RELEASE_PORTABLE_DIR=$(${{ env.COMPRESS_FOLDER_FN }} ${RELEASE_PORTABLE_DIR})
      echo "BUILT_PACKAGE=$(${{ env.CONVERT_PATH_FN }} $COMPRESSED_PORTABLE_DIR)" | tee -a $GITHUB_ENV
      echo "BUILT_PACKAGE_NAME=$(basename $COMPRESSED_PORTABLE_DIR)" | tee -a $GITHUB_ENV
      echo "BUILT_RELEASE_ARTIFACT=$(${{ env.CONVERT_PATH_FN }} $COMPRESSED_RELEASE_PORTABLE_DIR)" | tee -a $GITHUB_ENV
  - uses: actions/upload-artifact@v4
    if: always() && inputs.package_kind == 'portable_folder'
    with:
      name: ${{ env.BUILT_PACKAGE_NAME }}
      path: ${{ env.BUILT_PACKAGE }}
  - name: Upload portable folder (release)
    if: always() && inputs.package_kind == 'portable_folder' && inputs.upload_release_assets == 'true'
    uses: shogo82148/actions-upload-release-asset@v1
    with:
      upload_url: ${{ inputs.release_upload_assets_url }}
      asset_path: ${{ env.BUILT_RELEASE_ARTIFACT }}

  # Test binaries for downstream CI
  - name: Build test binaries
    if: always() && inputs.package_kind == 'test_binaries'
    id: build_test_binaries
    shell: wrap-shell {0}
    run: |
      set -x
      . ${BUILD_ENV_FILE}
      TEST_BINARIES_DIR=$(pwd)/shoopdaloop.${{ env.SHOOP_GIT_REV }}.${{ env.ARTIFACT_VARIANT }}.test_binaries
      RELEASE_TEST_BINARIES_DIR=$(pwd)/shoopdaloop-${{ env.SHOOP_VERSION }}.${{ env.ARTIFACT_VARIANT }}.test_binaries
      echo "TEST_BINARIES_DIR=$TEST_BINARIES_DIR" | tee -a $GITHUB_ENV
      USE_PACKAGE_BINARY_PATH=$(${{ env.CONVERT_PATH_FN }} ${CARGO_ARTIFACTS_DIR}/package)
      USE_OUT_DIRECTORY_PATH=$(${{ env.CONVERT_PATH_FN }} $TEST_BINARIES_DIR)
      ${NATIVE_SHELL_CMD} "${USE_PACKAGE_BINARY_PATH} build-test-binaries -o ${USE_OUT_DIRECTORY_PATH} ${CARGO_BUILD_FLAGS}"
      cp -r $TEST_BINARIES_DIR $RELEASE_TEST_BINARIES_DIR
      COMPRESSED_TEST_BINARIES_DIR=$(${{ env.COMPRESS_FOLDER_FN }} ${TEST_BINARIES_DIR})
      COMPRESSED_RELEASE_TEST_BINARIES_DIR=$(${{ env.COMPRESS_FOLDER_FN }} ${RELEASE_TEST_BINARIES_DIR})
      echo "BUILT_PACKAGE=$(${{ env.CONVERT_PATH_FN }} $COMPRESSED_TEST_BINARIES_DIR)" | tee -a $GITHUB_ENV
      echo "BUILT_PACKAGE_NAME=$(basename $COMPRESSED_TEST_BINARIES_DIR)" | tee -a $GITHUB_ENV
      echo "BUILT_RELEASE_ARTIFACT=$(${{ env.CONVERT_PATH_FN }} $COMPRESSED_RELEASE_TEST_BINARIES_DIR)" | tee -a $GITHUB_ENV
      # on MacOS, we need the original Qt that we built against.
      # if [[ "$RUNNER_OS" == "macOS" ]]; then
      #   cp -r $QT_ROOT_DIR/lib/*.framework $RELEASE_TEST_BINARIES_DIR
      # fi
  - uses: actions/upload-artifact@v4
    if: always() && inputs.package_kind == 'test_binaries'
    with:
      name: ${{ env.BUILT_PACKAGE_NAME }}
      path: ${{ env.BUILT_PACKAGE }}

  # AppImage (Linux) (Requires AppDir to already be built)
  - name: Build AppImage
    if: always() && inputs.package_kind == 'appimage'
    id: build_appimage
    shell: wrap-shell {0}
    run: |
      wget https://github.com/AppImage/appimagetool/releases/download/continuous/appimagetool-x86_64.AppImage
      chmod +x appimagetool-x86_64.AppImage
      printf "#!/bin/sh\n\n./appimagetool-x86_64.AppImage --appimage-extract-and-run \$@\n" > appimagetool.sh
      chmod a+x appimagetool.sh
      APPIMAGE_NAME=shoopdaloop.${{ env.SHOOP_GIT_REV }}.${{ env.ARTIFACT_VARIANT }}.AppImage
      RELEASE_APPIMAGE_NAME=shoopdaloop-${{ env.SHOOP_VERSION }}.${{ env.ARTIFACT_VARIANT }}.AppImage
      ${CARGO_ARTIFACTS_DIR}/package build-app-image --appimagetool $(pwd)/appimagetool.sh -o $APPIMAGE_NAME --appdir ${{ env.PORTABLE_DIR }}
      cp $APPIMAGE_NAME $RELEASE_APPIMAGE_NAME
      echo "BUILT_PACKAGE=$APPIMAGE_NAME" | tee -a $GITHUB_ENV
      echo "BUILT_RELEASE_ARTIFACT=$RELEASE_APPIMAGE_NAME" | tee -a $GITHUB_ENV
  - uses: actions/upload-artifact@v4
    if: always() && inputs.package_kind == 'appimage'
    with:
      name: ${{ env.BUILT_PACKAGE }}
      path: ${{ env.BUILT_PACKAGE }}
  - name: Upload AppImage (release)
    if: always() && inputs.package_kind == 'appimage' && inputs.upload_release_assets == 'true'
    uses: shogo82148/actions-upload-release-asset@v1
    with:
      upload_url: ${{ inputs.release_upload_assets_url }}
      asset_path: ${{ env.BUILT_RELEASE_ARTIFACT }}

  # Windows installer (InnoSetup)
  - name: Compile .ISS to .EXE Installer
    uses: Minionguyjpro/Inno-Setup-Action@v1.2.2
    if: always() && inputs.package_kind == 'innosetup'
    with:
      path: distribution/windows/shoopdaloop.iss
      options: /O+ /DMyAppVersion="${{ env.SHOOP_VERSION }}"
  - name: Move .EXE installer
    if: always() && inputs.package_kind == 'innosetup'
    shell: wrap-shell {0}
    run: |
      ls distribution/windows
      RELEASE_INSTALLER=$(find distribution/windows -name "ShoopDaLoop-*.exe")
      GIT_REV_INSTALLER=ShoopDaLoop-$SHOOP_GIT_REV.exe
      cp $RELEASE_INSTALLER $GIT_REV_INSTALLER
      echo "BUILT_PACKAGE=$GIT_REV_INSTALLER" | tee -a $GITHUB_ENV
      echo "BUILT_RELEASE_ARTIFACT=$RELEASE_INSTALLER" | tee -a $GITHUB_ENV
  - name: Upload .exe installer
    if: always() && inputs.package_kind == 'innosetup'
    uses: actions/upload-artifact@v4
    with:
      name: ${{ env.BUILT_PACKAGE }}
      path: ${{ env.BUILT_PACKAGE }}
  - name: Upload .exe installer (release)
    if: always() && inputs.package_kind == 'innosetup' && inputs.upload_release_assets == 'true'
    uses: shogo82148/actions-upload-release-asset@v1
    with:
      upload_url: ${{ inputs.release_upload_assets_url }}
      asset_path: ${{ env.BUILT_RELEASE_ARTIFACT }}

  # MacOS .dmg
  - name: Build MacOSX .dmg
    if: always() && inputs.package_kind == 'dmg'
    shell: wrap-shell {0}
    run: |
      DMGFILE=shoopdaloop-${{ env.SHOOP_GIT_REV }}.$(uname -m).dmg
      RELEASE_DMGFILE=shoopdaloop-${{ env.SHOOP_VERSION }}.$(uname -m).dmg
      cp -r ${{ env.PORTABLE_DIR }} shoopdaloop.app
      max_tries=10
      i=0
      until create-dmg \
        --volname "ShoopDaLoop" \
        --volicon "distribution/macos/icon.icns" \
        --window-pos 200 120 \
        --window-size 800 400 \
        --icon-size 100 \
        --icon "shoopdaloop.app" 200 190 \
        --hide-extension "shoopdaloop.app" \
        --app-drop-link 600 185 \
        $DMGFILE \
        shoopdaloop.app
      do
        if [ $i -eq $max_tries ]
        then
          echo 'Error: create-dmg did not succeed even after 10 tries.'
          exit 1
        fi
        i=$((i+1))
      done
      cp $DMGFILE $RELEASE_DMGFILE

      echo "BUILT_PACKAGE=$DMGFILE" | tee -a $GITHUB_ENV
      echo "BUILT_RELEASE_ARTIFACT=$RELEASE_DMGFILE" | tee -a $GITHUB_ENV
  - name: Upload .dmg package
    if: always() && inputs.package_kind == 'dmg'
    uses: actions/upload-artifact@v4
    with:
      name: ${{ env.BUILT_PACKAGE }}
      path: ${{ env.BUILT_PACKAGE }}
  - name: Upload .dmg package (release)
    if: always() && inputs.package_kind == 'dmg' && inputs.upload_release_assets == 'true'
    uses: shogo82148/actions-upload-release-asset@v1
    with:
      upload_url: ${{ inputs.release_upload_assets_url }}
      asset_path: ${{ env.BUILT_RELEASE_ARTIFACT }}
