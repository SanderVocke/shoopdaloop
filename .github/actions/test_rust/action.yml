name: Rust tests
description: Unit tests for libshoopdaloop

inputs:
  variant_name:
    required: true
    type: string

runs:
  using: "composite"
  steps:
  - name: prepare
    shell: wrap-shell {0}
    run: |
      mkdir -p reports
      echo "RESULTS_XML=reports/rust_test_results.xml" | tee -a $GITHUB_ENV

  # - name: Expand prefix for Mac
  #   if: always()
  #   shell: wrap-shell {0}
  #   id: runcmdprefix
  #   run: |
  #     if [[ "$RUNNER_OS" == "macOS" ]]; then
  #       echo "RUN_CMD_PREFIX=DYLD_FALLBACK_LIBRARY_PATH=$(dirname ${{ inputs.test_runner }}) $RUN_CMD_PREFIX" | tee -a $GITHUB_ENV
  #     fi

  # - name: Find Qt libs
  #   if: always()
  #   shell: wrap-shell {0}
  #   run: |
  #     PYSIDE_LOCATION=$($PIP show pyside6-essentials | grep Location | cut -d ' ' -f 2)/PySide6
  #     echo "PYSIDE_LOCATION=$PYSIDE_LOCATION"
  #     QT_LIB_DIR=$(find $PYSIDE_LOCATION -name "libQt6Core.*" | xargs dirname)
  #     echo "QT_LIB_DIR=$QT_LIB_DIR"
  #     if [[ "$RUNNER_OS" == "macOS" ]]; then
  #       echo "RUN_CMD_PREFIX=DYLD_FALLBACK_LIBRARY_PATH=$QT_LIB_DIR $RUN_CMD_PREFIX" | tee -a $GITHUB_ENV
  #     else
  #       echo "RUN_CMD_PREFIX=LD_LIBRARY_PATH=$QT_LIB_DIR $RUN_CMD_PREFIX" | tee -a $GITHUB_ENV
  #     fi

  - name: run the testrunner
    shell: wrap-shell {0}
    if: always()
    run: |
      mkdir -p reports
      ${{ env.RUN_CMD_PREFIX }}
      ${{ env.COMMAND_TEST_RUST }}
      # echo "Back-end test results file: $(ls -la ${{ env.RESULTS_XML }})"

  - name: Publish Rust Test Report
    if: always()
    uses: mikepenz/action-junit-report@v3
    with:
      report_paths: ${{ env.RESULTS_XML }}
      include_passed: false
      check_name: 'rust test'
      annotate_only: true

