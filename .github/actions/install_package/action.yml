# Install a package

inputs:
  package:
    description: "package file"

outputs:
  shoopdaloop:
    description: "command to run ShoopDaLoop"
    value: ${{ steps.get_cmd.outputs.cmd }}
  install_dir:
    description: "location where ShoopDaLoop lives"
    value: ${{ steps.get_cmd.outputs.install_dir }}
  pytest_dir:
    description: "directory to run pytest, if any"
    value: ${{ steps.get_cmd.outputs.pytest_dir }}
  test_runner:
    description: "path to back-end testrunner, if any"
    value: ${{ steps.get_cmd.outputs.test_runner }}

runs:
  using: "composite"
  steps:
  - name: Determine package kind
    shell: bash
    id: get_type
    run: |
       filename=${{ inputs.package }}
       type="${filename##*.}"
       if [[ "$type" == "zst" ]]; then
          type="pacman"
       fi
       echo "type=$type" | tee -a $GITHUB_OUTPUT
  
  # Windows (InnoSetup)
  - name: Install tools for InnoSetup
    if: ${{ steps.get_type.outputs.type == 'exe' }}
    uses: MinoruSekine/setup-scoop@v3
  - name: Install InnoSetup .exe by extracting
    if: ${{ steps.get_type.outputs.type == 'exe' }}
    shell: bash
    run: |
      scoop install innounp
      innounp -x -dextracted ${{ inputs.package }}
      "extracted/{app}/shoopdaloop.exe" --info
      echo "cmd=extracted/{app}/shoopdaloop.exe" | tee -a $GITHUB_ENV
      echo "install_dir=extracted/{app}" | tee -a $GITHUB_ENV

  # Python wheel
  - name: Install wheel
    if: ${{ steps.get_type.outputs.type == 'whl' }}
    shell: bash
    run: |
      ${{ matrix.kind.pip }} install --force-reinstall ${{ inputs.package }}
      ${{ matrix.kind.python }} -m shoopdaloop --info
      export INSTALLDIR="$(${{ matrix.kind.python }} -m shoopdaloop --info | grep "Installed" | sed -r 's/Installed @ //g' ${{ matrix.kind.pathconvert }})
      echo "cmd=${{ matrix.kind.python }} -m shoopdaloop" | tee -a $GITHUB_ENV
      echo "install_dir=$INSTALLDIR" | tee -a $GITHUB_ENV
      echo "pytest_dir=$INSTALLDIR" | tee -a $GITHUB_ENV

  - name: Get command
    id: get_cmd
    shell: bash
    run: |
      echo "cmd=${{ env.cmd }}" | tee -a $GITHUB_OUTPUT
      echo "install_dir=${{ env.install_dir }}" | tee -a $GITHUB_OUTPUT
      echo "pytest_dir=${{ env.pytest_dir }}" | tee -a $GITHUB_OUTPUT
      echo "test_runner=${{ env.test_runner }}" | tee -a $GITHUB_OUTPUT
      