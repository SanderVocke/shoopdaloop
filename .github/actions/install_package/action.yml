# Install a package

inputs:
  package:
    description: "package file / directory"
  coverage:
    description: "Whether to gather code coverage"
  sudo:
    description: "whether sudo is needed to install software"
    default: 'false'

runs:
  using: "composite"
  steps:

  - name: Determine package kind
    if: always()
    shell: wrap-shell {0}
    id: get_type
    run: |
       filename=${{ inputs.package }}
       if [[ $filename == *linux*.portable.tar.gz ]]; then
           type="portable-linux"
       elif [[ $filename == *macos*.portable.tar.gz ]]; then
           type="portable-macos"
       elif [[ $filename == *windows*.portable.tar.gz ]]; then
           type="portable-windows"
       elif [[ $filename == *.test_binaries.tar.gz ]]; then
           type="test-binaries"
       else
         type="${filename##*.}"
       fi
       echo "type=$type" | tee -a $GITHUB_OUTPUT

  - name: Sudo command
    if: always()
    shell: wrap-shell {0}
    run: |
       echo "maybe_sudo=${{ (inputs.sudo == 'true') && 'sudo' || '' }}" | tee -a $GITHUB_ENV

  # InnoSetup (TODO include .bat file)
  - name: Install InnoSetup installer
    if: always() && steps.get_type.outputs.type == 'exe'
    shell: wrap-shell {0}
    run: |
      WINDOWS_SETUP_PATH=$(cygpath -w $(realpath ${{ inputs.package }}))
      INSTALL_CMD="$WINDOWS_SETUP_PATH /VERYSILENT /CURRENTUSER /DIR=\"$(cygpath -w $(pwd)/installed)\""
      echo "PowerShell installation command: $INSTALL_CMD"
      powershell -Command "echo \"Run in powershell: $INSTALL_CMD\" ; $INSTALL_CMD"
      SHOOPDALOOP_EXE=$(pwd)/installed/shoopdaloop.exe
      SHOOPDALOOP_DIR=$(dirname "$SHOOPDALOOP_EXE")
      echo "ShoopDaLoop executable installed to: $SHOOPDALOOP_EXE"
      echo "Installed at: $SHOOPDALOOP_DIR"
      echo "cmd=\\\"$SHOOPDALOOP_EXE\\\"" | tee -a $GITHUB_ENV
      echo "install_dir=\\\"$SHOOPDALOOP_DIR\\\"" | tee -a $GITHUB_ENV

  # Linux portable folder
  - name: Setup Linux AppDir portable folder
    if: always() && steps.get_type.outputs.type == 'portable-linux'
    shell: wrap-shell {0}
    run: |
      mkdir -p portable
      cd portable
      tar --strip-components=1 -xzf ${{ inputs.package }}
      cd ..
      PORTABLE=$(pwd)/portable
      TESTBINARIES=$(pwd)/test_binaries
      echo "PORTABLE_FOLDER_INSTALL=$PORTABLE" | tee -a $GITHUB_ENV
      echo "TEST_BINARIES_INSTALL=$TESTBINARIES" | tee -a $GITHUB_ENV
      echo "COMMAND_SHOOPDALOOP=$PORTABLE/shoopdaloop" | tee -a $GITHUB_ENV

  # Windows portable folder
  - name: Setup Windows portable folder
    if: always() && steps.get_type.outputs.type == 'portable-windows'
    shell: wrap-shell {0}
    run: |
      mkdir -p portable
      cd portable
      tar --strip-components=1 -xzf ${{ inputs.package }}
      cd ..
      PORTABLE=$(pwd)/portable
      TESTBINARIES=$(pwd)/test_binaries
      echo "PORTABLE_FOLDER_INSTALL=$PORTABLE" | tee -a $GITHUB_ENV
      echo "TEST_BINARIES_INSTALL=$TESTBINARIES" | tee -a $GITHUB_ENV
      echo "COMMAND_SHOOPDALOOP=$PORTABLE/shoopdaloop.bat" | tee -a $GITHUB_ENV

  # MacOS portable folder
  - name: Setup MacOS app bundle folder
    if: always() && steps.get_type.outputs.type == 'portable-macos'
    shell: wrap-shell {0}
    run: |
      mkdir -p portable
      cd portable
      tar --strip-components=1 -xzf ${{ inputs.package }}
      cd ..
      PORTABLE=$(pwd)/portable
      TESTBINARIES=$(pwd)/test_binaries
      echo "PORTABLE_FOLDER_INSTALL=$PORTABLE" | tee -a $GITHUB_ENV
      echo "TEST_BINARIES_INSTALL=$TESTBINARIES" | tee -a $GITHUB_ENV
      echo "COMMAND_SHOOPDALOOP=$PORTABLE/Contents/MacOS/shoopdaloop" | tee -a $GITHUB_ENV

  # Linux AppImage
  - name: Setup AppImage
    if: always() && steps.get_type.outputs.type == 'AppImage'
    shell: wrap-shell {0}
    run: |
      chmod a+x ${{ inputs.package }}
      echo "COMMAND_SHOOPDALOOP=${{ inputs.package }} --appimage-extract-and-run" | tee -a $GITHUB_ENV
      echo "COMMAND_TEST_PYTHON=SHOOPDALOOP_APPIMAGE_EXECUTE=python_tests ${{ inputs.package }} --appimage-extract-and-run" | tee -a $GITHUB_ENV

  # MacOS .dmg installer
  - name: Install MacOS .dmg
    if: always() && steps.get_type.outputs.type == 'dmg'
    shell: wrap-shell {0}
    run: |
      hdiutil attach ${{ inputs.package }}
      echo "cmd=/Volumes/ShoopDaLoop/shoopdaloop.app/Contents/MacOS/shoopdaloop" | tee -a $GITHUB_ENV
      echo "install_dir=/Volumes/ShoopDaLoop/shoopdaloop.app/Contents/MacOS" | tee -a $GITHUB_ENV

  # Test binaries
  - name: Install test binaries
    if: always() && steps.get_type.outputs.type == 'test-binaries'
    shell: wrap-shell {0}
    run: |
      WORKSPACE=$(pwd)
      mkdir -p $TEST_BINARIES_INSTALL
      cd $TEST_BINARIES_INSTALL
      tar --strip-components=1 -xzf ${{ inputs.package }}
      if [[ "$RUNNER_OS" == "Windows" ]]; then
        CMD_PREFIX="PATH=\"\$PATH;$PORTABLE_FOLDER_INSTALL/lib\""
      elif [[ "$RUNNER_OS" == "macOS" ]]; then
        CMD_PREFIX="DYLD_LIBRARY_PATH=\$DYLD_LIBRARY_PATH:$TEST_BINARIES_INSTALL:$PORTABLE_FOLDER_INSTALL/lib"
      else # Linux
        CMD_PREFIX="LD_LIBRARY_PATH=\$LD_LIBRARY_PATH:$PORTABLE_FOLDER_INSTALL/lib:$TEST_BINARIES_INSTALL"
      fi
      echo "COMMAND_TEST_BACKEND=$CMD_PREFIX $TEST_BINARIES_INSTALL/test_runner" | tee -a $GITHUB_ENV
      echo "COMMAND_TEST_RUST=$CMD_PREFIX $TEST_BINARIES_INSTALL/cargo-nextest nextest run --workspace-remap $WORKSPACE --archive-file $TEST_BINARIES_INSTALL/nextest-archive.tar.zst" | tee -a $GITHUB_ENV
