# Create a package/installer using fpm or InnoSetup

inputs:
  package:
    description: "Package artifact to install"
  second_package:
    description: "Second package artifact to install"
  asan:
    description: "Whether to enable ASAN"
  coverage:
    description: "Whether to gather code coverage"
  python:
    description: "python command"
  name:
    description: "workflow name"
  codecov_token:
    description: "Token for CodeCov"
  install_with_sudo:
    description: "Whether to install with sudo"
    default: 'false'
  do_qml_tests:
    description: "Whether to do the QML test step."
    default: 'true'

runs:
  using: "composite"
  steps:
  - name: env settings
    if: always()
    shell: wrap-shell {0}
    run: |
      echo "PYTHON=${{ inputs.python }}" | tee -a $GITHUB_ENV
      echo "PIP=${{ inputs.python }} -m pip" | tee -a $GITHUB_ENV
      echo "PYTEST=${{ inputs.python }} -m pytest" | tee -a $GITHUB_ENV
      echo "ASAN_OPTIONS=detect_leaks=0,new_delete_type_mismatch=0" | tee -a $GITHUB_ENV
  - name: Setup dependencies checker (Windows)
    if: always() && runner.os == 'Windows'
    shell: wrap-shell {0}
    run: |
       curl -L https://github.com/lucasg/Dependencies/releases/download/v1.11.1/Dependencies_x64_Release.zip --output dependencies.zip
       unzip dependencies.zip -d dependencies
       echo "$(cygpath -w $(pwd)/dependencies)" | tee -a $GITHUB_PATH
  - shell: wrap-shell {0}
    if: always() && inputs.package
    run: |
      printf "\n\n\n\n\n\n"
      echo "=========================================="
      echo "Install package ${{ inputs.package }}"
      echo "=========================================="
      printf "\n\n\n\n\n\n"
  - name: Retrieve package
    if: always() && inputs.package
    uses: actions/download-artifact@v4
    with:
      pattern: ${{ inputs.package }}
      path: ./package
      merge-multiple: true
  - name: Find package
    if: always() && inputs.package
    id: find_package
    shell: wrap-shell {0}
    run: |
      echo "package=$(pwd)/package/$(ls package | head -n1)" | tee -a $GITHUB_OUTPUT
  - uses: ./.github/actions/checkpoint
  - name: Install package (${{ inputs.package }})
    if: always() && inputs.package
    id: install_package
    uses: ./.github/actions/install_package
    with:
      package: ${{ steps.find_package.outputs.package }}
      coverage: ${{ inputs.coverage }}
      sudo: ${{ inputs.install_with_sudo }}
  - uses: ./.github/actions/checkpoint
    if: always()
  - shell: wrap-shell {0}
    if: always() && inputs.second_package
    run: |
      printf "\n\n\n\n\n\n"
      echo "=========================================="
      echo "Install package ${{ inputs.second_package }}"
      echo "=========================================="
      printf "\n\n\n\n\n\n"
  - name: Retrieve package
    if: always() && inputs.second_package
    uses: actions/download-artifact@v4
    with:
      pattern: ${{ inputs.second_package }}
      path: ./second_package
      merge-multiple: true
  - name: Find package
    if: always() && inputs.second_package
    id: find_package_2
    shell: wrap-shell {0}
    run: |
      echo "package=$(pwd)/second_package/$(ls second_package | head -n1)" | tee -a $GITHUB_OUTPUT
  - uses: ./.github/actions/checkpoint
  - name: Install package (${{ inputs.second_package }})
    if: always() && inputs.second_package
    id: install_package_2
    uses: ./.github/actions/install_package
    with:
      package: ${{ steps.find_package_2.outputs.package }}
      coverage: ${{ inputs.coverage }}
      sudo: ${{ inputs.install_with_sudo }}
  - uses: ./.github/actions/checkpoint
    if: always()
  - shell: wrap-shell {0}
    if: always()
    run: |
      printf "\n\n\n\n\n\n"
      echo "=========================================="
      echo "Preparing environment"
      echo "=========================================="
      printf "\n\n\n\n\n\n"
  - name: Retrieve info context for coverage analysis
    if: always() && inputs.coverage
    uses: actions/download-artifact@v4
    with:
      name: coverage_context
  - uses: ./.github/actions/checkpoint
    if: always()
  - name: Create crashdumps folder
    if: always()
    shell: wrap-shell {0}
    run: |
      mkdir -p crashdumps
      echo "SHOOP_CRASH_DIR=crashdumps" | tee -a $GITHUB_ENV
  - name: Install Python modules
    if: always()
    shell: wrap-shell {0}
    run: |
      PIP_BREAK_SYSTEM_PACKAGES=1 ${{ env.PIP }} install pytest coverage pipx
  - uses: ./.github/actions/checkpoint
    if: always()
  - name: Install Qoverage
    if: always() && inputs.coverage
    uses: ./.github/actions/install_qoverage
  - uses: ./.github/actions/checkpoint
    if: always()
  - shell: wrap-shell {0}
    if: always()
    env:
       GHA_RUN_ALWAYS: 1
    run: |
      printf "\n\n\n\n\n\n"
      echo "=========================================="
      echo "Back-end test"
      echo "=========================================="
      printf "\n\n\n\n\n\n"
  - name: Test back-end
    if: always() && env.COMMAND_TEST_BACKEND != ''
    uses: ./.github/actions/test_backend
    env:
      REPORTNAME: backend_lcov
      GHA_RUN_ALWAYS: 1
  - uses: ./.github/actions/checkpoint
    if: always()
  - shell: wrap-shell {0}
    if: always()
    env:
       GHA_RUN_ALWAYS: 1
    run: |
      printf "\n\n\n\n\n\n"
      echo "=========================================="
      echo "Rust test"
      echo "=========================================="
      printf "\n\n\n\n\n\n"
  - name: Test rust
    if: always() && env.COMMAND_TEST_RUST != ''
    uses: ./.github/actions/test_rust
    env:
       GHA_RUN_ALWAYS: 1
  - uses: ./.github/actions/checkpoint
    if: always()
  - shell: wrap-shell {0}
    if: always() && (inputs.do_qml_tests == 'true')
    env:
       GHA_RUN_ALWAYS: 1
    run: |
      printf "\n\n\n\n\n\n"
      echo "=========================================="
      echo "QML test"
      echo "=========================================="
      printf "\n\n\n\n\n\n"
  - name: Test QML
    if: always() && (inputs.do_qml_tests == 'true')
    uses: ./.github/actions/test_qml
    env:
      REPORTNAME: qml_lcov
      GHA_RUN_ALWAYS: 1
    with:
      variant_name: release
      macos_rpath_patch: ${{ contains(inputs.name, 'macos') }}
      tee_all_output_to: test-qml-console-output.log
  - uses: ./.github/actions/checkpoint
    if: always()
  - name: Generate QML Python coverage report
    if: always() && inputs.coverage && (inputs.do_qml_tests == 'true')
    shell: wrap-shell {0}
    env:
       GHA_RUN_ALWAYS: 1
    run: |
      $PYTHON -m coverage xml -i -o coverage_reports/qml_pycoverage.xml
      sed -r -i 's/test_venv.*shoopdaloop/src\/shoopdaloop/g' coverage_reports/qml_pycoverage.xml
      $PYTHON -m coverage erase
  - name: Qoverage - Generate report
    if: always() && inputs.coverage && (inputs.do_qml_tests == 'true')
    uses: ./.github/actions/qoverage_generate_report
    env:
       GHA_RUN_ALWAYS: 1
    with:
      strip: ".*/pip/shoopdaloop"
      package_path: ${{ steps.install_package.outputs.install_dir }}
      console_output_file: test-qml-console-output.log
      report_file: coverage_reports/qml_qoverage.xml
  - uses: ./.github/actions/checkpoint
    if: always()
  - shell: wrap-shell {0}
    if: always()
    env:
       GHA_RUN_ALWAYS: 1
    run: |
      printf "\n\n\n\n\n\n"
      echo "=========================================="
      echo "Screenshots"
      echo "=========================================="
      printf "\n\n\n\n\n\n"
  - name: Screenshots
    if: always()
    uses: ./.github/actions/test_screenshots
    env:
      GHA_RUN_ALWAYS: 1
    with:
      root_path: ${{ steps.install_package.outputs.install_dir }}
      screenshots_path: _grabbed_screenshots
      artifact_name: screenshots_${{ inputs.name }}
  - uses: ./.github/actions/checkpoint
    if: always()
  - shell: wrap-shell {0}
    if: always()
    env:
       GHA_RUN_ALWAYS: 1
    run: |
      printf "\n\n\n\n\n\n"
      echo "=========================================="
      echo "Monkey test"
      echo "=========================================="
      printf "\n\n\n\n\n\n"
  - uses: ./.github/actions/checkpoint
    if: always()
  - name: Test Run App
    if: always()
    env:
       GHA_RUN_ALWAYS: 1
    uses: ./.github/actions/test_run_app
    with:
      variant_name: release
      root_path: ${{ steps.install_package.outputs.install_dir }}
  - uses: ./.github/actions/checkpoint
    if: always()
  - shell: wrap-shell {0}
    if: always()
    env:
       GHA_RUN_ALWAYS: 1
    run: |
      printf "\n\n\n\n\n\n"
      echo "=========================================="
      echo "Processing results"
      echo "=========================================="
      printf "\n\n\n\n\n\n"
  - name: Process Crash Dumps
    if: always()
    env:
       GHA_RUN_ALWAYS: 1
    uses: ./.github/actions/process_crashdumps
    with:
      dumps_dir: crashdumps
      variant: ${{ inputs.name }}
  - uses: ./.github/actions/checkpoint
    if: always()
  - name: Upload back-end coverage to CodeCov
    if: always() && inputs.coverage
    uses: codecov/codecov-action@v3
    env:
       GHA_RUN_ALWAYS: 1
    with:
      token: ${{ inputs.codecov_token }}
      flags: back-end
      files: coverage_reports/backend_lcov.info
      verbose: true
      fail_ci_if_error: true
  - name: Upload QML test coverage to CodeCov
    if: always() && inputs.coverage && (inputs.do_qml_tests == 'true')
    uses: codecov/codecov-action@v3
    env:
       GHA_RUN_ALWAYS: 1
    with:
      token: ${{ inputs.codecov_token }}
      flags: qml
      files: coverage_reports/qml_lcov.info,coverage_reports/qml_pycoverage.xml,coverage_reports/qml_qoverage.xml
      verbose: true
      fail_ci_if_error: true
  - name: Upload raw coverage reports
    if: always() && inputs.coverage
    uses: actions/upload-artifact@v4
    env:
       GHA_RUN_ALWAYS: 1
    with:
      name: coverage_reports
      path: coverage_reports