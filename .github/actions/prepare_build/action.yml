name: prepare_build
description: Prepare for building Shoopdaloop wheels


inputs:
  variant:
    required: true
    description: "platform variant"
  GITHUB_TOKEN:
    required: true
    description: "GitHub token"
  macos_target_version:
    required: false
    description: "macOS target version"
  vcpkg_rebuild:
    description: "whether to rebuild vcpkg packages"

runs:
  using: "composite"
  steps:
  - name: Prepare Rust (Windows)
    if: always() && inputs.variant == 'windows'
    uses: dtolnay/rust-toolchain@nightly
    with:
       targets: x86_64-pc-windows-msvc
  - name: Install rustfmt
    shell: wrap-shell {0}
    if: always() && inputs.variant == 'windows'
    run: rustup component add rustfmt --toolchain nightly-x86_64-pc-windows-msvc
  - name: Prepare Rust (non-Windows)
    if: always() && inputs.variant != 'windows'
    uses: dtolnay/rust-toolchain@nightly
    with:
      components: rustfmt
  - name: Rust info
    shell: wrap-shell {0}
    run: |
      echo "==== Rustc version ===="
      rustc --version --verbose
      echo "==== Cargo version ===="
      cargo version --verbose
      echo "==== Rust toolchain list ===="
      rustup toolchain list
      echo "==== Rust component list ===="
      rustup component list

  - name: Prepare linux
    if: always() && inputs.variant == 'linux'
    uses: ./.github/actions/prepare_build_linux
  - name: Prepare ubuntu-latest
    if: always() && inputs.variant == 'ubuntu_latest'
    uses: ./.github/actions/prepare_build_ubuntu_latest
  - name: Prepare MacOS
    if: always() && inputs.variant == 'macos'
    uses: ./.github/actions/prepare_build_macos
  - name: Prepare Windows
    if: always() && inputs.variant == 'windows'
    uses: ./.github/actions/prepare_build_windows

  - name: Run sccache-cache only on non-release runs
    if: always() && github.event_name != 'release' && github.event_name != 'workflow_dispatch'
    uses: mozilla-actions/sccache-action@v0.0.9
  - name: Set Rust caching env vars only on non-release runs
    shell: wrap-shell {0}
    if: always() && github.event_name != 'release' && github.event_name != 'workflow_dispatch'
    run: |
      echo "SCCACHE_GHA_ENABLED=true" >> $GITHUB_ENV
      echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV
  
  - name: Prepare vcpkg
    if: always()
    uses: ./.github/actions/prepare_vcpkg
    with:
        GITHUB_TOKEN: ${{ inputs.GITHUB_TOKEN }}
        macos_target_version: ${{ inputs.macos_target_version }}
        vcpkg_rebuild: ${{ inputs.vcpkg_rebuild }}