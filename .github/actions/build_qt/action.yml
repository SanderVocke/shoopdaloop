name: Build Qt
description: Build Qt from sources

inputs:
  force-rebuild:
    required: false
    type: boolean
    default: false
  install:
    required: false
    type: boolean
    default: true
  upload:
    required: false
    type: boolean
    default: false
  cache:
    required: false
    type: boolean
    default: true

runs:
  using: "composite"
  steps:
    - name: Determine OS version
      id: find_os
      shell: bash
      run: |
        echo "os_version=$(cat /etc/os-release | grep PRETTY_NAME | cut -d'=' -f2 | tr -d '"' | tr -d ' ' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

    - name: Cache
      if: ${{ inputs.cache == 'true' }}
      id: cache-qt
      uses: actions/cache@v3
      with:
        path: qt.tar.gz
        key: qt-6.5.3-${{ steps.find_os.outputs.os_version }}-6
    
    - if: ${{ inputs.force-rebuild == 'true' || inputs.cache == 'false' || (inputs.cache == 'true' && steps.cache-qt.outputs.cache-hit != 'true') }}
      name: Download Qt sources
      shell: bash
      run: |
        curl -L https://download.qt.io/archive/qt/6.5/6.5.3/submodules/qtbase-everywhere-src-6.5.3.tar.xz --output qtbase-everywhere-src-6.5.3.tar.xz
        curl -L https://download.qt.io/archive/qt/6.5/6.5.3/submodules/qtdeclarative-everywhere-src-6.5.3.tar.xz --output qtdeclarative-everywhere-src-6.5.3.tar.xz
        curl -L https://download.qt.io/archive/qt/6.5/6.5.3/submodules/qtshadertools-everywhere-src-6.5.3.tar.xz --output qtshadertools-everywhere-src-6.5.3.tar.xz
        tar -xf qtbase-everywhere-src-6.5.3.tar.xz
        mv qtbase-everywhere-src-6.5.3 qtbase
        tar -xf qtdeclarative-everywhere-src-6.5.3.tar.xz
        mv qtdeclarative-everywhere-src-6.5.3 qtdeclarative
        tar -xf qtshadertools-everywhere-src-6.5.3.tar.xz
        mv qtshadertools-everywhere-src-6.5.3 qtshadertools
    
    - if: ${{ inputs.force-rebuild == 'true' || inputs.cache == 'false' || (inputs.cache == 'true' && steps.cache-qt.outputs.cache-hit != 'true') }}
      name: Configure Qt Base
      shell: bash
      run: |
        cmake -B qtbuild -S qtbase \
          -DCMAKE_INSTALL_PREFIX=/usr \
          -DCMAKE_BUILD_TYPE=Release \
          -DINSTALL_BINDIR=lib/qt6/bin \
          -DINSTALL_PUBLICBINDIR=usr/bin \
          -DINSTALL_LIBEXECDIR=lib/qt6 \
          -DINSTALL_DOCDIR=share/doc/qt6 \
          -DINSTALL_ARCHDATADIR=lib/qt6 \
          -DINSTALL_DATADIR=share/qt6 \
          -DINSTALL_INCLUDEDIR=include/qt6 \
          -DINSTALL_MKSPECSDIR=lib/qt6/mkspecs \
          -DINSTALL_EXAMPLESDIR=share/doc/qt6/examples \
          -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON \
          -DCMAKE_MESSAGE_LOG_LEVEL=STATUS
    
    - if: ${{ inputs.force-rebuild == 'true' || inputs.cache == 'false' || (inputs.cache == 'true' && steps.cache-qt.outputs.cache-hit != 'true') }}
      name: Build Qt Base
      shell: bash
      run: |
        cmake --build qtbuild --parallel 4
        DESTDIR=qt-installed cmake --install qtbuild
        DESTDIR=/ cmake --install qtbuild

    - if: ${{ inputs.force-rebuild == 'true' || inputs.cache == 'false' || (inputs.cache == 'true' && steps.cache-qt.outputs.cache-hit != 'true') }}
      name: Configure Qt Shadertools
      shell: bash
      run: |
        cmake -B qtshadertoolsbuild -S qtshadertools \
          -DCMAKE_INSTALL_PREFIX=/usr \
          -DCMAKE_BUILD_TYPE=Release \
          -DINSTALL_BINDIR=lib/qt6/bin \
          -DINSTALL_PUBLICBINDIR=usr/bin \
          -DINSTALL_LIBEXECDIR=lib/qt6 \
          -DINSTALL_DOCDIR=share/doc/qt6 \
          -DINSTALL_ARCHDATADIR=lib/qt6 \
          -DINSTALL_DATADIR=share/qt6 \
          -DINSTALL_INCLUDEDIR=include/qt6 \
          -DINSTALL_MKSPECSDIR=lib/qt6/mkspecs \
          -DINSTALL_EXAMPLESDIR=share/doc/qt6/examples \
          -DCMAKE_MESSAGE_LOG_LEVEL=STATUS
    
    - if: ${{ inputs.force-rebuild == 'true' || inputs.cache == 'false' || (inputs.cache == 'true' && steps.cache-qt.outputs.cache-hit != 'true') }}
      name: Build Qt Shadertools
      shell: bash
      run: |
        cmake --build qtshadertoolsbuild --parallel 4
        DESTDIR=qt-installed cmake --install qtshadertoolsbuild
        DESTDIR=/ cmake --install qtshadertoolsbuild
    
    - if: ${{ inputs.force-rebuild == 'true' || inputs.cache == 'false' || (inputs.cache == 'true' && steps.cache-qt.outputs.cache-hit != 'true') }}
      name: Configure Qt Declarative
      shell: bash
      run: |
        cmake -B qtdeclarativebuild -S qtdeclarative \
          -DCMAKE_INSTALL_PREFIX=/usr \
          -DCMAKE_BUILD_TYPE=Release \
          -DINSTALL_BINDIR=lib/qt6/bin \
          -DINSTALL_PUBLICBINDIR=usr/bin \
          -DINSTALL_LIBEXECDIR=lib/qt6 \
          -DINSTALL_DOCDIR=share/doc/qt6 \
          -DINSTALL_ARCHDATADIR=lib/qt6 \
          -DINSTALL_DATADIR=share/qt6 \
          -DINSTALL_INCLUDEDIR=include/qt6 \
          -DINSTALL_MKSPECSDIR=lib/qt6/mkspecs \
          -DINSTALL_EXAMPLESDIR=share/doc/qt6/examples \
          -DCMAKE_MESSAGE_LOG_LEVEL=STATUS
    
    - if: ${{ inputs.force-rebuild == 'true' || inputs.cache == 'false' || (inputs.cache == 'true' && steps.cache-qt.outputs.cache-hit != 'true') }}
      name: Build Qt Declarative
      shell: bash
      run: |
        cmake --build qtdeclarativebuild --parallel 4
        DESTDIR=qt-installed cmake --install qtdeclarativebuild
        DESTDIR=/ cmake --install qtdeclarativebuild

    - if: ${{ inputs.force-rebuild == 'true' || inputs.cache == 'false' || (inputs.cache == 'true' && steps.cache-qt.outputs.cache-hit != 'true') }}
      name: Compress Qt for caching
      shell: bash
      run: |
         cd qt-installed
         tar czvf ../qt.tar.gz *
    
    - if: ${{ inputs.upload == 'true' }}
      name: Upload Qt
      uses: actions/upload-artifact@v3
      with:
        name: qt
        path: qt.tar.gz
    
    - if: ${{ inputs.cache == 'true' && steps.cache-qt.outputs.cache-hit == 'true' && inputs.install == 'true' }}
      name: Install Qt from cache
      shell: bash
      run: |
        tar -xzf qt.tar.gz -C /