/* automatically generated by rust-bindgen 0.70.1 */

pub type audio_sample_t = f32;
pub const shoop_audio_driver_type_t_Jack: shoop_audio_driver_type_t = 0;
pub const shoop_audio_driver_type_t_JackTest: shoop_audio_driver_type_t = 1;
pub const shoop_audio_driver_type_t_Dummy: shoop_audio_driver_type_t = 2;
pub type shoop_audio_driver_type_t = ::std::os::raw::c_uint;
pub const shoop_port_data_type_t_ShoopPortDataType_Audio: shoop_port_data_type_t = 0;
pub const shoop_port_data_type_t_ShoopPortDataType_Midi: shoop_port_data_type_t = 1;
pub const shoop_port_data_type_t_ShoopPortDataType_Any: shoop_port_data_type_t = 2;
pub type shoop_port_data_type_t = ::std::os::raw::c_uint;
pub const shoop_loop_mode_t_LoopMode_Unknown: shoop_loop_mode_t = 0;
pub const shoop_loop_mode_t_LoopMode_Stopped: shoop_loop_mode_t = 1;
pub const shoop_loop_mode_t_LoopMode_Playing: shoop_loop_mode_t = 2;
pub const shoop_loop_mode_t_LoopMode_Recording: shoop_loop_mode_t = 3;
pub const shoop_loop_mode_t_LoopMode_Replacing: shoop_loop_mode_t = 4;
pub const shoop_loop_mode_t_LoopMode_PlayingDryThroughWet: shoop_loop_mode_t = 5;
pub const shoop_loop_mode_t_LoopMode_RecordingDryIntoWet: shoop_loop_mode_t = 6;
pub const shoop_loop_mode_t_LOOP_MODE_INVALID: shoop_loop_mode_t = 7;
pub type shoop_loop_mode_t = ::std::os::raw::c_uint;
pub const shoop_log_level_t_log_level_debug_trace: shoop_log_level_t = 0;
pub const shoop_log_level_t_log_level_always_trace: shoop_log_level_t = 1;
pub const shoop_log_level_t_log_level_debug: shoop_log_level_t = 2;
pub const shoop_log_level_t_log_level_info: shoop_log_level_t = 3;
pub const shoop_log_level_t_log_level_warning: shoop_log_level_t = 4;
pub const shoop_log_level_t_log_level_error: shoop_log_level_t = 5;
pub type shoop_log_level_t = ::std::os::raw::c_uint;
pub const shoop_result_t_Success: shoop_result_t = 0;
pub const shoop_result_t_Failure: shoop_result_t = 1;
pub type shoop_result_t = ::std::os::raw::c_uint;
pub const shoop_channel_mode_t_ChannelMode_Disabled: shoop_channel_mode_t = 0;
pub const shoop_channel_mode_t_ChannelMode_Direct: shoop_channel_mode_t = 1;
pub const shoop_channel_mode_t_ChannelMode_Dry: shoop_channel_mode_t = 2;
pub const shoop_channel_mode_t_ChannelMode_Wet: shoop_channel_mode_t = 3;
pub const shoop_channel_mode_t_CHANNEL_MODE_INVALID: shoop_channel_mode_t = 4;
pub type shoop_channel_mode_t = ::std::os::raw::c_uint;
pub const shoop_fx_chain_type_t_Carla_Rack: shoop_fx_chain_type_t = 0;
pub const shoop_fx_chain_type_t_Carla_Patchbay: shoop_fx_chain_type_t = 1;
pub const shoop_fx_chain_type_t_Carla_Patchbay_16x: shoop_fx_chain_type_t = 2;
pub const shoop_fx_chain_type_t_Test2x2x1: shoop_fx_chain_type_t = 3;
pub type shoop_fx_chain_type_t = ::std::os::raw::c_uint;
pub const shoop_port_connectability_t_ShoopPortConnectability_Internal:
    shoop_port_connectability_t = 1;
pub const shoop_port_connectability_t_ShoopPortConnectability_External:
    shoop_port_connectability_t = 2;
pub type shoop_port_connectability_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _shoopdaloop_loop {
    _unused: [u8; 0],
}
pub type shoopdaloop_loop_t = _shoopdaloop_loop;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _shoopdaloop_loop_audio_channel {
    _unused: [u8; 0],
}
pub type shoopdaloop_loop_audio_channel_t = _shoopdaloop_loop_audio_channel;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _shoopdaloop_loop_midi_channel {
    _unused: [u8; 0],
}
pub type shoopdaloop_loop_midi_channel_t = _shoopdaloop_loop_midi_channel;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _shoopdaloop_audio_port {
    _unused: [u8; 0],
}
pub type shoopdaloop_audio_port_t = _shoopdaloop_audio_port;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _shoopdaloop_midi_port {
    _unused: [u8; 0],
}
pub type shoopdaloop_midi_port_t = _shoopdaloop_midi_port;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _shoopdaloop_decoupled_midi_port {
    _unused: [u8; 0],
}
pub type shoopdaloop_decoupled_midi_port_t = _shoopdaloop_decoupled_midi_port;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _shoopdaloop_backend_session {
    _unused: [u8; 0],
}
pub type shoop_backend_session_t = _shoopdaloop_backend_session;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _shoopdaloop_fx_chain {
    _unused: [u8; 0],
}
pub type shoopdaloop_fx_chain_t = _shoopdaloop_fx_chain;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _shoopdaloop_logger {
    _unused: [u8; 0],
}
pub type shoopdaloop_logger_t = _shoopdaloop_logger;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _shoopdaloop_audio_driver {
    _unused: [u8; 0],
}
pub type shoop_audio_driver_t = _shoopdaloop_audio_driver;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct shoop_loop_state_info_t {
    pub mode: shoop_loop_mode_t,
    pub length: ::std::os::raw::c_uint,
    pub position: ::std::os::raw::c_uint,
    pub maybe_next_mode: shoop_loop_mode_t,
    pub maybe_next_mode_delay: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of shoop_loop_state_info_t"][::std::mem::size_of::<shoop_loop_state_info_t>() - 20usize];
    ["Alignment of shoop_loop_state_info_t"]
        [::std::mem::align_of::<shoop_loop_state_info_t>() - 4usize];
    ["Offset of field: shoop_loop_state_info_t::mode"]
        [::std::mem::offset_of!(shoop_loop_state_info_t, mode) - 0usize];
    ["Offset of field: shoop_loop_state_info_t::length"]
        [::std::mem::offset_of!(shoop_loop_state_info_t, length) - 4usize];
    ["Offset of field: shoop_loop_state_info_t::position"]
        [::std::mem::offset_of!(shoop_loop_state_info_t, position) - 8usize];
    ["Offset of field: shoop_loop_state_info_t::maybe_next_mode"]
        [::std::mem::offset_of!(shoop_loop_state_info_t, maybe_next_mode) - 12usize];
    ["Offset of field: shoop_loop_state_info_t::maybe_next_mode_delay"]
        [::std::mem::offset_of!(shoop_loop_state_info_t, maybe_next_mode_delay) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct shoop_audio_port_state_info_t {
    pub input_peak: f32,
    pub output_peak: f32,
    pub gain: f32,
    pub muted: ::std::os::raw::c_uint,
    pub passthrough_muted: ::std::os::raw::c_uint,
    pub ringbuffer_n_samples: ::std::os::raw::c_uint,
    pub name: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of shoop_audio_port_state_info_t"]
        [::std::mem::size_of::<shoop_audio_port_state_info_t>() - 32usize];
    ["Alignment of shoop_audio_port_state_info_t"]
        [::std::mem::align_of::<shoop_audio_port_state_info_t>() - 8usize];
    ["Offset of field: shoop_audio_port_state_info_t::input_peak"]
        [::std::mem::offset_of!(shoop_audio_port_state_info_t, input_peak) - 0usize];
    ["Offset of field: shoop_audio_port_state_info_t::output_peak"]
        [::std::mem::offset_of!(shoop_audio_port_state_info_t, output_peak) - 4usize];
    ["Offset of field: shoop_audio_port_state_info_t::gain"]
        [::std::mem::offset_of!(shoop_audio_port_state_info_t, gain) - 8usize];
    ["Offset of field: shoop_audio_port_state_info_t::muted"]
        [::std::mem::offset_of!(shoop_audio_port_state_info_t, muted) - 12usize];
    ["Offset of field: shoop_audio_port_state_info_t::passthrough_muted"]
        [::std::mem::offset_of!(shoop_audio_port_state_info_t, passthrough_muted) - 16usize];
    ["Offset of field: shoop_audio_port_state_info_t::ringbuffer_n_samples"]
        [::std::mem::offset_of!(shoop_audio_port_state_info_t, ringbuffer_n_samples) - 20usize];
    ["Offset of field: shoop_audio_port_state_info_t::name"]
        [::std::mem::offset_of!(shoop_audio_port_state_info_t, name) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct shoop_midi_port_state_info_t {
    pub n_input_events: ::std::os::raw::c_uint,
    pub n_input_notes_active: ::std::os::raw::c_uint,
    pub n_output_events: ::std::os::raw::c_uint,
    pub n_output_notes_active: ::std::os::raw::c_uint,
    pub muted: ::std::os::raw::c_uint,
    pub passthrough_muted: ::std::os::raw::c_uint,
    pub ringbuffer_n_samples: ::std::os::raw::c_uint,
    pub name: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of shoop_midi_port_state_info_t"]
        [::std::mem::size_of::<shoop_midi_port_state_info_t>() - 40usize];
    ["Alignment of shoop_midi_port_state_info_t"]
        [::std::mem::align_of::<shoop_midi_port_state_info_t>() - 8usize];
    ["Offset of field: shoop_midi_port_state_info_t::n_input_events"]
        [::std::mem::offset_of!(shoop_midi_port_state_info_t, n_input_events) - 0usize];
    ["Offset of field: shoop_midi_port_state_info_t::n_input_notes_active"]
        [::std::mem::offset_of!(shoop_midi_port_state_info_t, n_input_notes_active) - 4usize];
    ["Offset of field: shoop_midi_port_state_info_t::n_output_events"]
        [::std::mem::offset_of!(shoop_midi_port_state_info_t, n_output_events) - 8usize];
    ["Offset of field: shoop_midi_port_state_info_t::n_output_notes_active"]
        [::std::mem::offset_of!(shoop_midi_port_state_info_t, n_output_notes_active) - 12usize];
    ["Offset of field: shoop_midi_port_state_info_t::muted"]
        [::std::mem::offset_of!(shoop_midi_port_state_info_t, muted) - 16usize];
    ["Offset of field: shoop_midi_port_state_info_t::passthrough_muted"]
        [::std::mem::offset_of!(shoop_midi_port_state_info_t, passthrough_muted) - 20usize];
    ["Offset of field: shoop_midi_port_state_info_t::ringbuffer_n_samples"]
        [::std::mem::offset_of!(shoop_midi_port_state_info_t, ringbuffer_n_samples) - 24usize];
    ["Offset of field: shoop_midi_port_state_info_t::name"]
        [::std::mem::offset_of!(shoop_midi_port_state_info_t, name) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct shoop_backend_session_state_info_t {
    pub audio_driver: *mut shoop_audio_driver_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of shoop_backend_session_state_info_t"]
        [::std::mem::size_of::<shoop_backend_session_state_info_t>() - 8usize];
    ["Alignment of shoop_backend_session_state_info_t"]
        [::std::mem::align_of::<shoop_backend_session_state_info_t>() - 8usize];
    ["Offset of field: shoop_backend_session_state_info_t::audio_driver"]
        [::std::mem::offset_of!(shoop_backend_session_state_info_t, audio_driver) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct shoop_audio_driver_state_t {
    pub dsp_load_percent: f32,
    pub xruns_since_last: ::std::os::raw::c_uint,
    pub maybe_driver_handle: *mut ::std::os::raw::c_void,
    pub maybe_instance_name: *const ::std::os::raw::c_char,
    pub sample_rate: ::std::os::raw::c_uint,
    pub buffer_size: ::std::os::raw::c_uint,
    pub active: ::std::os::raw::c_uint,
    pub last_processed: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of shoop_audio_driver_state_t"]
        [::std::mem::size_of::<shoop_audio_driver_state_t>() - 40usize];
    ["Alignment of shoop_audio_driver_state_t"]
        [::std::mem::align_of::<shoop_audio_driver_state_t>() - 8usize];
    ["Offset of field: shoop_audio_driver_state_t::dsp_load_percent"]
        [::std::mem::offset_of!(shoop_audio_driver_state_t, dsp_load_percent) - 0usize];
    ["Offset of field: shoop_audio_driver_state_t::xruns_since_last"]
        [::std::mem::offset_of!(shoop_audio_driver_state_t, xruns_since_last) - 4usize];
    ["Offset of field: shoop_audio_driver_state_t::maybe_driver_handle"]
        [::std::mem::offset_of!(shoop_audio_driver_state_t, maybe_driver_handle) - 8usize];
    ["Offset of field: shoop_audio_driver_state_t::maybe_instance_name"]
        [::std::mem::offset_of!(shoop_audio_driver_state_t, maybe_instance_name) - 16usize];
    ["Offset of field: shoop_audio_driver_state_t::sample_rate"]
        [::std::mem::offset_of!(shoop_audio_driver_state_t, sample_rate) - 24usize];
    ["Offset of field: shoop_audio_driver_state_t::buffer_size"]
        [::std::mem::offset_of!(shoop_audio_driver_state_t, buffer_size) - 28usize];
    ["Offset of field: shoop_audio_driver_state_t::active"]
        [::std::mem::offset_of!(shoop_audio_driver_state_t, active) - 32usize];
    ["Offset of field: shoop_audio_driver_state_t::last_processed"]
        [::std::mem::offset_of!(shoop_audio_driver_state_t, last_processed) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct shoop_fx_chain_state_info_t {
    pub ready: ::std::os::raw::c_uint,
    pub active: ::std::os::raw::c_uint,
    pub visible: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of shoop_fx_chain_state_info_t"]
        [::std::mem::size_of::<shoop_fx_chain_state_info_t>() - 12usize];
    ["Alignment of shoop_fx_chain_state_info_t"]
        [::std::mem::align_of::<shoop_fx_chain_state_info_t>() - 4usize];
    ["Offset of field: shoop_fx_chain_state_info_t::ready"]
        [::std::mem::offset_of!(shoop_fx_chain_state_info_t, ready) - 0usize];
    ["Offset of field: shoop_fx_chain_state_info_t::active"]
        [::std::mem::offset_of!(shoop_fx_chain_state_info_t, active) - 4usize];
    ["Offset of field: shoop_fx_chain_state_info_t::visible"]
        [::std::mem::offset_of!(shoop_fx_chain_state_info_t, visible) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct shoop_jack_audio_driver_settings_t {
    pub client_name_hint: *const ::std::os::raw::c_char,
    pub maybe_server_name: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of shoop_jack_audio_driver_settings_t"]
        [::std::mem::size_of::<shoop_jack_audio_driver_settings_t>() - 16usize];
    ["Alignment of shoop_jack_audio_driver_settings_t"]
        [::std::mem::align_of::<shoop_jack_audio_driver_settings_t>() - 8usize];
    ["Offset of field: shoop_jack_audio_driver_settings_t::client_name_hint"]
        [::std::mem::offset_of!(shoop_jack_audio_driver_settings_t, client_name_hint) - 0usize];
    ["Offset of field: shoop_jack_audio_driver_settings_t::maybe_server_name"]
        [::std::mem::offset_of!(shoop_jack_audio_driver_settings_t, maybe_server_name) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct shoop_dummy_audio_driver_settings_t {
    pub client_name: *const ::std::os::raw::c_char,
    pub sample_rate: ::std::os::raw::c_uint,
    pub buffer_size: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of shoop_dummy_audio_driver_settings_t"]
        [::std::mem::size_of::<shoop_dummy_audio_driver_settings_t>() - 16usize];
    ["Alignment of shoop_dummy_audio_driver_settings_t"]
        [::std::mem::align_of::<shoop_dummy_audio_driver_settings_t>() - 8usize];
    ["Offset of field: shoop_dummy_audio_driver_settings_t::client_name"]
        [::std::mem::offset_of!(shoop_dummy_audio_driver_settings_t, client_name) - 0usize];
    ["Offset of field: shoop_dummy_audio_driver_settings_t::sample_rate"]
        [::std::mem::offset_of!(shoop_dummy_audio_driver_settings_t, sample_rate) - 8usize];
    ["Offset of field: shoop_dummy_audio_driver_settings_t::buffer_size"]
        [::std::mem::offset_of!(shoop_dummy_audio_driver_settings_t, buffer_size) - 12usize];
};
pub const shoop_port_direction_t_ShoopPortDirection_Input: shoop_port_direction_t = 0;
pub const shoop_port_direction_t_ShoopPortDirection_Output: shoop_port_direction_t = 1;
pub const shoop_port_direction_t_ShoopPortDirection_Any: shoop_port_direction_t = 2;
pub type shoop_port_direction_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct shoop_audio_channel_state_info_t {
    pub mode: shoop_channel_mode_t,
    pub gain: f32,
    pub output_peak: f32,
    pub length: ::std::os::raw::c_uint,
    pub start_offset: ::std::os::raw::c_int,
    pub played_back_sample: ::std::os::raw::c_int,
    pub n_preplay_samples: ::std::os::raw::c_uint,
    pub data_dirty: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of shoop_audio_channel_state_info_t"]
        [::std::mem::size_of::<shoop_audio_channel_state_info_t>() - 32usize];
    ["Alignment of shoop_audio_channel_state_info_t"]
        [::std::mem::align_of::<shoop_audio_channel_state_info_t>() - 4usize];
    ["Offset of field: shoop_audio_channel_state_info_t::mode"]
        [::std::mem::offset_of!(shoop_audio_channel_state_info_t, mode) - 0usize];
    ["Offset of field: shoop_audio_channel_state_info_t::gain"]
        [::std::mem::offset_of!(shoop_audio_channel_state_info_t, gain) - 4usize];
    ["Offset of field: shoop_audio_channel_state_info_t::output_peak"]
        [::std::mem::offset_of!(shoop_audio_channel_state_info_t, output_peak) - 8usize];
    ["Offset of field: shoop_audio_channel_state_info_t::length"]
        [::std::mem::offset_of!(shoop_audio_channel_state_info_t, length) - 12usize];
    ["Offset of field: shoop_audio_channel_state_info_t::start_offset"]
        [::std::mem::offset_of!(shoop_audio_channel_state_info_t, start_offset) - 16usize];
    ["Offset of field: shoop_audio_channel_state_info_t::played_back_sample"]
        [::std::mem::offset_of!(shoop_audio_channel_state_info_t, played_back_sample) - 20usize];
    ["Offset of field: shoop_audio_channel_state_info_t::n_preplay_samples"]
        [::std::mem::offset_of!(shoop_audio_channel_state_info_t, n_preplay_samples) - 24usize];
    ["Offset of field: shoop_audio_channel_state_info_t::data_dirty"]
        [::std::mem::offset_of!(shoop_audio_channel_state_info_t, data_dirty) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct shoop_midi_channel_state_info_t {
    pub mode: shoop_channel_mode_t,
    pub n_events_triggered: ::std::os::raw::c_uint,
    pub n_notes_active: ::std::os::raw::c_uint,
    pub length: ::std::os::raw::c_uint,
    pub start_offset: ::std::os::raw::c_int,
    pub played_back_sample: ::std::os::raw::c_int,
    pub n_preplay_samples: ::std::os::raw::c_uint,
    pub data_dirty: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of shoop_midi_channel_state_info_t"]
        [::std::mem::size_of::<shoop_midi_channel_state_info_t>() - 32usize];
    ["Alignment of shoop_midi_channel_state_info_t"]
        [::std::mem::align_of::<shoop_midi_channel_state_info_t>() - 4usize];
    ["Offset of field: shoop_midi_channel_state_info_t::mode"]
        [::std::mem::offset_of!(shoop_midi_channel_state_info_t, mode) - 0usize];
    ["Offset of field: shoop_midi_channel_state_info_t::n_events_triggered"]
        [::std::mem::offset_of!(shoop_midi_channel_state_info_t, n_events_triggered) - 4usize];
    ["Offset of field: shoop_midi_channel_state_info_t::n_notes_active"]
        [::std::mem::offset_of!(shoop_midi_channel_state_info_t, n_notes_active) - 8usize];
    ["Offset of field: shoop_midi_channel_state_info_t::length"]
        [::std::mem::offset_of!(shoop_midi_channel_state_info_t, length) - 12usize];
    ["Offset of field: shoop_midi_channel_state_info_t::start_offset"]
        [::std::mem::offset_of!(shoop_midi_channel_state_info_t, start_offset) - 16usize];
    ["Offset of field: shoop_midi_channel_state_info_t::played_back_sample"]
        [::std::mem::offset_of!(shoop_midi_channel_state_info_t, played_back_sample) - 20usize];
    ["Offset of field: shoop_midi_channel_state_info_t::n_preplay_samples"]
        [::std::mem::offset_of!(shoop_midi_channel_state_info_t, n_preplay_samples) - 24usize];
    ["Offset of field: shoop_midi_channel_state_info_t::data_dirty"]
        [::std::mem::offset_of!(shoop_midi_channel_state_info_t, data_dirty) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct shoop_audio_channel_data_t {
    pub n_samples: ::std::os::raw::c_uint,
    pub data: *mut audio_sample_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of shoop_audio_channel_data_t"]
        [::std::mem::size_of::<shoop_audio_channel_data_t>() - 16usize];
    ["Alignment of shoop_audio_channel_data_t"]
        [::std::mem::align_of::<shoop_audio_channel_data_t>() - 8usize];
    ["Offset of field: shoop_audio_channel_data_t::n_samples"]
        [::std::mem::offset_of!(shoop_audio_channel_data_t, n_samples) - 0usize];
    ["Offset of field: shoop_audio_channel_data_t::data"]
        [::std::mem::offset_of!(shoop_audio_channel_data_t, data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct shoop_midi_event_t {
    pub time: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_uint,
    pub data: *mut ::std::os::raw::c_uchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of shoop_midi_event_t"][::std::mem::size_of::<shoop_midi_event_t>() - 16usize];
    ["Alignment of shoop_midi_event_t"][::std::mem::align_of::<shoop_midi_event_t>() - 8usize];
    ["Offset of field: shoop_midi_event_t::time"]
        [::std::mem::offset_of!(shoop_midi_event_t, time) - 0usize];
    ["Offset of field: shoop_midi_event_t::size"]
        [::std::mem::offset_of!(shoop_midi_event_t, size) - 4usize];
    ["Offset of field: shoop_midi_event_t::data"]
        [::std::mem::offset_of!(shoop_midi_event_t, data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct shoop_midi_sequence_t {
    pub n_events: ::std::os::raw::c_uint,
    pub events: *mut *mut shoop_midi_event_t,
    pub length_samples: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of shoop_midi_sequence_t"][::std::mem::size_of::<shoop_midi_sequence_t>() - 24usize];
    ["Alignment of shoop_midi_sequence_t"]
        [::std::mem::align_of::<shoop_midi_sequence_t>() - 8usize];
    ["Offset of field: shoop_midi_sequence_t::n_events"]
        [::std::mem::offset_of!(shoop_midi_sequence_t, n_events) - 0usize];
    ["Offset of field: shoop_midi_sequence_t::events"]
        [::std::mem::offset_of!(shoop_midi_sequence_t, events) - 8usize];
    ["Offset of field: shoop_midi_sequence_t::length_samples"]
        [::std::mem::offset_of!(shoop_midi_sequence_t, length_samples) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct shoop_profiling_report_item_t {
    pub key: *const ::std::os::raw::c_char,
    pub n_samples: f32,
    pub average: f32,
    pub worst: f32,
    pub most_recent: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of shoop_profiling_report_item_t"]
        [::std::mem::size_of::<shoop_profiling_report_item_t>() - 24usize];
    ["Alignment of shoop_profiling_report_item_t"]
        [::std::mem::align_of::<shoop_profiling_report_item_t>() - 8usize];
    ["Offset of field: shoop_profiling_report_item_t::key"]
        [::std::mem::offset_of!(shoop_profiling_report_item_t, key) - 0usize];
    ["Offset of field: shoop_profiling_report_item_t::n_samples"]
        [::std::mem::offset_of!(shoop_profiling_report_item_t, n_samples) - 8usize];
    ["Offset of field: shoop_profiling_report_item_t::average"]
        [::std::mem::offset_of!(shoop_profiling_report_item_t, average) - 12usize];
    ["Offset of field: shoop_profiling_report_item_t::worst"]
        [::std::mem::offset_of!(shoop_profiling_report_item_t, worst) - 16usize];
    ["Offset of field: shoop_profiling_report_item_t::most_recent"]
        [::std::mem::offset_of!(shoop_profiling_report_item_t, most_recent) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct shoop_profiling_report_t {
    pub n_items: ::std::os::raw::c_uint,
    pub items: *mut shoop_profiling_report_item_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of shoop_profiling_report_t"]
        [::std::mem::size_of::<shoop_profiling_report_t>() - 16usize];
    ["Alignment of shoop_profiling_report_t"]
        [::std::mem::align_of::<shoop_profiling_report_t>() - 8usize];
    ["Offset of field: shoop_profiling_report_t::n_items"]
        [::std::mem::offset_of!(shoop_profiling_report_t, n_items) - 0usize];
    ["Offset of field: shoop_profiling_report_t::items"]
        [::std::mem::offset_of!(shoop_profiling_report_t, items) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct shoop_port_maybe_connection_t {
    pub name: *const ::std::os::raw::c_char,
    pub connected: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of shoop_port_maybe_connection_t"]
        [::std::mem::size_of::<shoop_port_maybe_connection_t>() - 16usize];
    ["Alignment of shoop_port_maybe_connection_t"]
        [::std::mem::align_of::<shoop_port_maybe_connection_t>() - 8usize];
    ["Offset of field: shoop_port_maybe_connection_t::name"]
        [::std::mem::offset_of!(shoop_port_maybe_connection_t, name) - 0usize];
    ["Offset of field: shoop_port_maybe_connection_t::connected"]
        [::std::mem::offset_of!(shoop_port_maybe_connection_t, connected) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct shoop_port_connections_state_t {
    pub n_ports: ::std::os::raw::c_uint,
    pub ports: *mut shoop_port_maybe_connection_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of shoop_port_connections_state_t"]
        [::std::mem::size_of::<shoop_port_connections_state_t>() - 16usize];
    ["Alignment of shoop_port_connections_state_t"]
        [::std::mem::align_of::<shoop_port_connections_state_t>() - 8usize];
    ["Offset of field: shoop_port_connections_state_t::n_ports"]
        [::std::mem::offset_of!(shoop_port_connections_state_t, n_ports) - 0usize];
    ["Offset of field: shoop_port_connections_state_t::ports"]
        [::std::mem::offset_of!(shoop_port_connections_state_t, ports) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct shoop_multichannel_audio_t {
    pub n_channels: ::std::os::raw::c_uint,
    pub n_frames: ::std::os::raw::c_uint,
    pub data: *mut audio_sample_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of shoop_multichannel_audio_t"]
        [::std::mem::size_of::<shoop_multichannel_audio_t>() - 16usize];
    ["Alignment of shoop_multichannel_audio_t"]
        [::std::mem::align_of::<shoop_multichannel_audio_t>() - 8usize];
    ["Offset of field: shoop_multichannel_audio_t::n_channels"]
        [::std::mem::offset_of!(shoop_multichannel_audio_t, n_channels) - 0usize];
    ["Offset of field: shoop_multichannel_audio_t::n_frames"]
        [::std::mem::offset_of!(shoop_multichannel_audio_t, n_frames) - 4usize];
    ["Offset of field: shoop_multichannel_audio_t::data"]
        [::std::mem::offset_of!(shoop_multichannel_audio_t, data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct shoop_external_port_descriptor_t {
    pub data_type: shoop_port_data_type_t,
    pub direction: shoop_port_direction_t,
    pub name: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of shoop_external_port_descriptor_t"]
        [::std::mem::size_of::<shoop_external_port_descriptor_t>() - 16usize];
    ["Alignment of shoop_external_port_descriptor_t"]
        [::std::mem::align_of::<shoop_external_port_descriptor_t>() - 8usize];
    ["Offset of field: shoop_external_port_descriptor_t::data_type"]
        [::std::mem::offset_of!(shoop_external_port_descriptor_t, data_type) - 0usize];
    ["Offset of field: shoop_external_port_descriptor_t::direction"]
        [::std::mem::offset_of!(shoop_external_port_descriptor_t, direction) - 4usize];
    ["Offset of field: shoop_external_port_descriptor_t::name"]
        [::std::mem::offset_of!(shoop_external_port_descriptor_t, name) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct shoop_external_port_descriptors_t {
    pub n_ports: ::std::os::raw::c_uint,
    pub ports: *mut shoop_external_port_descriptor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of shoop_external_port_descriptors_t"]
        [::std::mem::size_of::<shoop_external_port_descriptors_t>() - 16usize];
    ["Alignment of shoop_external_port_descriptors_t"]
        [::std::mem::align_of::<shoop_external_port_descriptors_t>() - 8usize];
    ["Offset of field: shoop_external_port_descriptors_t::n_ports"]
        [::std::mem::offset_of!(shoop_external_port_descriptors_t, n_ports) - 0usize];
    ["Offset of field: shoop_external_port_descriptors_t::ports"]
        [::std::mem::offset_of!(shoop_external_port_descriptors_t, ports) - 8usize];
};
extern "C" {
    pub fn create_audio_driver(type_: shoop_audio_driver_type_t) -> *mut shoop_audio_driver_t;
}
extern "C" {
    pub fn get_audio_driver_state(
        driver: *mut shoop_audio_driver_t,
    ) -> *mut shoop_audio_driver_state_t;
}
extern "C" {
    pub fn driver_type_supported(driver_type: shoop_audio_driver_type_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn destroy_audio_driver(driver: *mut shoop_audio_driver_t);
}
extern "C" {
    pub fn maybe_driver_handle(driver: *mut shoop_audio_driver_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn maybe_driver_instance_name(
        driver: *mut shoop_audio_driver_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn get_sample_rate(driver: *mut shoop_audio_driver_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn get_buffer_size(driver: *mut shoop_audio_driver_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn get_driver_active(driver: *mut shoop_audio_driver_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn start_dummy_driver(
        driver: *mut shoop_audio_driver_t,
        settings: shoop_dummy_audio_driver_settings_t,
    );
}
extern "C" {
    pub fn start_jack_driver(
        driver: *mut shoop_audio_driver_t,
        settings: shoop_jack_audio_driver_settings_t,
    );
}
extern "C" {
    pub fn wait_process(driver: *mut shoop_audio_driver_t);
}
extern "C" {
    pub fn find_external_ports(
        driver: *mut shoop_audio_driver_t,
        maybe_name_regex: *const ::std::os::raw::c_char,
        maybe_port_direction_filter: shoop_port_direction_t,
        maybe_data_type_filter: shoop_port_data_type_t,
    ) -> *mut shoop_external_port_descriptors_t;
}
extern "C" {
    pub fn do_segfault_on_process_thread(backend: *mut shoop_backend_session_t);
}
extern "C" {
    pub fn do_abort_on_process_thread(backend: *mut shoop_backend_session_t);
}
extern "C" {
    pub fn create_backend_session() -> *mut shoop_backend_session_t;
}
extern "C" {
    pub fn destroy_backend_session(session: *mut shoop_backend_session_t);
}
extern "C" {
    pub fn get_backend_session_state(
        session: *mut shoop_backend_session_t,
    ) -> *mut shoop_backend_session_state_info_t;
}
extern "C" {
    pub fn get_profiling_report(
        session: *mut shoop_backend_session_t,
    ) -> *mut shoop_profiling_report_t;
}
extern "C" {
    pub fn set_audio_driver(
        session: *mut shoop_backend_session_t,
        driver: *mut shoop_audio_driver_t,
    ) -> shoop_result_t;
}
extern "C" {
    pub fn create_loop(backend: *mut shoop_backend_session_t) -> *mut shoopdaloop_loop_t;
}
extern "C" {
    pub fn add_audio_channel(
        loop_: *mut shoopdaloop_loop_t,
        mode: shoop_channel_mode_t,
    ) -> *mut shoopdaloop_loop_audio_channel_t;
}
extern "C" {
    pub fn add_midi_channel(
        loop_: *mut shoopdaloop_loop_t,
        mode: shoop_channel_mode_t,
    ) -> *mut shoopdaloop_loop_midi_channel_t;
}
extern "C" {
    pub fn get_n_audio_channels(loop_: *mut shoopdaloop_loop_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn get_n_midi_channels(loop_: *mut shoopdaloop_loop_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn clear_loop(loop_: *mut shoopdaloop_loop_t, length: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn get_loop_state(loop_: *mut shoopdaloop_loop_t) -> *mut shoop_loop_state_info_t;
}
extern "C" {
    pub fn set_loop_length(loop_: *mut shoopdaloop_loop_t, length: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn set_loop_position(loop_: *mut shoopdaloop_loop_t, position: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn set_loop_sync_source(
        loop_: *mut shoopdaloop_loop_t,
        sync_source: *mut shoopdaloop_loop_t,
    );
}
extern "C" {
    pub fn adopt_ringbuffer_contents(
        loop_: *mut shoopdaloop_loop_t,
        reverse_cycles_start: ::std::os::raw::c_int,
        cycles_length: ::std::os::raw::c_int,
        go_to_cycle: ::std::os::raw::c_int,
        go_to_mode: shoop_loop_mode_t,
    );
}
extern "C" {
    pub fn loop_transition(
        loop_: *mut shoopdaloop_loop_t,
        mode: shoop_loop_mode_t,
        maybe_delay: ::std::os::raw::c_int,
        maybe_to_sync_at_cycle: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn loops_transition(
        n_loops: ::std::os::raw::c_uint,
        loops: *mut *mut shoopdaloop_loop_t,
        mode: shoop_loop_mode_t,
        maybe_delay: ::std::os::raw::c_int,
        maybe_to_sync_at_cycle: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn clear_audio_channel(
        channel: *mut shoopdaloop_loop_audio_channel_t,
        length: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn clear_midi_channel(channel: *mut shoopdaloop_loop_midi_channel_t);
}
extern "C" {
    pub fn connect_audio_output(
        channel: *mut shoopdaloop_loop_audio_channel_t,
        port: *mut shoopdaloop_audio_port_t,
    );
}
extern "C" {
    pub fn connect_midi_output(
        channel: *mut shoopdaloop_loop_midi_channel_t,
        port: *mut shoopdaloop_midi_port_t,
    );
}
extern "C" {
    pub fn connect_audio_input(
        channel: *mut shoopdaloop_loop_audio_channel_t,
        port: *mut shoopdaloop_audio_port_t,
    );
}
extern "C" {
    pub fn connect_midi_input(
        channel: *mut shoopdaloop_loop_midi_channel_t,
        port: *mut shoopdaloop_midi_port_t,
    );
}
extern "C" {
    pub fn disconnect_audio_outputs(channel: *mut shoopdaloop_loop_audio_channel_t);
}
extern "C" {
    pub fn disconnect_midi_outputs(channel: *mut shoopdaloop_loop_midi_channel_t);
}
extern "C" {
    pub fn disconnect_audio_output(
        channel: *mut shoopdaloop_loop_audio_channel_t,
        port: *mut shoopdaloop_audio_port_t,
    );
}
extern "C" {
    pub fn disconnect_midi_output(
        channel: *mut shoopdaloop_loop_midi_channel_t,
        port: *mut shoopdaloop_midi_port_t,
    );
}
extern "C" {
    pub fn disconnect_audio_inputs(channel: *mut shoopdaloop_loop_audio_channel_t);
}
extern "C" {
    pub fn disconnect_midi_inputs(channel: *mut shoopdaloop_loop_midi_channel_t);
}
extern "C" {
    pub fn disconnect_audio_input(
        channel: *mut shoopdaloop_loop_audio_channel_t,
        port: *mut shoopdaloop_audio_port_t,
    );
}
extern "C" {
    pub fn disconnect_midi_input(
        channel: *mut shoopdaloop_loop_midi_channel_t,
        port: *mut shoopdaloop_midi_port_t,
    );
}
extern "C" {
    pub fn get_audio_channel_data(
        channel: *mut shoopdaloop_loop_audio_channel_t,
    ) -> *mut shoop_audio_channel_data_t;
}
extern "C" {
    pub fn get_midi_channel_data(
        channel: *mut shoopdaloop_loop_midi_channel_t,
    ) -> *mut shoop_midi_sequence_t;
}
extern "C" {
    pub fn load_audio_channel_data(
        channel: *mut shoopdaloop_loop_audio_channel_t,
        data: *mut shoop_audio_channel_data_t,
    );
}
extern "C" {
    pub fn load_midi_channel_data(
        channel: *mut shoopdaloop_loop_midi_channel_t,
        data: *mut shoop_midi_sequence_t,
    );
}
extern "C" {
    pub fn get_audio_channel_state(
        channel: *mut shoopdaloop_loop_audio_channel_t,
    ) -> *mut shoop_audio_channel_state_info_t;
}
extern "C" {
    pub fn set_audio_channel_gain(channel: *mut shoopdaloop_loop_audio_channel_t, gain: f32);
}
extern "C" {
    pub fn get_midi_channel_state(
        channel: *mut shoopdaloop_loop_midi_channel_t,
    ) -> *mut shoop_midi_channel_state_info_t;
}
extern "C" {
    pub fn set_audio_channel_mode(
        channel: *mut shoopdaloop_loop_audio_channel_t,
        mode: shoop_channel_mode_t,
    );
}
extern "C" {
    pub fn set_midi_channel_mode(
        channel: *mut shoopdaloop_loop_midi_channel_t,
        mode: shoop_channel_mode_t,
    );
}
extern "C" {
    pub fn set_audio_channel_start_offset(
        channel: *mut shoopdaloop_loop_audio_channel_t,
        offset: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn set_midi_channel_start_offset(
        channel: *mut shoopdaloop_loop_midi_channel_t,
        offset: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn set_audio_channel_n_preplay_samples(
        channel: *mut shoopdaloop_loop_audio_channel_t,
        n: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn set_midi_channel_n_preplay_samples(
        channel: *mut shoopdaloop_loop_midi_channel_t,
        n: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn clear_audio_channel_data_dirty(channel: *mut shoopdaloop_loop_audio_channel_t);
}
extern "C" {
    pub fn clear_midi_channel_data_dirty(channel: *mut shoopdaloop_loop_midi_channel_t);
}
extern "C" {
    pub fn reset_midi_channel_state_tracking(channel: *mut shoopdaloop_loop_midi_channel_t);
}
extern "C" {
    pub fn create_fx_chain(
        backend: *mut shoop_backend_session_t,
        type_: shoop_fx_chain_type_t,
        title: *const ::std::os::raw::c_char,
    ) -> *mut shoopdaloop_fx_chain_t;
}
extern "C" {
    pub fn fx_chain_set_ui_visible(
        chain: *mut shoopdaloop_fx_chain_t,
        visible: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn get_fx_chain_state(
        chain: *mut shoopdaloop_fx_chain_t,
    ) -> *mut shoop_fx_chain_state_info_t;
}
extern "C" {
    pub fn set_fx_chain_active(chain: *mut shoopdaloop_fx_chain_t, active: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn get_fx_chain_internal_state(
        chain: *mut shoopdaloop_fx_chain_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn restore_fx_chain_internal_state(
        chain: *mut shoopdaloop_fx_chain_t,
        state: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn n_fx_chain_audio_input_ports(
        chain: *mut shoopdaloop_fx_chain_t,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn n_fx_chain_audio_output_ports(
        chain: *mut shoopdaloop_fx_chain_t,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn n_fx_chain_midi_input_ports(
        chain: *mut shoopdaloop_fx_chain_t,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn fx_chain_audio_input_port(
        chain: *mut shoopdaloop_fx_chain_t,
        idx: ::std::os::raw::c_uint,
    ) -> *mut shoopdaloop_audio_port_t;
}
extern "C" {
    pub fn fx_chain_audio_output_port(
        chain: *mut shoopdaloop_fx_chain_t,
        idx: ::std::os::raw::c_uint,
    ) -> *mut shoopdaloop_audio_port_t;
}
extern "C" {
    pub fn fx_chain_midi_input_port(
        chain: *mut shoopdaloop_fx_chain_t,
        idx: ::std::os::raw::c_uint,
    ) -> *mut shoopdaloop_midi_port_t;
}
extern "C" {
    pub fn connect_audio_port_internal(
        from: *mut shoopdaloop_audio_port_t,
        to: *mut shoopdaloop_audio_port_t,
    );
}
extern "C" {
    pub fn connect_audio_port_external(
        ours: *mut shoopdaloop_audio_port_t,
        external_port_name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn disconnect_audio_port_external(
        ours: *mut shoopdaloop_audio_port_t,
        external_port_name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn disconnect_audio_port_internal(
        from: *mut shoopdaloop_audio_port_t,
        to: *mut shoopdaloop_audio_port_t,
    );
}
extern "C" {
    pub fn set_audio_port_gain(port: *mut shoopdaloop_audio_port_t, gain: f32);
}
extern "C" {
    pub fn set_audio_port_muted(port: *mut shoopdaloop_audio_port_t, muted: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn set_audio_port_passthroughMuted(
        port: *mut shoopdaloop_audio_port_t,
        muted: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn get_audio_port_state(
        port: *mut shoopdaloop_audio_port_t,
    ) -> *mut shoop_audio_port_state_info_t;
}
extern "C" {
    pub fn get_audio_port_connections_state(
        port: *mut shoopdaloop_audio_port_t,
    ) -> *mut shoop_port_connections_state_t;
}
extern "C" {
    pub fn get_audio_port_driver_handle(
        port: *mut shoopdaloop_audio_port_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn open_driver_audio_port(
        backend: *mut shoop_backend_session_t,
        driver: *mut shoop_audio_driver_t,
        name_hint: *const ::std::os::raw::c_char,
        direction: shoop_port_direction_t,
        min_always_on_ringbuffer_samples: ::std::os::raw::c_uint,
    ) -> *mut shoopdaloop_audio_port_t;
}
extern "C" {
    pub fn open_internal_audio_port(
        backend: *mut shoop_backend_session_t,
        name_hint: *const ::std::os::raw::c_char,
        min_always_on_ringbuffer_samples: ::std::os::raw::c_uint,
    ) -> *mut shoopdaloop_audio_port_t;
}
extern "C" {
    pub fn get_audio_port_input_connectability(
        port: *mut shoopdaloop_audio_port_t,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn get_audio_port_output_connectability(
        port: *mut shoopdaloop_audio_port_t,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn set_audio_port_ringbuffer_n_samples(
        port: *mut shoopdaloop_audio_port_t,
        n: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn connect_midi_port_internal(
        from: *mut shoopdaloop_midi_port_t,
        to: *mut shoopdaloop_midi_port_t,
    );
}
extern "C" {
    pub fn connect_midi_port_external(
        ours: *mut shoopdaloop_midi_port_t,
        external_port_name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn disconnect_midi_port_external(
        ours: *mut shoopdaloop_midi_port_t,
        external_port_name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn disconnect_midi_port_internal(
        ours: *mut shoopdaloop_midi_port_t,
        to: *mut shoopdaloop_midi_port_t,
    );
}
extern "C" {
    pub fn get_midi_port_state(
        port: *mut shoopdaloop_midi_port_t,
    ) -> *mut shoop_midi_port_state_info_t;
}
extern "C" {
    pub fn set_midi_port_muted(port: *mut shoopdaloop_midi_port_t, muted: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn set_midi_port_passthroughMuted(
        port: *mut shoopdaloop_midi_port_t,
        muted: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn get_midi_port_connections_state(
        port: *mut shoopdaloop_midi_port_t,
    ) -> *mut shoop_port_connections_state_t;
}
extern "C" {
    pub fn get_midi_port_driver_handle(
        port: *mut shoopdaloop_midi_port_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn open_driver_midi_port(
        backend: *mut shoop_backend_session_t,
        driver: *mut shoop_audio_driver_t,
        name_hint: *const ::std::os::raw::c_char,
        direction: shoop_port_direction_t,
        min_always_on_ringbuffer_samples: ::std::os::raw::c_uint,
    ) -> *mut shoopdaloop_midi_port_t;
}
extern "C" {
    pub fn open_internal_midi_port(
        backend: *mut shoop_backend_session_t,
        name_hint: *const ::std::os::raw::c_char,
        min_always_on_ringbuffer_samples: ::std::os::raw::c_uint,
    ) -> *mut shoopdaloop_midi_port_t;
}
extern "C" {
    pub fn get_midi_port_input_connectability(
        port: *mut shoopdaloop_midi_port_t,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn get_midi_port_output_connectability(
        port: *mut shoopdaloop_midi_port_t,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn set_midi_port_ringbuffer_n_samples(
        port: *mut shoopdaloop_midi_port_t,
        n: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn open_decoupled_midi_port(
        driver: *mut shoop_audio_driver_t,
        name_hint: *const ::std::os::raw::c_char,
        direction: shoop_port_direction_t,
    ) -> *mut shoopdaloop_decoupled_midi_port_t;
}
extern "C" {
    pub fn maybe_next_message(
        port: *mut shoopdaloop_decoupled_midi_port_t,
    ) -> *mut shoop_midi_event_t;
}
extern "C" {
    pub fn send_decoupled_midi(
        port: *mut shoopdaloop_decoupled_midi_port_t,
        length: ::std::os::raw::c_uint,
        data: *mut ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn get_decoupled_midi_port_name(
        port: *mut shoopdaloop_decoupled_midi_port_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn close_decoupled_midi_port(port: *mut shoopdaloop_decoupled_midi_port_t);
}
extern "C" {
    pub fn get_decoupled_midi_port_connections_state(
        port: *mut shoopdaloop_decoupled_midi_port_t,
    ) -> *mut shoop_port_connections_state_t;
}
extern "C" {
    pub fn connect_external_decoupled_midi_port(
        ours: *mut shoopdaloop_decoupled_midi_port_t,
        external_port_name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn disconnect_external_decoupled_midi_port(
        ours: *mut shoopdaloop_decoupled_midi_port_t,
        external_port_name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn destroy_midi_event(d: *mut shoop_midi_event_t);
}
extern "C" {
    pub fn destroy_midi_sequence(d: *mut shoop_midi_sequence_t);
}
extern "C" {
    pub fn destroy_audio_channel_data(d: *mut shoop_audio_channel_data_t);
}
extern "C" {
    pub fn destroy_audio_channel_state_info(d: *mut shoop_audio_channel_state_info_t);
}
extern "C" {
    pub fn destroy_midi_channel_state_info(d: *mut shoop_midi_channel_state_info_t);
}
extern "C" {
    pub fn destroy_backend_state_info(d: *mut shoop_backend_session_state_info_t);
}
extern "C" {
    pub fn destroy_loop(d: *mut shoopdaloop_loop_t);
}
extern "C" {
    pub fn destroy_audio_port(d: *mut shoopdaloop_audio_port_t);
}
extern "C" {
    pub fn destroy_midi_port(d: *mut shoopdaloop_midi_port_t);
}
extern "C" {
    pub fn destroy_midi_port_state_info(d: *mut shoop_midi_port_state_info_t);
}
extern "C" {
    pub fn destroy_audio_port_state_info(d: *mut shoop_audio_port_state_info_t);
}
extern "C" {
    pub fn destroy_audio_channel(d: *mut shoopdaloop_loop_audio_channel_t);
}
extern "C" {
    pub fn destroy_midi_channel(d: *mut shoopdaloop_loop_midi_channel_t);
}
extern "C" {
    pub fn destroy_shoopdaloop_decoupled_midi_port(d: *mut shoopdaloop_decoupled_midi_port_t);
}
extern "C" {
    pub fn destroy_loop_state_info(d: *mut shoop_loop_state_info_t);
}
extern "C" {
    pub fn destroy_fx_chain(d: *mut shoopdaloop_fx_chain_t);
}
extern "C" {
    pub fn destroy_fx_chain_state(d: *mut shoop_fx_chain_state_info_t);
}
extern "C" {
    pub fn destroy_profiling_report(d: *mut shoop_profiling_report_t);
}
extern "C" {
    pub fn destroy_string(s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn destroy_port_connections_state(d: *mut shoop_port_connections_state_t);
}
extern "C" {
    pub fn destroy_logger(logger: *mut shoopdaloop_logger_t);
}
extern "C" {
    pub fn destroy_audio_driver_state(state: *mut shoop_audio_driver_state_t);
}
extern "C" {
    pub fn destroy_multichannel_audio(audio: *mut shoop_multichannel_audio_t);
}
extern "C" {
    pub fn destroy_external_port_descriptors(desc: *mut shoop_external_port_descriptors_t);
}
extern "C" {
    pub fn alloc_midi_event(data_bytes: ::std::os::raw::c_uint) -> *mut shoop_midi_event_t;
}
extern "C" {
    pub fn alloc_midi_sequence(n_events: ::std::os::raw::c_uint) -> *mut shoop_midi_sequence_t;
}
extern "C" {
    pub fn alloc_audio_channel_data(
        n_samples: ::std::os::raw::c_uint,
    ) -> *mut shoop_audio_channel_data_t;
}
extern "C" {
    pub fn alloc_multichannel_audio(
        n_channels: ::std::os::raw::c_uint,
        n_frames: ::std::os::raw::c_uint,
    ) -> *mut shoop_multichannel_audio_t;
}
extern "C" {
    pub fn initialize_logging();
}
extern "C" {
    pub fn get_logger(name: *const ::std::os::raw::c_char) -> *mut shoopdaloop_logger_t;
}
extern "C" {
    pub fn set_global_logging_level(level: shoop_log_level_t);
}
extern "C" {
    pub fn set_logger_level_override(logger: *mut shoopdaloop_logger_t, level: shoop_log_level_t);
}
extern "C" {
    pub fn reset_logger_level_override(logger: *mut shoopdaloop_logger_t);
}
extern "C" {
    pub fn shoopdaloop_log(
        logger: *mut shoopdaloop_logger_t,
        level: shoop_log_level_t,
        msg: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn shoopdaloop_should_log(
        logger: *mut shoopdaloop_logger_t,
        level: shoop_log_level_t,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn dummy_audio_port_queue_data(
        port: *mut shoopdaloop_audio_port_t,
        n_frames: ::std::os::raw::c_uint,
        data: *const audio_sample_t,
    );
}
extern "C" {
    pub fn dummy_audio_port_dequeue_data(
        port: *mut shoopdaloop_audio_port_t,
        n_frames: ::std::os::raw::c_uint,
        store_in: *mut audio_sample_t,
    );
}
extern "C" {
    pub fn dummy_audio_port_request_data(
        port: *mut shoopdaloop_audio_port_t,
        n_frames: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn dummy_audio_enter_controlled_mode(driver: *mut shoop_audio_driver_t);
}
extern "C" {
    pub fn dummy_audio_enter_automatic_mode(driver: *mut shoop_audio_driver_t);
}
extern "C" {
    pub fn dummy_audio_is_in_controlled_mode(
        driver: *mut shoop_audio_driver_t,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn dummy_audio_request_controlled_frames(
        driver: *mut shoop_audio_driver_t,
        n_frames: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn dummy_audio_run_requested_frames(driver: *mut shoop_audio_driver_t);
}
extern "C" {
    pub fn dummy_audio_n_requested_frames(
        driver: *mut shoop_audio_driver_t,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn dummy_midi_port_queue_data(
        port: *mut shoopdaloop_midi_port_t,
        events: *mut shoop_midi_sequence_t,
    );
}
extern "C" {
    pub fn dummy_midi_port_dequeue_data(
        port: *mut shoopdaloop_midi_port_t,
    ) -> *mut shoop_midi_sequence_t;
}
extern "C" {
    pub fn dummy_midi_port_request_data(
        port: *mut shoopdaloop_midi_port_t,
        n_frames: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn dummy_midi_port_clear_queues(port: *mut shoopdaloop_midi_port_t);
}
extern "C" {
    pub fn dummy_driver_add_external_mock_port(
        driver: *mut shoop_audio_driver_t,
        name: *const ::std::os::raw::c_char,
        direction: shoop_port_direction_t,
        data_type: shoop_port_data_type_t,
    );
}
extern "C" {
    pub fn dummy_driver_remove_external_mock_port(
        driver: *mut shoop_audio_driver_t,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn dummy_driver_remove_all_external_mock_ports(driver: *mut shoop_audio_driver_t);
}
extern "C" {
    pub fn resample_audio(
        in_: *mut shoop_multichannel_audio_t,
        new_n_frames: ::std::os::raw::c_uint,
    ) -> *mut shoop_multichannel_audio_t;
}
