#ifndef DYLIBLOAD_WRAPPER_LILV
#define DYLIBLOAD_WRAPPER_LILV
// This file is generated. Do not edit!
// see https://github.com/hpvb/dynload-wrapper for details
// generated by /home/sander/dynload-wrapper/generate-wrapper.py 0.5 on 2023-11-23 21:04:51
// flags: /home/sander/dynload-wrapper/generate-wrapper.py --include build/cp311-cp311-linux_x86_64/libshoopdaloop_backend/external_deps/include/lilv-0/lilv/lilv.h --sys-include <lilv/lilv.h> --soname lilv-0.so.0 --init-name lilv --output-header /home/sander/shoopdaloop/src/libshoopdaloop_backend/internal/lv2/lilv_wrappers_2.h --output-implementation /home/sander/shoopdaloop/src/libshoopdaloop_backend/internal/lv2/lilv_wrappers_2.c --ignore-other
//
// LCOV_EXCL_START

#include <stdint.h>

#define lilv_free lilv_free_dylibloader_orig_lilv
#define lilv_uri_to_path lilv_uri_to_path_dylibloader_orig_lilv
#define lilv_file_uri_parse lilv_file_uri_parse_dylibloader_orig_lilv
#define lilv_new_uri lilv_new_uri_dylibloader_orig_lilv
#define lilv_new_file_uri lilv_new_file_uri_dylibloader_orig_lilv
#define lilv_new_string lilv_new_string_dylibloader_orig_lilv
#define lilv_new_int lilv_new_int_dylibloader_orig_lilv
#define lilv_new_float lilv_new_float_dylibloader_orig_lilv
#define lilv_new_bool lilv_new_bool_dylibloader_orig_lilv
#define lilv_node_free lilv_node_free_dylibloader_orig_lilv
#define lilv_node_duplicate lilv_node_duplicate_dylibloader_orig_lilv
#define lilv_node_equals lilv_node_equals_dylibloader_orig_lilv
#define lilv_node_get_turtle_token lilv_node_get_turtle_token_dylibloader_orig_lilv
#define lilv_node_is_uri lilv_node_is_uri_dylibloader_orig_lilv
#define lilv_node_as_uri lilv_node_as_uri_dylibloader_orig_lilv
#define lilv_node_is_blank lilv_node_is_blank_dylibloader_orig_lilv
#define lilv_node_as_blank lilv_node_as_blank_dylibloader_orig_lilv
#define lilv_node_is_literal lilv_node_is_literal_dylibloader_orig_lilv
#define lilv_node_is_string lilv_node_is_string_dylibloader_orig_lilv
#define lilv_node_as_string lilv_node_as_string_dylibloader_orig_lilv
#define lilv_node_get_path lilv_node_get_path_dylibloader_orig_lilv
#define lilv_node_is_float lilv_node_is_float_dylibloader_orig_lilv
#define lilv_node_as_float lilv_node_as_float_dylibloader_orig_lilv
#define lilv_node_is_int lilv_node_is_int_dylibloader_orig_lilv
#define lilv_node_as_int lilv_node_as_int_dylibloader_orig_lilv
#define lilv_node_is_bool lilv_node_is_bool_dylibloader_orig_lilv
#define lilv_node_as_bool lilv_node_as_bool_dylibloader_orig_lilv
#define lilv_plugin_classes_free lilv_plugin_classes_free_dylibloader_orig_lilv
#define lilv_plugin_classes_size lilv_plugin_classes_size_dylibloader_orig_lilv
#define lilv_plugin_classes_begin lilv_plugin_classes_begin_dylibloader_orig_lilv
#define lilv_plugin_classes_get lilv_plugin_classes_get_dylibloader_orig_lilv
#define lilv_plugin_classes_next lilv_plugin_classes_next_dylibloader_orig_lilv
#define lilv_plugin_classes_is_end lilv_plugin_classes_is_end_dylibloader_orig_lilv
#define lilv_plugin_classes_get_by_uri lilv_plugin_classes_get_by_uri_dylibloader_orig_lilv
#define lilv_scale_points_free lilv_scale_points_free_dylibloader_orig_lilv
#define lilv_scale_points_size lilv_scale_points_size_dylibloader_orig_lilv
#define lilv_scale_points_begin lilv_scale_points_begin_dylibloader_orig_lilv
#define lilv_scale_points_get lilv_scale_points_get_dylibloader_orig_lilv
#define lilv_scale_points_next lilv_scale_points_next_dylibloader_orig_lilv
#define lilv_scale_points_is_end lilv_scale_points_is_end_dylibloader_orig_lilv
#define lilv_uis_free lilv_uis_free_dylibloader_orig_lilv
#define lilv_uis_size lilv_uis_size_dylibloader_orig_lilv
#define lilv_uis_begin lilv_uis_begin_dylibloader_orig_lilv
#define lilv_uis_get lilv_uis_get_dylibloader_orig_lilv
#define lilv_uis_next lilv_uis_next_dylibloader_orig_lilv
#define lilv_uis_is_end lilv_uis_is_end_dylibloader_orig_lilv
#define lilv_uis_get_by_uri lilv_uis_get_by_uri_dylibloader_orig_lilv
#define lilv_nodes_free lilv_nodes_free_dylibloader_orig_lilv
#define lilv_nodes_size lilv_nodes_size_dylibloader_orig_lilv
#define lilv_nodes_begin lilv_nodes_begin_dylibloader_orig_lilv
#define lilv_nodes_get lilv_nodes_get_dylibloader_orig_lilv
#define lilv_nodes_next lilv_nodes_next_dylibloader_orig_lilv
#define lilv_nodes_is_end lilv_nodes_is_end_dylibloader_orig_lilv
#define lilv_nodes_get_first lilv_nodes_get_first_dylibloader_orig_lilv
#define lilv_nodes_contains lilv_nodes_contains_dylibloader_orig_lilv
#define lilv_nodes_merge lilv_nodes_merge_dylibloader_orig_lilv
#define lilv_plugins_size lilv_plugins_size_dylibloader_orig_lilv
#define lilv_plugins_begin lilv_plugins_begin_dylibloader_orig_lilv
#define lilv_plugins_get lilv_plugins_get_dylibloader_orig_lilv
#define lilv_plugins_next lilv_plugins_next_dylibloader_orig_lilv
#define lilv_plugins_is_end lilv_plugins_is_end_dylibloader_orig_lilv
#define lilv_plugins_get_by_uri lilv_plugins_get_by_uri_dylibloader_orig_lilv
#define lilv_world_new lilv_world_new_dylibloader_orig_lilv
#define lilv_world_set_option lilv_world_set_option_dylibloader_orig_lilv
#define lilv_world_free lilv_world_free_dylibloader_orig_lilv
#define lilv_world_load_all lilv_world_load_all_dylibloader_orig_lilv
#define lilv_world_load_bundle lilv_world_load_bundle_dylibloader_orig_lilv
#define lilv_world_load_specifications lilv_world_load_specifications_dylibloader_orig_lilv
#define lilv_world_load_plugin_classes lilv_world_load_plugin_classes_dylibloader_orig_lilv
#define lilv_world_unload_bundle lilv_world_unload_bundle_dylibloader_orig_lilv
#define lilv_world_load_resource lilv_world_load_resource_dylibloader_orig_lilv
#define lilv_world_unload_resource lilv_world_unload_resource_dylibloader_orig_lilv
#define lilv_world_get_plugin_class lilv_world_get_plugin_class_dylibloader_orig_lilv
#define lilv_world_get_plugin_classes lilv_world_get_plugin_classes_dylibloader_orig_lilv
#define lilv_world_get_all_plugins lilv_world_get_all_plugins_dylibloader_orig_lilv
#define lilv_world_find_nodes lilv_world_find_nodes_dylibloader_orig_lilv
#define lilv_world_get lilv_world_get_dylibloader_orig_lilv
#define lilv_world_ask lilv_world_ask_dylibloader_orig_lilv
#define lilv_world_get_symbol lilv_world_get_symbol_dylibloader_orig_lilv
#define lilv_plugin_verify lilv_plugin_verify_dylibloader_orig_lilv
#define lilv_plugin_get_uri lilv_plugin_get_uri_dylibloader_orig_lilv
#define lilv_plugin_get_bundle_uri lilv_plugin_get_bundle_uri_dylibloader_orig_lilv
#define lilv_plugin_get_data_uris lilv_plugin_get_data_uris_dylibloader_orig_lilv
#define lilv_plugin_get_library_uri lilv_plugin_get_library_uri_dylibloader_orig_lilv
#define lilv_plugin_get_name lilv_plugin_get_name_dylibloader_orig_lilv
#define lilv_plugin_get_class lilv_plugin_get_class_dylibloader_orig_lilv
#define lilv_plugin_get_value lilv_plugin_get_value_dylibloader_orig_lilv
#define lilv_plugin_has_feature lilv_plugin_has_feature_dylibloader_orig_lilv
#define lilv_plugin_get_supported_features lilv_plugin_get_supported_features_dylibloader_orig_lilv
#define lilv_plugin_get_required_features lilv_plugin_get_required_features_dylibloader_orig_lilv
#define lilv_plugin_get_optional_features lilv_plugin_get_optional_features_dylibloader_orig_lilv
#define lilv_plugin_has_extension_data lilv_plugin_has_extension_data_dylibloader_orig_lilv
#define lilv_plugin_get_extension_data lilv_plugin_get_extension_data_dylibloader_orig_lilv
#define lilv_plugin_get_num_ports lilv_plugin_get_num_ports_dylibloader_orig_lilv
#define lilv_plugin_get_port_ranges_float lilv_plugin_get_port_ranges_float_dylibloader_orig_lilv
#define lilv_plugin_get_num_ports_of_class lilv_plugin_get_num_ports_of_class_dylibloader_orig_lilv
#define lilv_plugin_get_num_ports_of_class_va lilv_plugin_get_num_ports_of_class_va_dylibloader_orig_lilv
#define lilv_plugin_has_latency lilv_plugin_has_latency_dylibloader_orig_lilv
#define lilv_plugin_get_latency_port_index lilv_plugin_get_latency_port_index_dylibloader_orig_lilv
#define lilv_plugin_get_port_by_index lilv_plugin_get_port_by_index_dylibloader_orig_lilv
#define lilv_plugin_get_port_by_symbol lilv_plugin_get_port_by_symbol_dylibloader_orig_lilv
#define lilv_plugin_get_port_by_designation lilv_plugin_get_port_by_designation_dylibloader_orig_lilv
#define lilv_plugin_get_project lilv_plugin_get_project_dylibloader_orig_lilv
#define lilv_plugin_get_author_name lilv_plugin_get_author_name_dylibloader_orig_lilv
#define lilv_plugin_get_author_email lilv_plugin_get_author_email_dylibloader_orig_lilv
#define lilv_plugin_get_author_homepage lilv_plugin_get_author_homepage_dylibloader_orig_lilv
#define lilv_plugin_is_replaced lilv_plugin_is_replaced_dylibloader_orig_lilv
#define lilv_plugin_write_description lilv_plugin_write_description_dylibloader_orig_lilv
#define lilv_plugin_write_manifest_entry lilv_plugin_write_manifest_entry_dylibloader_orig_lilv
#define lilv_plugin_get_related lilv_plugin_get_related_dylibloader_orig_lilv
#define lilv_port_get_node lilv_port_get_node_dylibloader_orig_lilv
#define lilv_port_get_value lilv_port_get_value_dylibloader_orig_lilv
#define lilv_port_get lilv_port_get_dylibloader_orig_lilv
#define lilv_port_get_properties lilv_port_get_properties_dylibloader_orig_lilv
#define lilv_port_has_property lilv_port_has_property_dylibloader_orig_lilv
#define lilv_port_supports_event lilv_port_supports_event_dylibloader_orig_lilv
#define lilv_port_get_index lilv_port_get_index_dylibloader_orig_lilv
#define lilv_port_get_symbol lilv_port_get_symbol_dylibloader_orig_lilv
#define lilv_port_get_name lilv_port_get_name_dylibloader_orig_lilv
#define lilv_port_get_classes lilv_port_get_classes_dylibloader_orig_lilv
#define lilv_port_is_a lilv_port_is_a_dylibloader_orig_lilv
#define lilv_port_get_range lilv_port_get_range_dylibloader_orig_lilv
#define lilv_port_get_scale_points lilv_port_get_scale_points_dylibloader_orig_lilv
#define lilv_state_new_from_world lilv_state_new_from_world_dylibloader_orig_lilv
#define lilv_state_new_from_file lilv_state_new_from_file_dylibloader_orig_lilv
#define lilv_state_new_from_string lilv_state_new_from_string_dylibloader_orig_lilv
#define lilv_state_new_from_instance lilv_state_new_from_instance_dylibloader_orig_lilv
#define lilv_state_free lilv_state_free_dylibloader_orig_lilv
#define lilv_state_equals lilv_state_equals_dylibloader_orig_lilv
#define lilv_state_get_num_properties lilv_state_get_num_properties_dylibloader_orig_lilv
#define lilv_state_get_plugin_uri lilv_state_get_plugin_uri_dylibloader_orig_lilv
#define lilv_state_get_uri lilv_state_get_uri_dylibloader_orig_lilv
#define lilv_state_get_label lilv_state_get_label_dylibloader_orig_lilv
#define lilv_state_set_label lilv_state_set_label_dylibloader_orig_lilv
#define lilv_state_set_metadata lilv_state_set_metadata_dylibloader_orig_lilv
#define lilv_state_emit_port_values lilv_state_emit_port_values_dylibloader_orig_lilv
#define lilv_state_restore lilv_state_restore_dylibloader_orig_lilv
#define lilv_state_save lilv_state_save_dylibloader_orig_lilv
#define lilv_state_to_string lilv_state_to_string_dylibloader_orig_lilv
#define lilv_state_delete lilv_state_delete_dylibloader_orig_lilv
#define lilv_scale_point_get_label lilv_scale_point_get_label_dylibloader_orig_lilv
#define lilv_scale_point_get_value lilv_scale_point_get_value_dylibloader_orig_lilv
#define lilv_plugin_class_get_parent_uri lilv_plugin_class_get_parent_uri_dylibloader_orig_lilv
#define lilv_plugin_class_get_uri lilv_plugin_class_get_uri_dylibloader_orig_lilv
#define lilv_plugin_class_get_label lilv_plugin_class_get_label_dylibloader_orig_lilv
#define lilv_plugin_class_get_children lilv_plugin_class_get_children_dylibloader_orig_lilv
#define lilv_plugin_instantiate lilv_plugin_instantiate_dylibloader_orig_lilv
#define lilv_instance_free lilv_instance_free_dylibloader_orig_lilv
#define lilv_plugin_get_uis lilv_plugin_get_uis_dylibloader_orig_lilv
#define lilv_ui_get_uri lilv_ui_get_uri_dylibloader_orig_lilv
#define lilv_ui_get_classes lilv_ui_get_classes_dylibloader_orig_lilv
#define lilv_ui_is_a lilv_ui_is_a_dylibloader_orig_lilv
#define lilv_ui_is_supported lilv_ui_is_supported_dylibloader_orig_lilv
#define lilv_ui_get_bundle_uri lilv_ui_get_bundle_uri_dylibloader_orig_lilv
#define lilv_ui_get_binary_uri lilv_ui_get_binary_uri_dylibloader_orig_lilv
#include <lilv-0/lilv/lilv.h>
#undef lilv_free
#undef lilv_uri_to_path
#undef lilv_file_uri_parse
#undef lilv_new_uri
#undef lilv_new_file_uri
#undef lilv_new_string
#undef lilv_new_int
#undef lilv_new_float
#undef lilv_new_bool
#undef lilv_node_free
#undef lilv_node_duplicate
#undef lilv_node_equals
#undef lilv_node_get_turtle_token
#undef lilv_node_is_uri
#undef lilv_node_as_uri
#undef lilv_node_is_blank
#undef lilv_node_as_blank
#undef lilv_node_is_literal
#undef lilv_node_is_string
#undef lilv_node_as_string
#undef lilv_node_get_path
#undef lilv_node_is_float
#undef lilv_node_as_float
#undef lilv_node_is_int
#undef lilv_node_as_int
#undef lilv_node_is_bool
#undef lilv_node_as_bool
#undef lilv_plugin_classes_free
#undef lilv_plugin_classes_size
#undef lilv_plugin_classes_begin
#undef lilv_plugin_classes_get
#undef lilv_plugin_classes_next
#undef lilv_plugin_classes_is_end
#undef lilv_plugin_classes_get_by_uri
#undef lilv_scale_points_free
#undef lilv_scale_points_size
#undef lilv_scale_points_begin
#undef lilv_scale_points_get
#undef lilv_scale_points_next
#undef lilv_scale_points_is_end
#undef lilv_uis_free
#undef lilv_uis_size
#undef lilv_uis_begin
#undef lilv_uis_get
#undef lilv_uis_next
#undef lilv_uis_is_end
#undef lilv_uis_get_by_uri
#undef lilv_nodes_free
#undef lilv_nodes_size
#undef lilv_nodes_begin
#undef lilv_nodes_get
#undef lilv_nodes_next
#undef lilv_nodes_is_end
#undef lilv_nodes_get_first
#undef lilv_nodes_contains
#undef lilv_nodes_merge
#undef lilv_plugins_size
#undef lilv_plugins_begin
#undef lilv_plugins_get
#undef lilv_plugins_next
#undef lilv_plugins_is_end
#undef lilv_plugins_get_by_uri
#undef lilv_world_new
#undef lilv_world_set_option
#undef lilv_world_free
#undef lilv_world_load_all
#undef lilv_world_load_bundle
#undef lilv_world_load_specifications
#undef lilv_world_load_plugin_classes
#undef lilv_world_unload_bundle
#undef lilv_world_load_resource
#undef lilv_world_unload_resource
#undef lilv_world_get_plugin_class
#undef lilv_world_get_plugin_classes
#undef lilv_world_get_all_plugins
#undef lilv_world_find_nodes
#undef lilv_world_get
#undef lilv_world_ask
#undef lilv_world_get_symbol
#undef lilv_plugin_verify
#undef lilv_plugin_get_uri
#undef lilv_plugin_get_bundle_uri
#undef lilv_plugin_get_data_uris
#undef lilv_plugin_get_library_uri
#undef lilv_plugin_get_name
#undef lilv_plugin_get_class
#undef lilv_plugin_get_value
#undef lilv_plugin_has_feature
#undef lilv_plugin_get_supported_features
#undef lilv_plugin_get_required_features
#undef lilv_plugin_get_optional_features
#undef lilv_plugin_has_extension_data
#undef lilv_plugin_get_extension_data
#undef lilv_plugin_get_num_ports
#undef lilv_plugin_get_port_ranges_float
#undef lilv_plugin_get_num_ports_of_class
#undef lilv_plugin_get_num_ports_of_class_va
#undef lilv_plugin_has_latency
#undef lilv_plugin_get_latency_port_index
#undef lilv_plugin_get_port_by_index
#undef lilv_plugin_get_port_by_symbol
#undef lilv_plugin_get_port_by_designation
#undef lilv_plugin_get_project
#undef lilv_plugin_get_author_name
#undef lilv_plugin_get_author_email
#undef lilv_plugin_get_author_homepage
#undef lilv_plugin_is_replaced
#undef lilv_plugin_write_description
#undef lilv_plugin_write_manifest_entry
#undef lilv_plugin_get_related
#undef lilv_port_get_node
#undef lilv_port_get_value
#undef lilv_port_get
#undef lilv_port_get_properties
#undef lilv_port_has_property
#undef lilv_port_supports_event
#undef lilv_port_get_index
#undef lilv_port_get_symbol
#undef lilv_port_get_name
#undef lilv_port_get_classes
#undef lilv_port_is_a
#undef lilv_port_get_range
#undef lilv_port_get_scale_points
#undef lilv_state_new_from_world
#undef lilv_state_new_from_file
#undef lilv_state_new_from_string
#undef lilv_state_new_from_instance
#undef lilv_state_free
#undef lilv_state_equals
#undef lilv_state_get_num_properties
#undef lilv_state_get_plugin_uri
#undef lilv_state_get_uri
#undef lilv_state_get_label
#undef lilv_state_set_label
#undef lilv_state_set_metadata
#undef lilv_state_emit_port_values
#undef lilv_state_restore
#undef lilv_state_save
#undef lilv_state_to_string
#undef lilv_state_delete
#undef lilv_scale_point_get_label
#undef lilv_scale_point_get_value
#undef lilv_plugin_class_get_parent_uri
#undef lilv_plugin_class_get_uri
#undef lilv_plugin_class_get_label
#undef lilv_plugin_class_get_children
#undef lilv_plugin_instantiate
#undef lilv_instance_free
#undef lilv_plugin_get_uis
#undef lilv_ui_get_uri
#undef lilv_ui_get_classes
#undef lilv_ui_is_a
#undef lilv_ui_is_supported
#undef lilv_ui_get_bundle_uri
#undef lilv_ui_get_binary_uri
#ifdef __cplusplus
extern "C" {
#endif
#define lilv_free lilv_free_dylibloader_wrapper_lilv
#define lilv_uri_to_path lilv_uri_to_path_dylibloader_wrapper_lilv
#define lilv_file_uri_parse lilv_file_uri_parse_dylibloader_wrapper_lilv
#define lilv_new_uri lilv_new_uri_dylibloader_wrapper_lilv
#define lilv_new_file_uri lilv_new_file_uri_dylibloader_wrapper_lilv
#define lilv_new_string lilv_new_string_dylibloader_wrapper_lilv
#define lilv_new_int lilv_new_int_dylibloader_wrapper_lilv
#define lilv_new_float lilv_new_float_dylibloader_wrapper_lilv
#define lilv_new_bool lilv_new_bool_dylibloader_wrapper_lilv
#define lilv_node_free lilv_node_free_dylibloader_wrapper_lilv
#define lilv_node_duplicate lilv_node_duplicate_dylibloader_wrapper_lilv
#define lilv_node_equals lilv_node_equals_dylibloader_wrapper_lilv
#define lilv_node_get_turtle_token lilv_node_get_turtle_token_dylibloader_wrapper_lilv
#define lilv_node_is_uri lilv_node_is_uri_dylibloader_wrapper_lilv
#define lilv_node_as_uri lilv_node_as_uri_dylibloader_wrapper_lilv
#define lilv_node_is_blank lilv_node_is_blank_dylibloader_wrapper_lilv
#define lilv_node_as_blank lilv_node_as_blank_dylibloader_wrapper_lilv
#define lilv_node_is_literal lilv_node_is_literal_dylibloader_wrapper_lilv
#define lilv_node_is_string lilv_node_is_string_dylibloader_wrapper_lilv
#define lilv_node_as_string lilv_node_as_string_dylibloader_wrapper_lilv
#define lilv_node_get_path lilv_node_get_path_dylibloader_wrapper_lilv
#define lilv_node_is_float lilv_node_is_float_dylibloader_wrapper_lilv
#define lilv_node_as_float lilv_node_as_float_dylibloader_wrapper_lilv
#define lilv_node_is_int lilv_node_is_int_dylibloader_wrapper_lilv
#define lilv_node_as_int lilv_node_as_int_dylibloader_wrapper_lilv
#define lilv_node_is_bool lilv_node_is_bool_dylibloader_wrapper_lilv
#define lilv_node_as_bool lilv_node_as_bool_dylibloader_wrapper_lilv
#define lilv_plugin_classes_free lilv_plugin_classes_free_dylibloader_wrapper_lilv
#define lilv_plugin_classes_size lilv_plugin_classes_size_dylibloader_wrapper_lilv
#define lilv_plugin_classes_begin lilv_plugin_classes_begin_dylibloader_wrapper_lilv
#define lilv_plugin_classes_get lilv_plugin_classes_get_dylibloader_wrapper_lilv
#define lilv_plugin_classes_next lilv_plugin_classes_next_dylibloader_wrapper_lilv
#define lilv_plugin_classes_is_end lilv_plugin_classes_is_end_dylibloader_wrapper_lilv
#define lilv_plugin_classes_get_by_uri lilv_plugin_classes_get_by_uri_dylibloader_wrapper_lilv
#define lilv_scale_points_free lilv_scale_points_free_dylibloader_wrapper_lilv
#define lilv_scale_points_size lilv_scale_points_size_dylibloader_wrapper_lilv
#define lilv_scale_points_begin lilv_scale_points_begin_dylibloader_wrapper_lilv
#define lilv_scale_points_get lilv_scale_points_get_dylibloader_wrapper_lilv
#define lilv_scale_points_next lilv_scale_points_next_dylibloader_wrapper_lilv
#define lilv_scale_points_is_end lilv_scale_points_is_end_dylibloader_wrapper_lilv
#define lilv_uis_free lilv_uis_free_dylibloader_wrapper_lilv
#define lilv_uis_size lilv_uis_size_dylibloader_wrapper_lilv
#define lilv_uis_begin lilv_uis_begin_dylibloader_wrapper_lilv
#define lilv_uis_get lilv_uis_get_dylibloader_wrapper_lilv
#define lilv_uis_next lilv_uis_next_dylibloader_wrapper_lilv
#define lilv_uis_is_end lilv_uis_is_end_dylibloader_wrapper_lilv
#define lilv_uis_get_by_uri lilv_uis_get_by_uri_dylibloader_wrapper_lilv
#define lilv_nodes_free lilv_nodes_free_dylibloader_wrapper_lilv
#define lilv_nodes_size lilv_nodes_size_dylibloader_wrapper_lilv
#define lilv_nodes_begin lilv_nodes_begin_dylibloader_wrapper_lilv
#define lilv_nodes_get lilv_nodes_get_dylibloader_wrapper_lilv
#define lilv_nodes_next lilv_nodes_next_dylibloader_wrapper_lilv
#define lilv_nodes_is_end lilv_nodes_is_end_dylibloader_wrapper_lilv
#define lilv_nodes_get_first lilv_nodes_get_first_dylibloader_wrapper_lilv
#define lilv_nodes_contains lilv_nodes_contains_dylibloader_wrapper_lilv
#define lilv_nodes_merge lilv_nodes_merge_dylibloader_wrapper_lilv
#define lilv_plugins_size lilv_plugins_size_dylibloader_wrapper_lilv
#define lilv_plugins_begin lilv_plugins_begin_dylibloader_wrapper_lilv
#define lilv_plugins_get lilv_plugins_get_dylibloader_wrapper_lilv
#define lilv_plugins_next lilv_plugins_next_dylibloader_wrapper_lilv
#define lilv_plugins_is_end lilv_plugins_is_end_dylibloader_wrapper_lilv
#define lilv_plugins_get_by_uri lilv_plugins_get_by_uri_dylibloader_wrapper_lilv
#define lilv_world_new lilv_world_new_dylibloader_wrapper_lilv
#define lilv_world_set_option lilv_world_set_option_dylibloader_wrapper_lilv
#define lilv_world_free lilv_world_free_dylibloader_wrapper_lilv
#define lilv_world_load_all lilv_world_load_all_dylibloader_wrapper_lilv
#define lilv_world_load_bundle lilv_world_load_bundle_dylibloader_wrapper_lilv
#define lilv_world_load_specifications lilv_world_load_specifications_dylibloader_wrapper_lilv
#define lilv_world_load_plugin_classes lilv_world_load_plugin_classes_dylibloader_wrapper_lilv
#define lilv_world_unload_bundle lilv_world_unload_bundle_dylibloader_wrapper_lilv
#define lilv_world_load_resource lilv_world_load_resource_dylibloader_wrapper_lilv
#define lilv_world_unload_resource lilv_world_unload_resource_dylibloader_wrapper_lilv
#define lilv_world_get_plugin_class lilv_world_get_plugin_class_dylibloader_wrapper_lilv
#define lilv_world_get_plugin_classes lilv_world_get_plugin_classes_dylibloader_wrapper_lilv
#define lilv_world_get_all_plugins lilv_world_get_all_plugins_dylibloader_wrapper_lilv
#define lilv_world_find_nodes lilv_world_find_nodes_dylibloader_wrapper_lilv
#define lilv_world_get lilv_world_get_dylibloader_wrapper_lilv
#define lilv_world_ask lilv_world_ask_dylibloader_wrapper_lilv
#define lilv_world_get_symbol lilv_world_get_symbol_dylibloader_wrapper_lilv
#define lilv_plugin_verify lilv_plugin_verify_dylibloader_wrapper_lilv
#define lilv_plugin_get_uri lilv_plugin_get_uri_dylibloader_wrapper_lilv
#define lilv_plugin_get_bundle_uri lilv_plugin_get_bundle_uri_dylibloader_wrapper_lilv
#define lilv_plugin_get_data_uris lilv_plugin_get_data_uris_dylibloader_wrapper_lilv
#define lilv_plugin_get_library_uri lilv_plugin_get_library_uri_dylibloader_wrapper_lilv
#define lilv_plugin_get_name lilv_plugin_get_name_dylibloader_wrapper_lilv
#define lilv_plugin_get_class lilv_plugin_get_class_dylibloader_wrapper_lilv
#define lilv_plugin_get_value lilv_plugin_get_value_dylibloader_wrapper_lilv
#define lilv_plugin_has_feature lilv_plugin_has_feature_dylibloader_wrapper_lilv
#define lilv_plugin_get_supported_features lilv_plugin_get_supported_features_dylibloader_wrapper_lilv
#define lilv_plugin_get_required_features lilv_plugin_get_required_features_dylibloader_wrapper_lilv
#define lilv_plugin_get_optional_features lilv_plugin_get_optional_features_dylibloader_wrapper_lilv
#define lilv_plugin_has_extension_data lilv_plugin_has_extension_data_dylibloader_wrapper_lilv
#define lilv_plugin_get_extension_data lilv_plugin_get_extension_data_dylibloader_wrapper_lilv
#define lilv_plugin_get_num_ports lilv_plugin_get_num_ports_dylibloader_wrapper_lilv
#define lilv_plugin_get_port_ranges_float lilv_plugin_get_port_ranges_float_dylibloader_wrapper_lilv
#define lilv_plugin_get_num_ports_of_class lilv_plugin_get_num_ports_of_class_dylibloader_wrapper_lilv
#define lilv_plugin_get_num_ports_of_class_va lilv_plugin_get_num_ports_of_class_va_dylibloader_wrapper_lilv
#define lilv_plugin_has_latency lilv_plugin_has_latency_dylibloader_wrapper_lilv
#define lilv_plugin_get_latency_port_index lilv_plugin_get_latency_port_index_dylibloader_wrapper_lilv
#define lilv_plugin_get_port_by_index lilv_plugin_get_port_by_index_dylibloader_wrapper_lilv
#define lilv_plugin_get_port_by_symbol lilv_plugin_get_port_by_symbol_dylibloader_wrapper_lilv
#define lilv_plugin_get_port_by_designation lilv_plugin_get_port_by_designation_dylibloader_wrapper_lilv
#define lilv_plugin_get_project lilv_plugin_get_project_dylibloader_wrapper_lilv
#define lilv_plugin_get_author_name lilv_plugin_get_author_name_dylibloader_wrapper_lilv
#define lilv_plugin_get_author_email lilv_plugin_get_author_email_dylibloader_wrapper_lilv
#define lilv_plugin_get_author_homepage lilv_plugin_get_author_homepage_dylibloader_wrapper_lilv
#define lilv_plugin_is_replaced lilv_plugin_is_replaced_dylibloader_wrapper_lilv
#define lilv_plugin_write_description lilv_plugin_write_description_dylibloader_wrapper_lilv
#define lilv_plugin_write_manifest_entry lilv_plugin_write_manifest_entry_dylibloader_wrapper_lilv
#define lilv_plugin_get_related lilv_plugin_get_related_dylibloader_wrapper_lilv
#define lilv_port_get_node lilv_port_get_node_dylibloader_wrapper_lilv
#define lilv_port_get_value lilv_port_get_value_dylibloader_wrapper_lilv
#define lilv_port_get lilv_port_get_dylibloader_wrapper_lilv
#define lilv_port_get_properties lilv_port_get_properties_dylibloader_wrapper_lilv
#define lilv_port_has_property lilv_port_has_property_dylibloader_wrapper_lilv
#define lilv_port_supports_event lilv_port_supports_event_dylibloader_wrapper_lilv
#define lilv_port_get_index lilv_port_get_index_dylibloader_wrapper_lilv
#define lilv_port_get_symbol lilv_port_get_symbol_dylibloader_wrapper_lilv
#define lilv_port_get_name lilv_port_get_name_dylibloader_wrapper_lilv
#define lilv_port_get_classes lilv_port_get_classes_dylibloader_wrapper_lilv
#define lilv_port_is_a lilv_port_is_a_dylibloader_wrapper_lilv
#define lilv_port_get_range lilv_port_get_range_dylibloader_wrapper_lilv
#define lilv_port_get_scale_points lilv_port_get_scale_points_dylibloader_wrapper_lilv
#define lilv_state_new_from_world lilv_state_new_from_world_dylibloader_wrapper_lilv
#define lilv_state_new_from_file lilv_state_new_from_file_dylibloader_wrapper_lilv
#define lilv_state_new_from_string lilv_state_new_from_string_dylibloader_wrapper_lilv
#define lilv_state_new_from_instance lilv_state_new_from_instance_dylibloader_wrapper_lilv
#define lilv_state_free lilv_state_free_dylibloader_wrapper_lilv
#define lilv_state_equals lilv_state_equals_dylibloader_wrapper_lilv
#define lilv_state_get_num_properties lilv_state_get_num_properties_dylibloader_wrapper_lilv
#define lilv_state_get_plugin_uri lilv_state_get_plugin_uri_dylibloader_wrapper_lilv
#define lilv_state_get_uri lilv_state_get_uri_dylibloader_wrapper_lilv
#define lilv_state_get_label lilv_state_get_label_dylibloader_wrapper_lilv
#define lilv_state_set_label lilv_state_set_label_dylibloader_wrapper_lilv
#define lilv_state_set_metadata lilv_state_set_metadata_dylibloader_wrapper_lilv
#define lilv_state_emit_port_values lilv_state_emit_port_values_dylibloader_wrapper_lilv
#define lilv_state_restore lilv_state_restore_dylibloader_wrapper_lilv
#define lilv_state_save lilv_state_save_dylibloader_wrapper_lilv
#define lilv_state_to_string lilv_state_to_string_dylibloader_wrapper_lilv
#define lilv_state_delete lilv_state_delete_dylibloader_wrapper_lilv
#define lilv_scale_point_get_label lilv_scale_point_get_label_dylibloader_wrapper_lilv
#define lilv_scale_point_get_value lilv_scale_point_get_value_dylibloader_wrapper_lilv
#define lilv_plugin_class_get_parent_uri lilv_plugin_class_get_parent_uri_dylibloader_wrapper_lilv
#define lilv_plugin_class_get_uri lilv_plugin_class_get_uri_dylibloader_wrapper_lilv
#define lilv_plugin_class_get_label lilv_plugin_class_get_label_dylibloader_wrapper_lilv
#define lilv_plugin_class_get_children lilv_plugin_class_get_children_dylibloader_wrapper_lilv
#define lilv_plugin_instantiate lilv_plugin_instantiate_dylibloader_wrapper_lilv
#define lilv_instance_free lilv_instance_free_dylibloader_wrapper_lilv
#define lilv_plugin_get_uis lilv_plugin_get_uis_dylibloader_wrapper_lilv
#define lilv_ui_get_uri lilv_ui_get_uri_dylibloader_wrapper_lilv
#define lilv_ui_get_classes lilv_ui_get_classes_dylibloader_wrapper_lilv
#define lilv_ui_is_a lilv_ui_is_a_dylibloader_wrapper_lilv
#define lilv_ui_is_supported lilv_ui_is_supported_dylibloader_wrapper_lilv
#define lilv_ui_get_bundle_uri lilv_ui_get_bundle_uri_dylibloader_wrapper_lilv
#define lilv_ui_get_binary_uri lilv_ui_get_binary_uri_dylibloader_wrapper_lilv
extern void (*lilv_free_dylibloader_wrapper_lilv)(void *);
extern const char *(*lilv_uri_to_path_dylibloader_wrapper_lilv)(const char *);
extern char *(*lilv_file_uri_parse_dylibloader_wrapper_lilv)(const char *, char **);
extern LilvNode *(*lilv_new_uri_dylibloader_wrapper_lilv)(LilvWorld *, const char *);
extern LilvNode *(*lilv_new_file_uri_dylibloader_wrapper_lilv)(LilvWorld *, const char *, const char *);
extern LilvNode *(*lilv_new_string_dylibloader_wrapper_lilv)(LilvWorld *, const char *);
extern LilvNode *(*lilv_new_int_dylibloader_wrapper_lilv)(LilvWorld *, int);
extern LilvNode *(*lilv_new_float_dylibloader_wrapper_lilv)(LilvWorld *, float);
extern LilvNode *(*lilv_new_bool_dylibloader_wrapper_lilv)(LilvWorld *, bool);
extern void (*lilv_node_free_dylibloader_wrapper_lilv)(LilvNode *);
extern LilvNode *(*lilv_node_duplicate_dylibloader_wrapper_lilv)(const LilvNode *);
extern bool (*lilv_node_equals_dylibloader_wrapper_lilv)(const LilvNode *, const LilvNode *);
extern char *(*lilv_node_get_turtle_token_dylibloader_wrapper_lilv)(const LilvNode *);
extern bool (*lilv_node_is_uri_dylibloader_wrapper_lilv)(const LilvNode *);
extern const char *(*lilv_node_as_uri_dylibloader_wrapper_lilv)(const LilvNode *);
extern bool (*lilv_node_is_blank_dylibloader_wrapper_lilv)(const LilvNode *);
extern const char *(*lilv_node_as_blank_dylibloader_wrapper_lilv)(const LilvNode *);
extern bool (*lilv_node_is_literal_dylibloader_wrapper_lilv)(const LilvNode *);
extern bool (*lilv_node_is_string_dylibloader_wrapper_lilv)(const LilvNode *);
extern const char *(*lilv_node_as_string_dylibloader_wrapper_lilv)(const LilvNode *);
extern char *(*lilv_node_get_path_dylibloader_wrapper_lilv)(const LilvNode *, char **);
extern bool (*lilv_node_is_float_dylibloader_wrapper_lilv)(const LilvNode *);
extern float (*lilv_node_as_float_dylibloader_wrapper_lilv)(const LilvNode *);
extern bool (*lilv_node_is_int_dylibloader_wrapper_lilv)(const LilvNode *);
extern int (*lilv_node_as_int_dylibloader_wrapper_lilv)(const LilvNode *);
extern bool (*lilv_node_is_bool_dylibloader_wrapper_lilv)(const LilvNode *);
extern bool (*lilv_node_as_bool_dylibloader_wrapper_lilv)(const LilvNode *);
extern void (*lilv_plugin_classes_free_dylibloader_wrapper_lilv)(LilvPluginClasses *);
extern unsigned (*lilv_plugin_classes_size_dylibloader_wrapper_lilv)(const LilvPluginClasses *);
extern LilvIter *(*lilv_plugin_classes_begin_dylibloader_wrapper_lilv)(const LilvPluginClasses *);
extern const LilvPluginClass *(*lilv_plugin_classes_get_dylibloader_wrapper_lilv)(const LilvPluginClasses *, LilvIter *);
extern LilvIter *(*lilv_plugin_classes_next_dylibloader_wrapper_lilv)(const LilvPluginClasses *, LilvIter *);
extern bool (*lilv_plugin_classes_is_end_dylibloader_wrapper_lilv)(const LilvPluginClasses *, LilvIter *);
extern const LilvPluginClass *(*lilv_plugin_classes_get_by_uri_dylibloader_wrapper_lilv)(const LilvPluginClasses *, const LilvNode *);
extern void (*lilv_scale_points_free_dylibloader_wrapper_lilv)(LilvScalePoints *);
extern unsigned (*lilv_scale_points_size_dylibloader_wrapper_lilv)(const LilvScalePoints *);
extern LilvIter *(*lilv_scale_points_begin_dylibloader_wrapper_lilv)(const LilvScalePoints *);
extern const LilvScalePoint *(*lilv_scale_points_get_dylibloader_wrapper_lilv)(const LilvScalePoints *, LilvIter *);
extern LilvIter *(*lilv_scale_points_next_dylibloader_wrapper_lilv)(const LilvScalePoints *, LilvIter *);
extern bool (*lilv_scale_points_is_end_dylibloader_wrapper_lilv)(const LilvScalePoints *, LilvIter *);
extern void (*lilv_uis_free_dylibloader_wrapper_lilv)(LilvUIs *);
extern unsigned (*lilv_uis_size_dylibloader_wrapper_lilv)(const LilvUIs *);
extern LilvIter *(*lilv_uis_begin_dylibloader_wrapper_lilv)(const LilvUIs *);
extern const LilvUI *(*lilv_uis_get_dylibloader_wrapper_lilv)(const LilvUIs *, LilvIter *);
extern LilvIter *(*lilv_uis_next_dylibloader_wrapper_lilv)(const LilvUIs *, LilvIter *);
extern bool (*lilv_uis_is_end_dylibloader_wrapper_lilv)(const LilvUIs *, LilvIter *);
extern const LilvUI *(*lilv_uis_get_by_uri_dylibloader_wrapper_lilv)(const LilvUIs *, const LilvNode *);
extern void (*lilv_nodes_free_dylibloader_wrapper_lilv)(LilvNodes *);
extern unsigned (*lilv_nodes_size_dylibloader_wrapper_lilv)(const LilvNodes *);
extern LilvIter *(*lilv_nodes_begin_dylibloader_wrapper_lilv)(const LilvNodes *);
extern const LilvNode *(*lilv_nodes_get_dylibloader_wrapper_lilv)(const LilvNodes *, LilvIter *);
extern LilvIter *(*lilv_nodes_next_dylibloader_wrapper_lilv)(const LilvNodes *, LilvIter *);
extern bool (*lilv_nodes_is_end_dylibloader_wrapper_lilv)(const LilvNodes *, LilvIter *);
extern LilvNode *(*lilv_nodes_get_first_dylibloader_wrapper_lilv)(const LilvNodes *);
extern bool (*lilv_nodes_contains_dylibloader_wrapper_lilv)(const LilvNodes *, const LilvNode *);
extern LilvNodes *(*lilv_nodes_merge_dylibloader_wrapper_lilv)(const LilvNodes *, const LilvNodes *);
extern unsigned (*lilv_plugins_size_dylibloader_wrapper_lilv)(const LilvPlugins *);
extern LilvIter *(*lilv_plugins_begin_dylibloader_wrapper_lilv)(const LilvPlugins *);
extern const LilvPlugin *(*lilv_plugins_get_dylibloader_wrapper_lilv)(const LilvPlugins *, LilvIter *);
extern LilvIter *(*lilv_plugins_next_dylibloader_wrapper_lilv)(const LilvPlugins *, LilvIter *);
extern bool (*lilv_plugins_is_end_dylibloader_wrapper_lilv)(const LilvPlugins *, LilvIter *);
extern const LilvPlugin *(*lilv_plugins_get_by_uri_dylibloader_wrapper_lilv)(const LilvPlugins *, const LilvNode *);
extern LilvWorld *(*lilv_world_new_dylibloader_wrapper_lilv)(void);
extern void (*lilv_world_set_option_dylibloader_wrapper_lilv)(LilvWorld *, const char *, const LilvNode *);
extern void (*lilv_world_free_dylibloader_wrapper_lilv)(LilvWorld *);
extern void (*lilv_world_load_all_dylibloader_wrapper_lilv)(LilvWorld *);
extern void (*lilv_world_load_bundle_dylibloader_wrapper_lilv)(LilvWorld *, const LilvNode *);
extern void (*lilv_world_load_specifications_dylibloader_wrapper_lilv)(LilvWorld *);
extern void (*lilv_world_load_plugin_classes_dylibloader_wrapper_lilv)(LilvWorld *);
extern int (*lilv_world_unload_bundle_dylibloader_wrapper_lilv)(LilvWorld *, const LilvNode *);
extern int (*lilv_world_load_resource_dylibloader_wrapper_lilv)(LilvWorld *, const LilvNode *);
extern int (*lilv_world_unload_resource_dylibloader_wrapper_lilv)(LilvWorld *, const LilvNode *);
extern const LilvPluginClass *(*lilv_world_get_plugin_class_dylibloader_wrapper_lilv)(const LilvWorld *);
extern const LilvPluginClasses *(*lilv_world_get_plugin_classes_dylibloader_wrapper_lilv)(const LilvWorld *);
extern const LilvPlugins *(*lilv_world_get_all_plugins_dylibloader_wrapper_lilv)(const LilvWorld *);
extern LilvNodes *(*lilv_world_find_nodes_dylibloader_wrapper_lilv)(LilvWorld *, const LilvNode *, const LilvNode *, const LilvNode *);
extern LilvNode *(*lilv_world_get_dylibloader_wrapper_lilv)(LilvWorld *, const LilvNode *, const LilvNode *, const LilvNode *);
extern bool (*lilv_world_ask_dylibloader_wrapper_lilv)(LilvWorld *, const LilvNode *, const LilvNode *, const LilvNode *);
extern LilvNode *(*lilv_world_get_symbol_dylibloader_wrapper_lilv)(LilvWorld *, const LilvNode *);
extern bool (*lilv_plugin_verify_dylibloader_wrapper_lilv)(const LilvPlugin *);
extern const LilvNode *(*lilv_plugin_get_uri_dylibloader_wrapper_lilv)(const LilvPlugin *);
extern const LilvNode *(*lilv_plugin_get_bundle_uri_dylibloader_wrapper_lilv)(const LilvPlugin *);
extern const LilvNodes *(*lilv_plugin_get_data_uris_dylibloader_wrapper_lilv)(const LilvPlugin *);
extern const LilvNode *(*lilv_plugin_get_library_uri_dylibloader_wrapper_lilv)(const LilvPlugin *);
extern LilvNode *(*lilv_plugin_get_name_dylibloader_wrapper_lilv)(const LilvPlugin *);
extern const LilvPluginClass *(*lilv_plugin_get_class_dylibloader_wrapper_lilv)(const LilvPlugin *);
extern LilvNodes *(*lilv_plugin_get_value_dylibloader_wrapper_lilv)(const LilvPlugin *, const LilvNode *);
extern bool (*lilv_plugin_has_feature_dylibloader_wrapper_lilv)(const LilvPlugin *, const LilvNode *);
extern LilvNodes *(*lilv_plugin_get_supported_features_dylibloader_wrapper_lilv)(const LilvPlugin *);
extern LilvNodes *(*lilv_plugin_get_required_features_dylibloader_wrapper_lilv)(const LilvPlugin *);
extern LilvNodes *(*lilv_plugin_get_optional_features_dylibloader_wrapper_lilv)(const LilvPlugin *);
extern bool (*lilv_plugin_has_extension_data_dylibloader_wrapper_lilv)(const LilvPlugin *, const LilvNode *);
extern LilvNodes *(*lilv_plugin_get_extension_data_dylibloader_wrapper_lilv)(const LilvPlugin *);
extern uint32_t (*lilv_plugin_get_num_ports_dylibloader_wrapper_lilv)(const LilvPlugin *);
extern void (*lilv_plugin_get_port_ranges_float_dylibloader_wrapper_lilv)(const LilvPlugin *, float *, float *, float *);
extern uint32_t (*lilv_plugin_get_num_ports_of_class_dylibloader_wrapper_lilv)(const LilvPlugin *, const LilvNode *, ...);
extern uint32_t (*lilv_plugin_get_num_ports_of_class_va_dylibloader_wrapper_lilv)(const LilvPlugin *, const LilvNode *, va_list);
extern bool (*lilv_plugin_has_latency_dylibloader_wrapper_lilv)(const LilvPlugin *);
extern uint32_t (*lilv_plugin_get_latency_port_index_dylibloader_wrapper_lilv)(const LilvPlugin *);
extern const LilvPort *(*lilv_plugin_get_port_by_index_dylibloader_wrapper_lilv)(const LilvPlugin *, uint32_t);
extern const LilvPort *(*lilv_plugin_get_port_by_symbol_dylibloader_wrapper_lilv)(const LilvPlugin *, const LilvNode *);
extern const LilvPort *(*lilv_plugin_get_port_by_designation_dylibloader_wrapper_lilv)(const LilvPlugin *, const LilvNode *, const LilvNode *);
extern LilvNode *(*lilv_plugin_get_project_dylibloader_wrapper_lilv)(const LilvPlugin *);
extern LilvNode *(*lilv_plugin_get_author_name_dylibloader_wrapper_lilv)(const LilvPlugin *);
extern LilvNode *(*lilv_plugin_get_author_email_dylibloader_wrapper_lilv)(const LilvPlugin *);
extern LilvNode *(*lilv_plugin_get_author_homepage_dylibloader_wrapper_lilv)(const LilvPlugin *);
extern bool (*lilv_plugin_is_replaced_dylibloader_wrapper_lilv)(const LilvPlugin *);
extern void (*lilv_plugin_write_description_dylibloader_wrapper_lilv)(LilvWorld *, const LilvPlugin *, const LilvNode *, FILE *);
extern void (*lilv_plugin_write_manifest_entry_dylibloader_wrapper_lilv)(LilvWorld *, const LilvPlugin *, const LilvNode *, FILE *, const char *);
extern LilvNodes *(*lilv_plugin_get_related_dylibloader_wrapper_lilv)(const LilvPlugin *, const LilvNode *);
extern const LilvNode *(*lilv_port_get_node_dylibloader_wrapper_lilv)(const LilvPlugin *, const LilvPort *);
extern LilvNodes *(*lilv_port_get_value_dylibloader_wrapper_lilv)(const LilvPlugin *, const LilvPort *, const LilvNode *);
extern LilvNode *(*lilv_port_get_dylibloader_wrapper_lilv)(const LilvPlugin *, const LilvPort *, const LilvNode *);
extern LilvNodes *(*lilv_port_get_properties_dylibloader_wrapper_lilv)(const LilvPlugin *, const LilvPort *);
extern bool (*lilv_port_has_property_dylibloader_wrapper_lilv)(const LilvPlugin *, const LilvPort *, const LilvNode *);
extern bool (*lilv_port_supports_event_dylibloader_wrapper_lilv)(const LilvPlugin *, const LilvPort *, const LilvNode *);
extern uint32_t (*lilv_port_get_index_dylibloader_wrapper_lilv)(const LilvPlugin *, const LilvPort *);
extern const LilvNode *(*lilv_port_get_symbol_dylibloader_wrapper_lilv)(const LilvPlugin *, const LilvPort *);
extern LilvNode *(*lilv_port_get_name_dylibloader_wrapper_lilv)(const LilvPlugin *, const LilvPort *);
extern const LilvNodes *(*lilv_port_get_classes_dylibloader_wrapper_lilv)(const LilvPlugin *, const LilvPort *);
extern bool (*lilv_port_is_a_dylibloader_wrapper_lilv)(const LilvPlugin *, const LilvPort *, const LilvNode *);
extern void (*lilv_port_get_range_dylibloader_wrapper_lilv)(const LilvPlugin *, const LilvPort *, LilvNode **, LilvNode **, LilvNode **);
extern LilvScalePoints *(*lilv_port_get_scale_points_dylibloader_wrapper_lilv)(const LilvPlugin *, const LilvPort *);
extern LilvState *(*lilv_state_new_from_world_dylibloader_wrapper_lilv)(LilvWorld *, LV2_URID_Map *, const LilvNode *);
extern LilvState *(*lilv_state_new_from_file_dylibloader_wrapper_lilv)(LilvWorld *, LV2_URID_Map *, const LilvNode *, const char *);
extern LilvState *(*lilv_state_new_from_string_dylibloader_wrapper_lilv)(LilvWorld *, LV2_URID_Map *, const char *);
extern LilvState *(*lilv_state_new_from_instance_dylibloader_wrapper_lilv)(const LilvPlugin *, LilvInstance *, LV2_URID_Map *, const char *, const char *, const char *, const char *, LilvGetPortValueFunc, void *, uint32_t, const LV2_Feature * const *);
extern void (*lilv_state_free_dylibloader_wrapper_lilv)(LilvState *);
extern bool (*lilv_state_equals_dylibloader_wrapper_lilv)(const LilvState *, const LilvState *);
extern unsigned (*lilv_state_get_num_properties_dylibloader_wrapper_lilv)(const LilvState *);
extern const LilvNode *(*lilv_state_get_plugin_uri_dylibloader_wrapper_lilv)(const LilvState *);
extern const LilvNode *(*lilv_state_get_uri_dylibloader_wrapper_lilv)(const LilvState *);
extern const char *(*lilv_state_get_label_dylibloader_wrapper_lilv)(const LilvState *);
extern void (*lilv_state_set_label_dylibloader_wrapper_lilv)(LilvState *, const char *);
extern int (*lilv_state_set_metadata_dylibloader_wrapper_lilv)(LilvState *, uint32_t, const void *, size_t, uint32_t, uint32_t);
extern void (*lilv_state_emit_port_values_dylibloader_wrapper_lilv)(const LilvState *, LilvSetPortValueFunc, void *);
extern void (*lilv_state_restore_dylibloader_wrapper_lilv)(const LilvState *, LilvInstance *, LilvSetPortValueFunc, void *, uint32_t, const LV2_Feature * const *);
extern int (*lilv_state_save_dylibloader_wrapper_lilv)(LilvWorld *, LV2_URID_Map *, LV2_URID_Unmap *, const LilvState *, const char *, const char *, const char *);
extern char *(*lilv_state_to_string_dylibloader_wrapper_lilv)(LilvWorld *, LV2_URID_Map *, LV2_URID_Unmap *, const LilvState *, const char *, const char *);
extern int (*lilv_state_delete_dylibloader_wrapper_lilv)(LilvWorld *, const LilvState *);
extern const LilvNode *(*lilv_scale_point_get_label_dylibloader_wrapper_lilv)(const LilvScalePoint *);
extern const LilvNode *(*lilv_scale_point_get_value_dylibloader_wrapper_lilv)(const LilvScalePoint *);
extern const LilvNode *(*lilv_plugin_class_get_parent_uri_dylibloader_wrapper_lilv)(const LilvPluginClass *);
extern const LilvNode *(*lilv_plugin_class_get_uri_dylibloader_wrapper_lilv)(const LilvPluginClass *);
extern const LilvNode *(*lilv_plugin_class_get_label_dylibloader_wrapper_lilv)(const LilvPluginClass *);
extern LilvPluginClasses *(*lilv_plugin_class_get_children_dylibloader_wrapper_lilv)(const LilvPluginClass *);
extern LilvInstance *(*lilv_plugin_instantiate_dylibloader_wrapper_lilv)(const LilvPlugin *, double, const LV2_Feature * const *);
extern void (*lilv_instance_free_dylibloader_wrapper_lilv)(LilvInstance *);
extern LilvUIs *(*lilv_plugin_get_uis_dylibloader_wrapper_lilv)(const LilvPlugin *);
extern const LilvNode *(*lilv_ui_get_uri_dylibloader_wrapper_lilv)(const LilvUI *);
extern const LilvNodes *(*lilv_ui_get_classes_dylibloader_wrapper_lilv)(const LilvUI *);
extern bool (*lilv_ui_is_a_dylibloader_wrapper_lilv)(const LilvUI *, const LilvNode *);
extern unsigned (*lilv_ui_is_supported_dylibloader_wrapper_lilv)(const LilvUI *, LilvUISupportedFunc, const LilvNode *, const LilvNode **);
extern const LilvNode *(*lilv_ui_get_bundle_uri_dylibloader_wrapper_lilv)(const LilvUI *);
extern const LilvNode *(*lilv_ui_get_binary_uri_dylibloader_wrapper_lilv)(const LilvUI *);
int initialize_lilv(int verbose);
#ifdef __cplusplus
}
#endif
#endif

// LCOV_EXCL_STOP