// This file is generated. Do not edit!
// see https://github.com/hpvb/dynload-wrapper for details
// generated by /home/sander/dynload-wrapper/generate-wrapper.py 0.5 on 2023-11-23 14:01:31
// flags: /home/sander/dynload-wrapper/generate-wrapper.py --include include/lilv-0/lilv/lilv.h --sys-include <lilv/lilv.h> --soname lilv-0.so.0 --init-name lv2 --output-header /home/sander/shoopdaloop/src/libshoopdaloop/internal/lv2/lilv_wrappers.h --output-implementation /home/sander/shoopdaloop/src/libshoopdaloop/internal/lv2/lilv_wrappers.c
//
#include <stdint.h>

#define lv2_descriptor lv2_descriptor_dylibloader_orig_lv2
#define lv2_lib_descriptor lv2_lib_descriptor_dylibloader_orig_lv2
#define lilv_free lilv_free_dylibloader_orig_lv2
#define lilv_uri_to_path lilv_uri_to_path_dylibloader_orig_lv2
#define lilv_file_uri_parse lilv_file_uri_parse_dylibloader_orig_lv2
#define lilv_new_uri lilv_new_uri_dylibloader_orig_lv2
#define lilv_new_file_uri lilv_new_file_uri_dylibloader_orig_lv2
#define lilv_new_string lilv_new_string_dylibloader_orig_lv2
#define lilv_new_int lilv_new_int_dylibloader_orig_lv2
#define lilv_new_float lilv_new_float_dylibloader_orig_lv2
#define lilv_new_bool lilv_new_bool_dylibloader_orig_lv2
#define lilv_node_free lilv_node_free_dylibloader_orig_lv2
#define lilv_node_duplicate lilv_node_duplicate_dylibloader_orig_lv2
#define lilv_node_equals lilv_node_equals_dylibloader_orig_lv2
#define lilv_node_get_turtle_token lilv_node_get_turtle_token_dylibloader_orig_lv2
#define lilv_node_is_uri lilv_node_is_uri_dylibloader_orig_lv2
#define lilv_node_as_uri lilv_node_as_uri_dylibloader_orig_lv2
#define lilv_node_is_blank lilv_node_is_blank_dylibloader_orig_lv2
#define lilv_node_as_blank lilv_node_as_blank_dylibloader_orig_lv2
#define lilv_node_is_literal lilv_node_is_literal_dylibloader_orig_lv2
#define lilv_node_is_string lilv_node_is_string_dylibloader_orig_lv2
#define lilv_node_as_string lilv_node_as_string_dylibloader_orig_lv2
#define lilv_node_get_path lilv_node_get_path_dylibloader_orig_lv2
#define lilv_node_is_float lilv_node_is_float_dylibloader_orig_lv2
#define lilv_node_as_float lilv_node_as_float_dylibloader_orig_lv2
#define lilv_node_is_int lilv_node_is_int_dylibloader_orig_lv2
#define lilv_node_as_int lilv_node_as_int_dylibloader_orig_lv2
#define lilv_node_is_bool lilv_node_is_bool_dylibloader_orig_lv2
#define lilv_node_as_bool lilv_node_as_bool_dylibloader_orig_lv2
#define lilv_plugin_classes_free lilv_plugin_classes_free_dylibloader_orig_lv2
#define lilv_plugin_classes_size lilv_plugin_classes_size_dylibloader_orig_lv2
#define lilv_plugin_classes_begin lilv_plugin_classes_begin_dylibloader_orig_lv2
#define lilv_plugin_classes_get lilv_plugin_classes_get_dylibloader_orig_lv2
#define lilv_plugin_classes_next lilv_plugin_classes_next_dylibloader_orig_lv2
#define lilv_plugin_classes_is_end lilv_plugin_classes_is_end_dylibloader_orig_lv2
#define lilv_plugin_classes_get_by_uri lilv_plugin_classes_get_by_uri_dylibloader_orig_lv2
#define lilv_scale_points_free lilv_scale_points_free_dylibloader_orig_lv2
#define lilv_scale_points_size lilv_scale_points_size_dylibloader_orig_lv2
#define lilv_scale_points_begin lilv_scale_points_begin_dylibloader_orig_lv2
#define lilv_scale_points_get lilv_scale_points_get_dylibloader_orig_lv2
#define lilv_scale_points_next lilv_scale_points_next_dylibloader_orig_lv2
#define lilv_scale_points_is_end lilv_scale_points_is_end_dylibloader_orig_lv2
#define lilv_uis_free lilv_uis_free_dylibloader_orig_lv2
#define lilv_uis_size lilv_uis_size_dylibloader_orig_lv2
#define lilv_uis_begin lilv_uis_begin_dylibloader_orig_lv2
#define lilv_uis_get lilv_uis_get_dylibloader_orig_lv2
#define lilv_uis_next lilv_uis_next_dylibloader_orig_lv2
#define lilv_uis_is_end lilv_uis_is_end_dylibloader_orig_lv2
#define lilv_uis_get_by_uri lilv_uis_get_by_uri_dylibloader_orig_lv2
#define lilv_nodes_free lilv_nodes_free_dylibloader_orig_lv2
#define lilv_nodes_size lilv_nodes_size_dylibloader_orig_lv2
#define lilv_nodes_begin lilv_nodes_begin_dylibloader_orig_lv2
#define lilv_nodes_get lilv_nodes_get_dylibloader_orig_lv2
#define lilv_nodes_next lilv_nodes_next_dylibloader_orig_lv2
#define lilv_nodes_is_end lilv_nodes_is_end_dylibloader_orig_lv2
#define lilv_nodes_get_first lilv_nodes_get_first_dylibloader_orig_lv2
#define lilv_nodes_contains lilv_nodes_contains_dylibloader_orig_lv2
#define lilv_nodes_merge lilv_nodes_merge_dylibloader_orig_lv2
#define lilv_plugins_size lilv_plugins_size_dylibloader_orig_lv2
#define lilv_plugins_begin lilv_plugins_begin_dylibloader_orig_lv2
#define lilv_plugins_get lilv_plugins_get_dylibloader_orig_lv2
#define lilv_plugins_next lilv_plugins_next_dylibloader_orig_lv2
#define lilv_plugins_is_end lilv_plugins_is_end_dylibloader_orig_lv2
#define lilv_plugins_get_by_uri lilv_plugins_get_by_uri_dylibloader_orig_lv2
#define lilv_world_new lilv_world_new_dylibloader_orig_lv2
#define lilv_world_set_option lilv_world_set_option_dylibloader_orig_lv2
#define lilv_world_free lilv_world_free_dylibloader_orig_lv2
#define lilv_world_load_all lilv_world_load_all_dylibloader_orig_lv2
#define lilv_world_load_bundle lilv_world_load_bundle_dylibloader_orig_lv2
#define lilv_world_load_specifications lilv_world_load_specifications_dylibloader_orig_lv2
#define lilv_world_load_plugin_classes lilv_world_load_plugin_classes_dylibloader_orig_lv2
#define lilv_world_unload_bundle lilv_world_unload_bundle_dylibloader_orig_lv2
#define lilv_world_load_resource lilv_world_load_resource_dylibloader_orig_lv2
#define lilv_world_unload_resource lilv_world_unload_resource_dylibloader_orig_lv2
#define lilv_world_get_plugin_class lilv_world_get_plugin_class_dylibloader_orig_lv2
#define lilv_world_get_plugin_classes lilv_world_get_plugin_classes_dylibloader_orig_lv2
#define lilv_world_get_all_plugins lilv_world_get_all_plugins_dylibloader_orig_lv2
#define lilv_world_find_nodes lilv_world_find_nodes_dylibloader_orig_lv2
#define lilv_world_get lilv_world_get_dylibloader_orig_lv2
#define lilv_world_ask lilv_world_ask_dylibloader_orig_lv2
#define lilv_world_get_symbol lilv_world_get_symbol_dylibloader_orig_lv2
#define lilv_plugin_verify lilv_plugin_verify_dylibloader_orig_lv2
#define lilv_plugin_get_uri lilv_plugin_get_uri_dylibloader_orig_lv2
#define lilv_plugin_get_bundle_uri lilv_plugin_get_bundle_uri_dylibloader_orig_lv2
#define lilv_plugin_get_data_uris lilv_plugin_get_data_uris_dylibloader_orig_lv2
#define lilv_plugin_get_library_uri lilv_plugin_get_library_uri_dylibloader_orig_lv2
#define lilv_plugin_get_name lilv_plugin_get_name_dylibloader_orig_lv2
#define lilv_plugin_get_class lilv_plugin_get_class_dylibloader_orig_lv2
#define lilv_plugin_get_value lilv_plugin_get_value_dylibloader_orig_lv2
#define lilv_plugin_has_feature lilv_plugin_has_feature_dylibloader_orig_lv2
#define lilv_plugin_get_supported_features lilv_plugin_get_supported_features_dylibloader_orig_lv2
#define lilv_plugin_get_required_features lilv_plugin_get_required_features_dylibloader_orig_lv2
#define lilv_plugin_get_optional_features lilv_plugin_get_optional_features_dylibloader_orig_lv2
#define lilv_plugin_has_extension_data lilv_plugin_has_extension_data_dylibloader_orig_lv2
#define lilv_plugin_get_extension_data lilv_plugin_get_extension_data_dylibloader_orig_lv2
#define lilv_plugin_get_num_ports lilv_plugin_get_num_ports_dylibloader_orig_lv2
#define lilv_plugin_get_port_ranges_float lilv_plugin_get_port_ranges_float_dylibloader_orig_lv2
#define lilv_plugin_get_num_ports_of_class lilv_plugin_get_num_ports_of_class_dylibloader_orig_lv2
#define lilv_plugin_get_num_ports_of_class_va lilv_plugin_get_num_ports_of_class_va_dylibloader_orig_lv2
#define lilv_plugin_has_latency lilv_plugin_has_latency_dylibloader_orig_lv2
#define lilv_plugin_get_latency_port_index lilv_plugin_get_latency_port_index_dylibloader_orig_lv2
#define lilv_plugin_get_port_by_index lilv_plugin_get_port_by_index_dylibloader_orig_lv2
#define lilv_plugin_get_port_by_symbol lilv_plugin_get_port_by_symbol_dylibloader_orig_lv2
#define lilv_plugin_get_port_by_designation lilv_plugin_get_port_by_designation_dylibloader_orig_lv2
#define lilv_plugin_get_project lilv_plugin_get_project_dylibloader_orig_lv2
#define lilv_plugin_get_author_name lilv_plugin_get_author_name_dylibloader_orig_lv2
#define lilv_plugin_get_author_email lilv_plugin_get_author_email_dylibloader_orig_lv2
#define lilv_plugin_get_author_homepage lilv_plugin_get_author_homepage_dylibloader_orig_lv2
#define lilv_plugin_is_replaced lilv_plugin_is_replaced_dylibloader_orig_lv2
#define lilv_plugin_write_description lilv_plugin_write_description_dylibloader_orig_lv2
#define lilv_plugin_write_manifest_entry lilv_plugin_write_manifest_entry_dylibloader_orig_lv2
#define lilv_plugin_get_related lilv_plugin_get_related_dylibloader_orig_lv2
#define lilv_port_get_node lilv_port_get_node_dylibloader_orig_lv2
#define lilv_port_get_value lilv_port_get_value_dylibloader_orig_lv2
#define lilv_port_get lilv_port_get_dylibloader_orig_lv2
#define lilv_port_get_properties lilv_port_get_properties_dylibloader_orig_lv2
#define lilv_port_has_property lilv_port_has_property_dylibloader_orig_lv2
#define lilv_port_supports_event lilv_port_supports_event_dylibloader_orig_lv2
#define lilv_port_get_index lilv_port_get_index_dylibloader_orig_lv2
#define lilv_port_get_symbol lilv_port_get_symbol_dylibloader_orig_lv2
#define lilv_port_get_name lilv_port_get_name_dylibloader_orig_lv2
#define lilv_port_get_classes lilv_port_get_classes_dylibloader_orig_lv2
#define lilv_port_is_a lilv_port_is_a_dylibloader_orig_lv2
#define lilv_port_get_range lilv_port_get_range_dylibloader_orig_lv2
#define lilv_port_get_scale_points lilv_port_get_scale_points_dylibloader_orig_lv2
#define lilv_state_new_from_world lilv_state_new_from_world_dylibloader_orig_lv2
#define lilv_state_new_from_file lilv_state_new_from_file_dylibloader_orig_lv2
#define lilv_state_new_from_string lilv_state_new_from_string_dylibloader_orig_lv2
#define lilv_state_new_from_instance lilv_state_new_from_instance_dylibloader_orig_lv2
#define lilv_state_free lilv_state_free_dylibloader_orig_lv2
#define lilv_state_equals lilv_state_equals_dylibloader_orig_lv2
#define lilv_state_get_num_properties lilv_state_get_num_properties_dylibloader_orig_lv2
#define lilv_state_get_plugin_uri lilv_state_get_plugin_uri_dylibloader_orig_lv2
#define lilv_state_get_uri lilv_state_get_uri_dylibloader_orig_lv2
#define lilv_state_get_label lilv_state_get_label_dylibloader_orig_lv2
#define lilv_state_set_label lilv_state_set_label_dylibloader_orig_lv2
#define lilv_state_set_metadata lilv_state_set_metadata_dylibloader_orig_lv2
#define lilv_state_emit_port_values lilv_state_emit_port_values_dylibloader_orig_lv2
#define lilv_state_restore lilv_state_restore_dylibloader_orig_lv2
#define lilv_state_save lilv_state_save_dylibloader_orig_lv2
#define lilv_state_to_string lilv_state_to_string_dylibloader_orig_lv2
#define lilv_state_delete lilv_state_delete_dylibloader_orig_lv2
#define lilv_scale_point_get_label lilv_scale_point_get_label_dylibloader_orig_lv2
#define lilv_scale_point_get_value lilv_scale_point_get_value_dylibloader_orig_lv2
#define lilv_plugin_class_get_parent_uri lilv_plugin_class_get_parent_uri_dylibloader_orig_lv2
#define lilv_plugin_class_get_uri lilv_plugin_class_get_uri_dylibloader_orig_lv2
#define lilv_plugin_class_get_label lilv_plugin_class_get_label_dylibloader_orig_lv2
#define lilv_plugin_class_get_children lilv_plugin_class_get_children_dylibloader_orig_lv2
#define lilv_plugin_instantiate lilv_plugin_instantiate_dylibloader_orig_lv2
#define lilv_instance_free lilv_instance_free_dylibloader_orig_lv2
#define lilv_plugin_get_uis lilv_plugin_get_uis_dylibloader_orig_lv2
#define lilv_ui_get_uri lilv_ui_get_uri_dylibloader_orig_lv2
#define lilv_ui_get_classes lilv_ui_get_classes_dylibloader_orig_lv2
#define lilv_ui_is_a lilv_ui_is_a_dylibloader_orig_lv2
#define lilv_ui_is_supported lilv_ui_is_supported_dylibloader_orig_lv2
#define lilv_ui_get_bundle_uri lilv_ui_get_bundle_uri_dylibloader_orig_lv2
#define lilv_ui_get_binary_uri lilv_ui_get_binary_uri_dylibloader_orig_lv2
#include <lilv/lilv.h>
#undef lv2_descriptor
#undef lv2_lib_descriptor
#undef lilv_free
#undef lilv_uri_to_path
#undef lilv_file_uri_parse
#undef lilv_new_uri
#undef lilv_new_file_uri
#undef lilv_new_string
#undef lilv_new_int
#undef lilv_new_float
#undef lilv_new_bool
#undef lilv_node_free
#undef lilv_node_duplicate
#undef lilv_node_equals
#undef lilv_node_get_turtle_token
#undef lilv_node_is_uri
#undef lilv_node_as_uri
#undef lilv_node_is_blank
#undef lilv_node_as_blank
#undef lilv_node_is_literal
#undef lilv_node_is_string
#undef lilv_node_as_string
#undef lilv_node_get_path
#undef lilv_node_is_float
#undef lilv_node_as_float
#undef lilv_node_is_int
#undef lilv_node_as_int
#undef lilv_node_is_bool
#undef lilv_node_as_bool
#undef lilv_plugin_classes_free
#undef lilv_plugin_classes_size
#undef lilv_plugin_classes_begin
#undef lilv_plugin_classes_get
#undef lilv_plugin_classes_next
#undef lilv_plugin_classes_is_end
#undef lilv_plugin_classes_get_by_uri
#undef lilv_scale_points_free
#undef lilv_scale_points_size
#undef lilv_scale_points_begin
#undef lilv_scale_points_get
#undef lilv_scale_points_next
#undef lilv_scale_points_is_end
#undef lilv_uis_free
#undef lilv_uis_size
#undef lilv_uis_begin
#undef lilv_uis_get
#undef lilv_uis_next
#undef lilv_uis_is_end
#undef lilv_uis_get_by_uri
#undef lilv_nodes_free
#undef lilv_nodes_size
#undef lilv_nodes_begin
#undef lilv_nodes_get
#undef lilv_nodes_next
#undef lilv_nodes_is_end
#undef lilv_nodes_get_first
#undef lilv_nodes_contains
#undef lilv_nodes_merge
#undef lilv_plugins_size
#undef lilv_plugins_begin
#undef lilv_plugins_get
#undef lilv_plugins_next
#undef lilv_plugins_is_end
#undef lilv_plugins_get_by_uri
#undef lilv_world_new
#undef lilv_world_set_option
#undef lilv_world_free
#undef lilv_world_load_all
#undef lilv_world_load_bundle
#undef lilv_world_load_specifications
#undef lilv_world_load_plugin_classes
#undef lilv_world_unload_bundle
#undef lilv_world_load_resource
#undef lilv_world_unload_resource
#undef lilv_world_get_plugin_class
#undef lilv_world_get_plugin_classes
#undef lilv_world_get_all_plugins
#undef lilv_world_find_nodes
#undef lilv_world_get
#undef lilv_world_ask
#undef lilv_world_get_symbol
#undef lilv_plugin_verify
#undef lilv_plugin_get_uri
#undef lilv_plugin_get_bundle_uri
#undef lilv_plugin_get_data_uris
#undef lilv_plugin_get_library_uri
#undef lilv_plugin_get_name
#undef lilv_plugin_get_class
#undef lilv_plugin_get_value
#undef lilv_plugin_has_feature
#undef lilv_plugin_get_supported_features
#undef lilv_plugin_get_required_features
#undef lilv_plugin_get_optional_features
#undef lilv_plugin_has_extension_data
#undef lilv_plugin_get_extension_data
#undef lilv_plugin_get_num_ports
#undef lilv_plugin_get_port_ranges_float
#undef lilv_plugin_get_num_ports_of_class
#undef lilv_plugin_get_num_ports_of_class_va
#undef lilv_plugin_has_latency
#undef lilv_plugin_get_latency_port_index
#undef lilv_plugin_get_port_by_index
#undef lilv_plugin_get_port_by_symbol
#undef lilv_plugin_get_port_by_designation
#undef lilv_plugin_get_project
#undef lilv_plugin_get_author_name
#undef lilv_plugin_get_author_email
#undef lilv_plugin_get_author_homepage
#undef lilv_plugin_is_replaced
#undef lilv_plugin_write_description
#undef lilv_plugin_write_manifest_entry
#undef lilv_plugin_get_related
#undef lilv_port_get_node
#undef lilv_port_get_value
#undef lilv_port_get
#undef lilv_port_get_properties
#undef lilv_port_has_property
#undef lilv_port_supports_event
#undef lilv_port_get_index
#undef lilv_port_get_symbol
#undef lilv_port_get_name
#undef lilv_port_get_classes
#undef lilv_port_is_a
#undef lilv_port_get_range
#undef lilv_port_get_scale_points
#undef lilv_state_new_from_world
#undef lilv_state_new_from_file
#undef lilv_state_new_from_string
#undef lilv_state_new_from_instance
#undef lilv_state_free
#undef lilv_state_equals
#undef lilv_state_get_num_properties
#undef lilv_state_get_plugin_uri
#undef lilv_state_get_uri
#undef lilv_state_get_label
#undef lilv_state_set_label
#undef lilv_state_set_metadata
#undef lilv_state_emit_port_values
#undef lilv_state_restore
#undef lilv_state_save
#undef lilv_state_to_string
#undef lilv_state_delete
#undef lilv_scale_point_get_label
#undef lilv_scale_point_get_value
#undef lilv_plugin_class_get_parent_uri
#undef lilv_plugin_class_get_uri
#undef lilv_plugin_class_get_label
#undef lilv_plugin_class_get_children
#undef lilv_plugin_instantiate
#undef lilv_instance_free
#undef lilv_plugin_get_uis
#undef lilv_ui_get_uri
#undef lilv_ui_get_classes
#undef lilv_ui_is_a
#undef lilv_ui_is_supported
#undef lilv_ui_get_bundle_uri
#undef lilv_ui_get_binary_uri
#include <stdio.h>

extern "C" {
const LV2_Descriptor *(*lv2_descriptor_dylibloader_wrapper_lv2)(uint32_t);
const LV2_Lib_Descriptor *(*lv2_lib_descriptor_dylibloader_wrapper_lv2)(const char *, const LV2_Feature * const *);
void (*lilv_free_dylibloader_wrapper_lv2)(void *);
const char *(*lilv_uri_to_path_dylibloader_wrapper_lv2)(const char *);
char *(*lilv_file_uri_parse_dylibloader_wrapper_lv2)(const char *, char **);
LilvNode *(*lilv_new_uri_dylibloader_wrapper_lv2)(LilvWorld *, const char *);
LilvNode *(*lilv_new_file_uri_dylibloader_wrapper_lv2)(LilvWorld *, const char *, const char *);
LilvNode *(*lilv_new_string_dylibloader_wrapper_lv2)(LilvWorld *, const char *);
LilvNode *(*lilv_new_int_dylibloader_wrapper_lv2)(LilvWorld *, int);
LilvNode *(*lilv_new_float_dylibloader_wrapper_lv2)(LilvWorld *, float);
LilvNode *(*lilv_new_bool_dylibloader_wrapper_lv2)(LilvWorld *, bool);
void (*lilv_node_free_dylibloader_wrapper_lv2)(LilvNode *);
LilvNode *(*lilv_node_duplicate_dylibloader_wrapper_lv2)(const LilvNode *);
bool (*lilv_node_equals_dylibloader_wrapper_lv2)(const LilvNode *, const LilvNode *);
char *(*lilv_node_get_turtle_token_dylibloader_wrapper_lv2)(const LilvNode *);
bool (*lilv_node_is_uri_dylibloader_wrapper_lv2)(const LilvNode *);
const char *(*lilv_node_as_uri_dylibloader_wrapper_lv2)(const LilvNode *);
bool (*lilv_node_is_blank_dylibloader_wrapper_lv2)(const LilvNode *);
const char *(*lilv_node_as_blank_dylibloader_wrapper_lv2)(const LilvNode *);
bool (*lilv_node_is_literal_dylibloader_wrapper_lv2)(const LilvNode *);
bool (*lilv_node_is_string_dylibloader_wrapper_lv2)(const LilvNode *);
const char *(*lilv_node_as_string_dylibloader_wrapper_lv2)(const LilvNode *);
char *(*lilv_node_get_path_dylibloader_wrapper_lv2)(const LilvNode *, char **);
bool (*lilv_node_is_float_dylibloader_wrapper_lv2)(const LilvNode *);
float (*lilv_node_as_float_dylibloader_wrapper_lv2)(const LilvNode *);
bool (*lilv_node_is_int_dylibloader_wrapper_lv2)(const LilvNode *);
int (*lilv_node_as_int_dylibloader_wrapper_lv2)(const LilvNode *);
bool (*lilv_node_is_bool_dylibloader_wrapper_lv2)(const LilvNode *);
bool (*lilv_node_as_bool_dylibloader_wrapper_lv2)(const LilvNode *);
void (*lilv_plugin_classes_free_dylibloader_wrapper_lv2)(LilvPluginClasses *);
unsigned (*lilv_plugin_classes_size_dylibloader_wrapper_lv2)(const LilvPluginClasses *);
LilvIter *(*lilv_plugin_classes_begin_dylibloader_wrapper_lv2)(const LilvPluginClasses *);
const LilvPluginClass *(*lilv_plugin_classes_get_dylibloader_wrapper_lv2)(const LilvPluginClasses *, LilvIter *);
LilvIter *(*lilv_plugin_classes_next_dylibloader_wrapper_lv2)(const LilvPluginClasses *, LilvIter *);
bool (*lilv_plugin_classes_is_end_dylibloader_wrapper_lv2)(const LilvPluginClasses *, LilvIter *);
const LilvPluginClass *(*lilv_plugin_classes_get_by_uri_dylibloader_wrapper_lv2)(const LilvPluginClasses *, const LilvNode *);
void (*lilv_scale_points_free_dylibloader_wrapper_lv2)(LilvScalePoints *);
unsigned (*lilv_scale_points_size_dylibloader_wrapper_lv2)(const LilvScalePoints *);
LilvIter *(*lilv_scale_points_begin_dylibloader_wrapper_lv2)(const LilvScalePoints *);
const LilvScalePoint *(*lilv_scale_points_get_dylibloader_wrapper_lv2)(const LilvScalePoints *, LilvIter *);
LilvIter *(*lilv_scale_points_next_dylibloader_wrapper_lv2)(const LilvScalePoints *, LilvIter *);
bool (*lilv_scale_points_is_end_dylibloader_wrapper_lv2)(const LilvScalePoints *, LilvIter *);
void (*lilv_uis_free_dylibloader_wrapper_lv2)(LilvUIs *);
unsigned (*lilv_uis_size_dylibloader_wrapper_lv2)(const LilvUIs *);
LilvIter *(*lilv_uis_begin_dylibloader_wrapper_lv2)(const LilvUIs *);
const LilvUI *(*lilv_uis_get_dylibloader_wrapper_lv2)(const LilvUIs *, LilvIter *);
LilvIter *(*lilv_uis_next_dylibloader_wrapper_lv2)(const LilvUIs *, LilvIter *);
bool (*lilv_uis_is_end_dylibloader_wrapper_lv2)(const LilvUIs *, LilvIter *);
const LilvUI *(*lilv_uis_get_by_uri_dylibloader_wrapper_lv2)(const LilvUIs *, const LilvNode *);
void (*lilv_nodes_free_dylibloader_wrapper_lv2)(LilvNodes *);
unsigned (*lilv_nodes_size_dylibloader_wrapper_lv2)(const LilvNodes *);
LilvIter *(*lilv_nodes_begin_dylibloader_wrapper_lv2)(const LilvNodes *);
const LilvNode *(*lilv_nodes_get_dylibloader_wrapper_lv2)(const LilvNodes *, LilvIter *);
LilvIter *(*lilv_nodes_next_dylibloader_wrapper_lv2)(const LilvNodes *, LilvIter *);
bool (*lilv_nodes_is_end_dylibloader_wrapper_lv2)(const LilvNodes *, LilvIter *);
LilvNode *(*lilv_nodes_get_first_dylibloader_wrapper_lv2)(const LilvNodes *);
bool (*lilv_nodes_contains_dylibloader_wrapper_lv2)(const LilvNodes *, const LilvNode *);
LilvNodes *(*lilv_nodes_merge_dylibloader_wrapper_lv2)(const LilvNodes *, const LilvNodes *);
unsigned (*lilv_plugins_size_dylibloader_wrapper_lv2)(const LilvPlugins *);
LilvIter *(*lilv_plugins_begin_dylibloader_wrapper_lv2)(const LilvPlugins *);
const LilvPlugin *(*lilv_plugins_get_dylibloader_wrapper_lv2)(const LilvPlugins *, LilvIter *);
LilvIter *(*lilv_plugins_next_dylibloader_wrapper_lv2)(const LilvPlugins *, LilvIter *);
bool (*lilv_plugins_is_end_dylibloader_wrapper_lv2)(const LilvPlugins *, LilvIter *);
const LilvPlugin *(*lilv_plugins_get_by_uri_dylibloader_wrapper_lv2)(const LilvPlugins *, const LilvNode *);
LilvWorld *(*lilv_world_new_dylibloader_wrapper_lv2)(void);
void (*lilv_world_set_option_dylibloader_wrapper_lv2)(LilvWorld *, const char *, const LilvNode *);
void (*lilv_world_free_dylibloader_wrapper_lv2)(LilvWorld *);
void (*lilv_world_load_all_dylibloader_wrapper_lv2)(LilvWorld *);
void (*lilv_world_load_bundle_dylibloader_wrapper_lv2)(LilvWorld *, const LilvNode *);
void (*lilv_world_load_specifications_dylibloader_wrapper_lv2)(LilvWorld *);
void (*lilv_world_load_plugin_classes_dylibloader_wrapper_lv2)(LilvWorld *);
int (*lilv_world_unload_bundle_dylibloader_wrapper_lv2)(LilvWorld *, const LilvNode *);
int (*lilv_world_load_resource_dylibloader_wrapper_lv2)(LilvWorld *, const LilvNode *);
int (*lilv_world_unload_resource_dylibloader_wrapper_lv2)(LilvWorld *, const LilvNode *);
const LilvPluginClass *(*lilv_world_get_plugin_class_dylibloader_wrapper_lv2)(const LilvWorld *);
const LilvPluginClasses *(*lilv_world_get_plugin_classes_dylibloader_wrapper_lv2)(const LilvWorld *);
const LilvPlugins *(*lilv_world_get_all_plugins_dylibloader_wrapper_lv2)(const LilvWorld *);
LilvNodes *(*lilv_world_find_nodes_dylibloader_wrapper_lv2)(LilvWorld *, const LilvNode *, const LilvNode *, const LilvNode *);
LilvNode *(*lilv_world_get_dylibloader_wrapper_lv2)(LilvWorld *, const LilvNode *, const LilvNode *, const LilvNode *);
bool (*lilv_world_ask_dylibloader_wrapper_lv2)(LilvWorld *, const LilvNode *, const LilvNode *, const LilvNode *);
LilvNode *(*lilv_world_get_symbol_dylibloader_wrapper_lv2)(LilvWorld *, const LilvNode *);
bool (*lilv_plugin_verify_dylibloader_wrapper_lv2)(const LilvPlugin *);
const LilvNode *(*lilv_plugin_get_uri_dylibloader_wrapper_lv2)(const LilvPlugin *);
const LilvNode *(*lilv_plugin_get_bundle_uri_dylibloader_wrapper_lv2)(const LilvPlugin *);
const LilvNodes *(*lilv_plugin_get_data_uris_dylibloader_wrapper_lv2)(const LilvPlugin *);
const LilvNode *(*lilv_plugin_get_library_uri_dylibloader_wrapper_lv2)(const LilvPlugin *);
LilvNode *(*lilv_plugin_get_name_dylibloader_wrapper_lv2)(const LilvPlugin *);
const LilvPluginClass *(*lilv_plugin_get_class_dylibloader_wrapper_lv2)(const LilvPlugin *);
LilvNodes *(*lilv_plugin_get_value_dylibloader_wrapper_lv2)(const LilvPlugin *, const LilvNode *);
bool (*lilv_plugin_has_feature_dylibloader_wrapper_lv2)(const LilvPlugin *, const LilvNode *);
LilvNodes *(*lilv_plugin_get_supported_features_dylibloader_wrapper_lv2)(const LilvPlugin *);
LilvNodes *(*lilv_plugin_get_required_features_dylibloader_wrapper_lv2)(const LilvPlugin *);
LilvNodes *(*lilv_plugin_get_optional_features_dylibloader_wrapper_lv2)(const LilvPlugin *);
bool (*lilv_plugin_has_extension_data_dylibloader_wrapper_lv2)(const LilvPlugin *, const LilvNode *);
LilvNodes *(*lilv_plugin_get_extension_data_dylibloader_wrapper_lv2)(const LilvPlugin *);
uint32_t (*lilv_plugin_get_num_ports_dylibloader_wrapper_lv2)(const LilvPlugin *);
void (*lilv_plugin_get_port_ranges_float_dylibloader_wrapper_lv2)(const LilvPlugin *, float *, float *, float *);
uint32_t (*lilv_plugin_get_num_ports_of_class_dylibloader_wrapper_lv2)(const LilvPlugin *, const LilvNode *, ...);
uint32_t (*lilv_plugin_get_num_ports_of_class_va_dylibloader_wrapper_lv2)(const LilvPlugin *, const LilvNode *, va_list);
bool (*lilv_plugin_has_latency_dylibloader_wrapper_lv2)(const LilvPlugin *);
uint32_t (*lilv_plugin_get_latency_port_index_dylibloader_wrapper_lv2)(const LilvPlugin *);
const LilvPort *(*lilv_plugin_get_port_by_index_dylibloader_wrapper_lv2)(const LilvPlugin *, uint32_t);
const LilvPort *(*lilv_plugin_get_port_by_symbol_dylibloader_wrapper_lv2)(const LilvPlugin *, const LilvNode *);
const LilvPort *(*lilv_plugin_get_port_by_designation_dylibloader_wrapper_lv2)(const LilvPlugin *, const LilvNode *, const LilvNode *);
LilvNode *(*lilv_plugin_get_project_dylibloader_wrapper_lv2)(const LilvPlugin *);
LilvNode *(*lilv_plugin_get_author_name_dylibloader_wrapper_lv2)(const LilvPlugin *);
LilvNode *(*lilv_plugin_get_author_email_dylibloader_wrapper_lv2)(const LilvPlugin *);
LilvNode *(*lilv_plugin_get_author_homepage_dylibloader_wrapper_lv2)(const LilvPlugin *);
bool (*lilv_plugin_is_replaced_dylibloader_wrapper_lv2)(const LilvPlugin *);
void (*lilv_plugin_write_description_dylibloader_wrapper_lv2)(LilvWorld *, const LilvPlugin *, const LilvNode *, FILE *);
void (*lilv_plugin_write_manifest_entry_dylibloader_wrapper_lv2)(LilvWorld *, const LilvPlugin *, const LilvNode *, FILE *, const char *);
LilvNodes *(*lilv_plugin_get_related_dylibloader_wrapper_lv2)(const LilvPlugin *, const LilvNode *);
const LilvNode *(*lilv_port_get_node_dylibloader_wrapper_lv2)(const LilvPlugin *, const LilvPort *);
LilvNodes *(*lilv_port_get_value_dylibloader_wrapper_lv2)(const LilvPlugin *, const LilvPort *, const LilvNode *);
LilvNode *(*lilv_port_get_dylibloader_wrapper_lv2)(const LilvPlugin *, const LilvPort *, const LilvNode *);
LilvNodes *(*lilv_port_get_properties_dylibloader_wrapper_lv2)(const LilvPlugin *, const LilvPort *);
bool (*lilv_port_has_property_dylibloader_wrapper_lv2)(const LilvPlugin *, const LilvPort *, const LilvNode *);
bool (*lilv_port_supports_event_dylibloader_wrapper_lv2)(const LilvPlugin *, const LilvPort *, const LilvNode *);
uint32_t (*lilv_port_get_index_dylibloader_wrapper_lv2)(const LilvPlugin *, const LilvPort *);
const LilvNode *(*lilv_port_get_symbol_dylibloader_wrapper_lv2)(const LilvPlugin *, const LilvPort *);
LilvNode *(*lilv_port_get_name_dylibloader_wrapper_lv2)(const LilvPlugin *, const LilvPort *);
const LilvNodes *(*lilv_port_get_classes_dylibloader_wrapper_lv2)(const LilvPlugin *, const LilvPort *);
bool (*lilv_port_is_a_dylibloader_wrapper_lv2)(const LilvPlugin *, const LilvPort *, const LilvNode *);
void (*lilv_port_get_range_dylibloader_wrapper_lv2)(const LilvPlugin *, const LilvPort *, LilvNode **, LilvNode **, LilvNode **);
LilvScalePoints *(*lilv_port_get_scale_points_dylibloader_wrapper_lv2)(const LilvPlugin *, const LilvPort *);
LilvState *(*lilv_state_new_from_world_dylibloader_wrapper_lv2)(LilvWorld *, LV2_URID_Map *, const LilvNode *);
LilvState *(*lilv_state_new_from_file_dylibloader_wrapper_lv2)(LilvWorld *, LV2_URID_Map *, const LilvNode *, const char *);
LilvState *(*lilv_state_new_from_string_dylibloader_wrapper_lv2)(LilvWorld *, LV2_URID_Map *, const char *);
LilvState *(*lilv_state_new_from_instance_dylibloader_wrapper_lv2)(const LilvPlugin *, LilvInstance *, LV2_URID_Map *, const char *, const char *, const char *, const char *, LilvGetPortValueFunc, void *, uint32_t, const LV2_Feature * const *);
void (*lilv_state_free_dylibloader_wrapper_lv2)(LilvState *);
bool (*lilv_state_equals_dylibloader_wrapper_lv2)(const LilvState *, const LilvState *);
unsigned (*lilv_state_get_num_properties_dylibloader_wrapper_lv2)(const LilvState *);
const LilvNode *(*lilv_state_get_plugin_uri_dylibloader_wrapper_lv2)(const LilvState *);
const LilvNode *(*lilv_state_get_uri_dylibloader_wrapper_lv2)(const LilvState *);
const char *(*lilv_state_get_label_dylibloader_wrapper_lv2)(const LilvState *);
void (*lilv_state_set_label_dylibloader_wrapper_lv2)(LilvState *, const char *);
int (*lilv_state_set_metadata_dylibloader_wrapper_lv2)(LilvState *, uint32_t, const void *, size_t, uint32_t, uint32_t);
void (*lilv_state_emit_port_values_dylibloader_wrapper_lv2)(const LilvState *, LilvSetPortValueFunc, void *);
void (*lilv_state_restore_dylibloader_wrapper_lv2)(const LilvState *, LilvInstance *, LilvSetPortValueFunc, void *, uint32_t, const LV2_Feature * const *);
int (*lilv_state_save_dylibloader_wrapper_lv2)(LilvWorld *, LV2_URID_Map *, LV2_URID_Unmap *, const LilvState *, const char *, const char *, const char *);
char *(*lilv_state_to_string_dylibloader_wrapper_lv2)(LilvWorld *, LV2_URID_Map *, LV2_URID_Unmap *, const LilvState *, const char *, const char *);
int (*lilv_state_delete_dylibloader_wrapper_lv2)(LilvWorld *, const LilvState *);
const LilvNode *(*lilv_scale_point_get_label_dylibloader_wrapper_lv2)(const LilvScalePoint *);
const LilvNode *(*lilv_scale_point_get_value_dylibloader_wrapper_lv2)(const LilvScalePoint *);
const LilvNode *(*lilv_plugin_class_get_parent_uri_dylibloader_wrapper_lv2)(const LilvPluginClass *);
const LilvNode *(*lilv_plugin_class_get_uri_dylibloader_wrapper_lv2)(const LilvPluginClass *);
const LilvNode *(*lilv_plugin_class_get_label_dylibloader_wrapper_lv2)(const LilvPluginClass *);
LilvPluginClasses *(*lilv_plugin_class_get_children_dylibloader_wrapper_lv2)(const LilvPluginClass *);
LilvInstance *(*lilv_plugin_instantiate_dylibloader_wrapper_lv2)(const LilvPlugin *, double, const LV2_Feature * const *);
void (*lilv_instance_free_dylibloader_wrapper_lv2)(LilvInstance *);
LilvUIs *(*lilv_plugin_get_uis_dylibloader_wrapper_lv2)(const LilvPlugin *);
const LilvNode *(*lilv_ui_get_uri_dylibloader_wrapper_lv2)(const LilvUI *);
const LilvNodes *(*lilv_ui_get_classes_dylibloader_wrapper_lv2)(const LilvUI *);
bool (*lilv_ui_is_a_dylibloader_wrapper_lv2)(const LilvUI *, const LilvNode *);
unsigned (*lilv_ui_is_supported_dylibloader_wrapper_lv2)(const LilvUI *, LilvUISupportedFunc, const LilvNode *, const LilvNode **);
const LilvNode *(*lilv_ui_get_bundle_uri_dylibloader_wrapper_lv2)(const LilvUI *);
const LilvNode *(*lilv_ui_get_binary_uri_dylibloader_wrapper_lv2)(const LilvUI *);
}

#include "LoadDynamicLibrary.h"

int initialize_lv2(int verbose) {
  _dylib_handle handle;
  char *error;
#ifdef _WIN32
  handle = load_dylib("lilv-0.dll");
#else
  handle = load_dylib("liblilv-0.so.0");
#endif
  throw_if_dylib_error();
// lv2_descriptor
  *(void **) (&lv2_descriptor_dylibloader_wrapper_lv2) = dlsym(handle, "lv2_descriptor");
  throw_if_dylib_error();
// lv2_lib_descriptor
  *(void **) (&lv2_lib_descriptor_dylibloader_wrapper_lv2) = dlsym(handle, "lv2_lib_descriptor");
  throw_if_dylib_error();
// lilv_free
  *(void **) (&lilv_free_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_free");
  throw_if_dylib_error();
// lilv_uri_to_path
  *(void **) (&lilv_uri_to_path_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_uri_to_path");
  throw_if_dylib_error();
// lilv_file_uri_parse
  *(void **) (&lilv_file_uri_parse_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_file_uri_parse");
  throw_if_dylib_error();
// lilv_new_uri
  *(void **) (&lilv_new_uri_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_new_uri");
  throw_if_dylib_error();
// lilv_new_file_uri
  *(void **) (&lilv_new_file_uri_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_new_file_uri");
  throw_if_dylib_error();
// lilv_new_string
  *(void **) (&lilv_new_string_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_new_string");
  throw_if_dylib_error();
// lilv_new_int
  *(void **) (&lilv_new_int_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_new_int");
  throw_if_dylib_error();
// lilv_new_float
  *(void **) (&lilv_new_float_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_new_float");
  throw_if_dylib_error();
// lilv_new_bool
  *(void **) (&lilv_new_bool_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_new_bool");
  throw_if_dylib_error();
// lilv_node_free
  *(void **) (&lilv_node_free_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_node_free");
  throw_if_dylib_error();
// lilv_node_duplicate
  *(void **) (&lilv_node_duplicate_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_node_duplicate");
  throw_if_dylib_error();
// lilv_node_equals
  *(void **) (&lilv_node_equals_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_node_equals");
  throw_if_dylib_error();
// lilv_node_get_turtle_token
  *(void **) (&lilv_node_get_turtle_token_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_node_get_turtle_token");
  throw_if_dylib_error();
// lilv_node_is_uri
  *(void **) (&lilv_node_is_uri_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_node_is_uri");
  throw_if_dylib_error();
// lilv_node_as_uri
  *(void **) (&lilv_node_as_uri_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_node_as_uri");
  throw_if_dylib_error();
// lilv_node_is_blank
  *(void **) (&lilv_node_is_blank_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_node_is_blank");
  throw_if_dylib_error();
// lilv_node_as_blank
  *(void **) (&lilv_node_as_blank_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_node_as_blank");
  throw_if_dylib_error();
// lilv_node_is_literal
  *(void **) (&lilv_node_is_literal_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_node_is_literal");
  throw_if_dylib_error();
// lilv_node_is_string
  *(void **) (&lilv_node_is_string_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_node_is_string");
  throw_if_dylib_error();
// lilv_node_as_string
  *(void **) (&lilv_node_as_string_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_node_as_string");
  throw_if_dylib_error();
// lilv_node_get_path
  *(void **) (&lilv_node_get_path_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_node_get_path");
  throw_if_dylib_error();
// lilv_node_is_float
  *(void **) (&lilv_node_is_float_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_node_is_float");
  throw_if_dylib_error();
// lilv_node_as_float
  *(void **) (&lilv_node_as_float_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_node_as_float");
  throw_if_dylib_error();
// lilv_node_is_int
  *(void **) (&lilv_node_is_int_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_node_is_int");
  throw_if_dylib_error();
// lilv_node_as_int
  *(void **) (&lilv_node_as_int_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_node_as_int");
  throw_if_dylib_error();
// lilv_node_is_bool
  *(void **) (&lilv_node_is_bool_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_node_is_bool");
  throw_if_dylib_error();
// lilv_node_as_bool
  *(void **) (&lilv_node_as_bool_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_node_as_bool");
  throw_if_dylib_error();
// lilv_plugin_classes_free
  *(void **) (&lilv_plugin_classes_free_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_plugin_classes_free");
  throw_if_dylib_error();
// lilv_plugin_classes_size
  *(void **) (&lilv_plugin_classes_size_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_plugin_classes_size");
  throw_if_dylib_error();
// lilv_plugin_classes_begin
  *(void **) (&lilv_plugin_classes_begin_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_plugin_classes_begin");
  throw_if_dylib_error();
// lilv_plugin_classes_get
  *(void **) (&lilv_plugin_classes_get_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_plugin_classes_get");
  throw_if_dylib_error();
// lilv_plugin_classes_next
  *(void **) (&lilv_plugin_classes_next_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_plugin_classes_next");
  throw_if_dylib_error();
// lilv_plugin_classes_is_end
  *(void **) (&lilv_plugin_classes_is_end_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_plugin_classes_is_end");
  throw_if_dylib_error();
// lilv_plugin_classes_get_by_uri
  *(void **) (&lilv_plugin_classes_get_by_uri_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_plugin_classes_get_by_uri");
  throw_if_dylib_error();
// lilv_scale_points_free
  *(void **) (&lilv_scale_points_free_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_scale_points_free");
  throw_if_dylib_error();
// lilv_scale_points_size
  *(void **) (&lilv_scale_points_size_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_scale_points_size");
  throw_if_dylib_error();
// lilv_scale_points_begin
  *(void **) (&lilv_scale_points_begin_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_scale_points_begin");
  throw_if_dylib_error();
// lilv_scale_points_get
  *(void **) (&lilv_scale_points_get_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_scale_points_get");
  throw_if_dylib_error();
// lilv_scale_points_next
  *(void **) (&lilv_scale_points_next_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_scale_points_next");
  throw_if_dylib_error();
// lilv_scale_points_is_end
  *(void **) (&lilv_scale_points_is_end_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_scale_points_is_end");
  throw_if_dylib_error();
// lilv_uis_free
  *(void **) (&lilv_uis_free_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_uis_free");
  throw_if_dylib_error();
// lilv_uis_size
  *(void **) (&lilv_uis_size_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_uis_size");
  throw_if_dylib_error();
// lilv_uis_begin
  *(void **) (&lilv_uis_begin_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_uis_begin");
  throw_if_dylib_error();
// lilv_uis_get
  *(void **) (&lilv_uis_get_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_uis_get");
  throw_if_dylib_error();
// lilv_uis_next
  *(void **) (&lilv_uis_next_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_uis_next");
  throw_if_dylib_error();
// lilv_uis_is_end
  *(void **) (&lilv_uis_is_end_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_uis_is_end");
  throw_if_dylib_error();
// lilv_uis_get_by_uri
  *(void **) (&lilv_uis_get_by_uri_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_uis_get_by_uri");
  throw_if_dylib_error();
// lilv_nodes_free
  *(void **) (&lilv_nodes_free_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_nodes_free");
  throw_if_dylib_error();
// lilv_nodes_size
  *(void **) (&lilv_nodes_size_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_nodes_size");
  throw_if_dylib_error();
// lilv_nodes_begin
  *(void **) (&lilv_nodes_begin_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_nodes_begin");
  throw_if_dylib_error();
// lilv_nodes_get
  *(void **) (&lilv_nodes_get_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_nodes_get");
  throw_if_dylib_error();
// lilv_nodes_next
  *(void **) (&lilv_nodes_next_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_nodes_next");
  throw_if_dylib_error();
// lilv_nodes_is_end
  *(void **) (&lilv_nodes_is_end_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_nodes_is_end");
  throw_if_dylib_error();
// lilv_nodes_get_first
  *(void **) (&lilv_nodes_get_first_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_nodes_get_first");
  throw_if_dylib_error();
// lilv_nodes_contains
  *(void **) (&lilv_nodes_contains_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_nodes_contains");
  throw_if_dylib_error();
// lilv_nodes_merge
  *(void **) (&lilv_nodes_merge_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_nodes_merge");
  throw_if_dylib_error();
// lilv_plugins_size
  *(void **) (&lilv_plugins_size_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_plugins_size");
  throw_if_dylib_error();
// lilv_plugins_begin
  *(void **) (&lilv_plugins_begin_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_plugins_begin");
  throw_if_dylib_error();
// lilv_plugins_get
  *(void **) (&lilv_plugins_get_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_plugins_get");
  throw_if_dylib_error();
// lilv_plugins_next
  *(void **) (&lilv_plugins_next_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_plugins_next");
  throw_if_dylib_error();
// lilv_plugins_is_end
  *(void **) (&lilv_plugins_is_end_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_plugins_is_end");
  throw_if_dylib_error();
// lilv_plugins_get_by_uri
  *(void **) (&lilv_plugins_get_by_uri_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_plugins_get_by_uri");
  throw_if_dylib_error();
// lilv_world_new
  *(void **) (&lilv_world_new_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_world_new");
  throw_if_dylib_error();
// lilv_world_set_option
  *(void **) (&lilv_world_set_option_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_world_set_option");
  throw_if_dylib_error();
// lilv_world_free
  *(void **) (&lilv_world_free_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_world_free");
  throw_if_dylib_error();
// lilv_world_load_all
  *(void **) (&lilv_world_load_all_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_world_load_all");
  throw_if_dylib_error();
// lilv_world_load_bundle
  *(void **) (&lilv_world_load_bundle_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_world_load_bundle");
  throw_if_dylib_error();
// lilv_world_load_specifications
  *(void **) (&lilv_world_load_specifications_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_world_load_specifications");
  throw_if_dylib_error();
// lilv_world_load_plugin_classes
  *(void **) (&lilv_world_load_plugin_classes_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_world_load_plugin_classes");
  throw_if_dylib_error();
// lilv_world_unload_bundle
  *(void **) (&lilv_world_unload_bundle_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_world_unload_bundle");
  throw_if_dylib_error();
// lilv_world_load_resource
  *(void **) (&lilv_world_load_resource_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_world_load_resource");
  throw_if_dylib_error();
// lilv_world_unload_resource
  *(void **) (&lilv_world_unload_resource_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_world_unload_resource");
  throw_if_dylib_error();
// lilv_world_get_plugin_class
  *(void **) (&lilv_world_get_plugin_class_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_world_get_plugin_class");
  throw_if_dylib_error();
// lilv_world_get_plugin_classes
  *(void **) (&lilv_world_get_plugin_classes_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_world_get_plugin_classes");
  throw_if_dylib_error();
// lilv_world_get_all_plugins
  *(void **) (&lilv_world_get_all_plugins_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_world_get_all_plugins");
  throw_if_dylib_error();
// lilv_world_find_nodes
  *(void **) (&lilv_world_find_nodes_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_world_find_nodes");
  throw_if_dylib_error();
// lilv_world_get
  *(void **) (&lilv_world_get_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_world_get");
  throw_if_dylib_error();
// lilv_world_ask
  *(void **) (&lilv_world_ask_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_world_ask");
  throw_if_dylib_error();
// lilv_world_get_symbol
  *(void **) (&lilv_world_get_symbol_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_world_get_symbol");
  throw_if_dylib_error();
// lilv_plugin_verify
  *(void **) (&lilv_plugin_verify_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_plugin_verify");
  throw_if_dylib_error();
// lilv_plugin_get_uri
  *(void **) (&lilv_plugin_get_uri_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_plugin_get_uri");
  throw_if_dylib_error();
// lilv_plugin_get_bundle_uri
  *(void **) (&lilv_plugin_get_bundle_uri_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_plugin_get_bundle_uri");
  throw_if_dylib_error();
// lilv_plugin_get_data_uris
  *(void **) (&lilv_plugin_get_data_uris_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_plugin_get_data_uris");
  throw_if_dylib_error();
// lilv_plugin_get_library_uri
  *(void **) (&lilv_plugin_get_library_uri_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_plugin_get_library_uri");
  throw_if_dylib_error();
// lilv_plugin_get_name
  *(void **) (&lilv_plugin_get_name_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_plugin_get_name");
  throw_if_dylib_error();
// lilv_plugin_get_class
  *(void **) (&lilv_plugin_get_class_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_plugin_get_class");
  throw_if_dylib_error();
// lilv_plugin_get_value
  *(void **) (&lilv_plugin_get_value_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_plugin_get_value");
  throw_if_dylib_error();
// lilv_plugin_has_feature
  *(void **) (&lilv_plugin_has_feature_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_plugin_has_feature");
  throw_if_dylib_error();
// lilv_plugin_get_supported_features
  *(void **) (&lilv_plugin_get_supported_features_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_plugin_get_supported_features");
  throw_if_dylib_error();
// lilv_plugin_get_required_features
  *(void **) (&lilv_plugin_get_required_features_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_plugin_get_required_features");
  throw_if_dylib_error();
// lilv_plugin_get_optional_features
  *(void **) (&lilv_plugin_get_optional_features_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_plugin_get_optional_features");
  throw_if_dylib_error();
// lilv_plugin_has_extension_data
  *(void **) (&lilv_plugin_has_extension_data_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_plugin_has_extension_data");
  throw_if_dylib_error();
// lilv_plugin_get_extension_data
  *(void **) (&lilv_plugin_get_extension_data_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_plugin_get_extension_data");
  throw_if_dylib_error();
// lilv_plugin_get_num_ports
  *(void **) (&lilv_plugin_get_num_ports_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_plugin_get_num_ports");
  throw_if_dylib_error();
// lilv_plugin_get_port_ranges_float
  *(void **) (&lilv_plugin_get_port_ranges_float_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_plugin_get_port_ranges_float");
  throw_if_dylib_error();
// lilv_plugin_get_num_ports_of_class
  *(void **) (&lilv_plugin_get_num_ports_of_class_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_plugin_get_num_ports_of_class");
  throw_if_dylib_error();
// lilv_plugin_get_num_ports_of_class_va
  *(void **) (&lilv_plugin_get_num_ports_of_class_va_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_plugin_get_num_ports_of_class_va");
  throw_if_dylib_error();
// lilv_plugin_has_latency
  *(void **) (&lilv_plugin_has_latency_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_plugin_has_latency");
  throw_if_dylib_error();
// lilv_plugin_get_latency_port_index
  *(void **) (&lilv_plugin_get_latency_port_index_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_plugin_get_latency_port_index");
  throw_if_dylib_error();
// lilv_plugin_get_port_by_index
  *(void **) (&lilv_plugin_get_port_by_index_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_plugin_get_port_by_index");
  throw_if_dylib_error();
// lilv_plugin_get_port_by_symbol
  *(void **) (&lilv_plugin_get_port_by_symbol_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_plugin_get_port_by_symbol");
  throw_if_dylib_error();
// lilv_plugin_get_port_by_designation
  *(void **) (&lilv_plugin_get_port_by_designation_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_plugin_get_port_by_designation");
  throw_if_dylib_error();
// lilv_plugin_get_project
  *(void **) (&lilv_plugin_get_project_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_plugin_get_project");
  throw_if_dylib_error();
// lilv_plugin_get_author_name
  *(void **) (&lilv_plugin_get_author_name_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_plugin_get_author_name");
  throw_if_dylib_error();
// lilv_plugin_get_author_email
  *(void **) (&lilv_plugin_get_author_email_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_plugin_get_author_email");
  throw_if_dylib_error();
// lilv_plugin_get_author_homepage
  *(void **) (&lilv_plugin_get_author_homepage_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_plugin_get_author_homepage");
  throw_if_dylib_error();
// lilv_plugin_is_replaced
  *(void **) (&lilv_plugin_is_replaced_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_plugin_is_replaced");
  throw_if_dylib_error();
// lilv_plugin_write_description
  *(void **) (&lilv_plugin_write_description_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_plugin_write_description");
  throw_if_dylib_error();
// lilv_plugin_write_manifest_entry
  *(void **) (&lilv_plugin_write_manifest_entry_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_plugin_write_manifest_entry");
  throw_if_dylib_error();
// lilv_plugin_get_related
  *(void **) (&lilv_plugin_get_related_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_plugin_get_related");
  throw_if_dylib_error();
// lilv_port_get_node
  *(void **) (&lilv_port_get_node_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_port_get_node");
  throw_if_dylib_error();
// lilv_port_get_value
  *(void **) (&lilv_port_get_value_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_port_get_value");
  throw_if_dylib_error();
// lilv_port_get
  *(void **) (&lilv_port_get_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_port_get");
  throw_if_dylib_error();
// lilv_port_get_properties
  *(void **) (&lilv_port_get_properties_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_port_get_properties");
  throw_if_dylib_error();
// lilv_port_has_property
  *(void **) (&lilv_port_has_property_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_port_has_property");
  throw_if_dylib_error();
// lilv_port_supports_event
  *(void **) (&lilv_port_supports_event_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_port_supports_event");
  throw_if_dylib_error();
// lilv_port_get_index
  *(void **) (&lilv_port_get_index_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_port_get_index");
  throw_if_dylib_error();
// lilv_port_get_symbol
  *(void **) (&lilv_port_get_symbol_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_port_get_symbol");
  throw_if_dylib_error();
// lilv_port_get_name
  *(void **) (&lilv_port_get_name_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_port_get_name");
  throw_if_dylib_error();
// lilv_port_get_classes
  *(void **) (&lilv_port_get_classes_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_port_get_classes");
  throw_if_dylib_error();
// lilv_port_is_a
  *(void **) (&lilv_port_is_a_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_port_is_a");
  throw_if_dylib_error();
// lilv_port_get_range
  *(void **) (&lilv_port_get_range_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_port_get_range");
  throw_if_dylib_error();
// lilv_port_get_scale_points
  *(void **) (&lilv_port_get_scale_points_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_port_get_scale_points");
  throw_if_dylib_error();
// lilv_state_new_from_world
  *(void **) (&lilv_state_new_from_world_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_state_new_from_world");
  throw_if_dylib_error();
// lilv_state_new_from_file
  *(void **) (&lilv_state_new_from_file_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_state_new_from_file");
  throw_if_dylib_error();
// lilv_state_new_from_string
  *(void **) (&lilv_state_new_from_string_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_state_new_from_string");
  throw_if_dylib_error();
// lilv_state_new_from_instance
  *(void **) (&lilv_state_new_from_instance_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_state_new_from_instance");
  throw_if_dylib_error();
// lilv_state_free
  *(void **) (&lilv_state_free_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_state_free");
  throw_if_dylib_error();
// lilv_state_equals
  *(void **) (&lilv_state_equals_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_state_equals");
  throw_if_dylib_error();
// lilv_state_get_num_properties
  *(void **) (&lilv_state_get_num_properties_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_state_get_num_properties");
  throw_if_dylib_error();
// lilv_state_get_plugin_uri
  *(void **) (&lilv_state_get_plugin_uri_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_state_get_plugin_uri");
  throw_if_dylib_error();
// lilv_state_get_uri
  *(void **) (&lilv_state_get_uri_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_state_get_uri");
  throw_if_dylib_error();
// lilv_state_get_label
  *(void **) (&lilv_state_get_label_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_state_get_label");
  throw_if_dylib_error();
// lilv_state_set_label
  *(void **) (&lilv_state_set_label_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_state_set_label");
  throw_if_dylib_error();
// lilv_state_set_metadata
  *(void **) (&lilv_state_set_metadata_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_state_set_metadata");
  throw_if_dylib_error();
// lilv_state_emit_port_values
  *(void **) (&lilv_state_emit_port_values_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_state_emit_port_values");
  throw_if_dylib_error();
// lilv_state_restore
  *(void **) (&lilv_state_restore_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_state_restore");
  throw_if_dylib_error();
// lilv_state_save
  *(void **) (&lilv_state_save_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_state_save");
  throw_if_dylib_error();
// lilv_state_to_string
  *(void **) (&lilv_state_to_string_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_state_to_string");
  throw_if_dylib_error();
// lilv_state_delete
  *(void **) (&lilv_state_delete_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_state_delete");
  throw_if_dylib_error();
// lilv_scale_point_get_label
  *(void **) (&lilv_scale_point_get_label_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_scale_point_get_label");
  throw_if_dylib_error();
// lilv_scale_point_get_value
  *(void **) (&lilv_scale_point_get_value_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_scale_point_get_value");
  throw_if_dylib_error();
// lilv_plugin_class_get_parent_uri
  *(void **) (&lilv_plugin_class_get_parent_uri_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_plugin_class_get_parent_uri");
  throw_if_dylib_error();
// lilv_plugin_class_get_uri
  *(void **) (&lilv_plugin_class_get_uri_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_plugin_class_get_uri");
  throw_if_dylib_error();
// lilv_plugin_class_get_label
  *(void **) (&lilv_plugin_class_get_label_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_plugin_class_get_label");
  throw_if_dylib_error();
// lilv_plugin_class_get_children
  *(void **) (&lilv_plugin_class_get_children_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_plugin_class_get_children");
  throw_if_dylib_error();
// lilv_plugin_instantiate
  *(void **) (&lilv_plugin_instantiate_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_plugin_instantiate");
  throw_if_dylib_error();
// lilv_instance_free
  *(void **) (&lilv_instance_free_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_instance_free");
  throw_if_dylib_error();
// lilv_plugin_get_uis
  *(void **) (&lilv_plugin_get_uis_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_plugin_get_uis");
  throw_if_dylib_error();
// lilv_ui_get_uri
  *(void **) (&lilv_ui_get_uri_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_ui_get_uri");
  throw_if_dylib_error();
// lilv_ui_get_classes
  *(void **) (&lilv_ui_get_classes_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_ui_get_classes");
  throw_if_dylib_error();
// lilv_ui_is_a
  *(void **) (&lilv_ui_is_a_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_ui_is_a");
  throw_if_dylib_error();
// lilv_ui_is_supported
  *(void **) (&lilv_ui_is_supported_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_ui_is_supported");
  throw_if_dylib_error();
// lilv_ui_get_bundle_uri
  *(void **) (&lilv_ui_get_bundle_uri_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_ui_get_bundle_uri");
  throw_if_dylib_error();
// lilv_ui_get_binary_uri
  *(void **) (&lilv_ui_get_binary_uri_dylibloader_wrapper_lv2) = dlsym(handle, "lilv_ui_get_binary_uri");
  throw_if_dylib_error();
return 0;
}
